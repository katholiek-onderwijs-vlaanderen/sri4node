{
  "version": 3,
  "sources": ["../sri4node.ts", "../js/common.ts", "../js/schemaUtils.ts", "../js/typeDefinitions.ts", "../js/url_parsing/non_flat_url_parser.ts", "../js/express-middleware-timer.ts", "../js/batch.ts", "../js/hooks.ts", "../js/phaseSyncedSettle.ts", "../js/queryObject.ts", "../js/queryUtils.ts", "../js/defaultFilter.ts", "../js/mapUtils.ts", "../js/informationSchema.ts", "../js/listResource.ts", "../js/expand.ts", "../js/regularResource.ts", "../js/utilLib.ts", "../js/overloadProtection.ts", "../js/relationsFilter.ts", "../js/docs/pugTemplates.ts"],
  "sourcesContent": ["/* eslint-disable import/first */\n/*\n  The core server for the REST api.\n  It is configurable, and provides a simple framework for creating REST interfaces.\n*/\n\nimport { Application, Request, Response } from \"express\";\nimport _ from \"lodash\";\nimport * as util from \"util\";\n\nimport Ajv from \"ajv\";\nimport addFormats from \"ajv-formats\";\nimport pgPromise from \"pg-promise\";\n\n// External dependencies.\nimport compression from \"compression\";\nimport bodyParser from \"body-parser\";\nimport Route from \"route-parser\";\nimport pMap from \"p-map\";\nimport busboy from \"busboy\";\nimport EventEmitter from \"events\";\nimport pEvent from \"p-event\";\nimport httpContext from \"express-http-context\";\nimport shortid from \"shortid\";\n\nimport {\n  debug,\n  error,\n  pgConnect,\n  pgExec,\n  typeToConfig,\n  installVersionIncTriggerOnTable,\n  stringifyError,\n  settleResultsToSriResults,\n  tableFromMapping,\n  transformRowToObject,\n  transformObjectToRow,\n  startTransaction,\n  startTask,\n  typeToMapping,\n  setServerTimingHdr,\n  sqlColumnNames,\n  getPgp,\n  handleRequestDebugLog,\n  createDebugLogConfigObject,\n  installEMT,\n  emtReportToServerTiming,\n  generateSriRequest,\n  urlToTypeAndKey,\n  parseResource,\n  hrtimeToMilliseconds,\n  isLogChannelEnabled,\n  debugAnyChannelAllowed,\n  checkSriConfigWithDb,\n  createReadableStream,\n  findPropertyInJsonSchema,\n} from \"./js/common\";\nimport * as batch from \"./js/batch\";\nimport { prepareSQL } from \"./js/queryObject\";\nimport {\n  TResourceDefinition,\n  TSriConfig,\n  TSriRequest,\n  TInternalSriRequest,\n  TSriRequestHandler,\n  SriError,\n  TBatchHandlerRecord,\n  THttpMethod,\n  TSriServerInstance,\n  isLikeCustomRouteDefinition,\n  isStreamingCustomRouteDefinition,\n  TSriResult,\n  TSriRequestHandlerForBatch,\n  TSriInternalUtils,\n  TSriRequestHandlerForPhaseSyncer,\n  TPluginConfig,\n} from \"./js/typeDefinitions\";\nimport * as queryUtils from \"./js/queryUtils\";\nimport * as schemaUtils from \"./js/schemaUtils\";\nimport * as mapUtils from \"./js/mapUtils\";\nimport { informationSchema } from \"./js/informationSchema\";\n\nimport { phaseSyncedSettle } from \"./js/phaseSyncedSettle\";\nimport { applyHooks } from \"./js/hooks\";\n\nimport * as listResource from \"./js/listResource\";\nimport * as regularResource from \"./js/regularResource\";\nimport * as utilLib from \"./js/utilLib\";\nimport { overloadProtectionFactory } from \"./js/overloadProtection\";\nimport * as relationFilters from \"./js/relationsFilter\";\nimport { ServerResponse } from \"http\";\n\nimport { JsonStreamStringify } from \"json-stream-stringify\";\n\nimport * as pugTpl from \"./js/docs/pugTemplates\";\n\nconst ajv = new Ajv({\n  // 2023-10: do not enable strict yet as it might break existing api's\n  // (for example: an object with 'properties' & 'required', but missing type: 'object'\n  // would suddenly fail because it is strictly speaking invalid json-schema)\n  // strict: true,\n  logger: {\n    log: (output: string) => {\n      debug(\"general\", output);\n    },\n    warn: (output: string) => {\n      debug(\"general\", output);\n    },\n    error: console.error,\n  },\n});\naddFormats(ajv);\n\n/**\n * 'coerceTypes' will not care about the type if it can be cast to the type in the schema\n * (for example a number can be cast to a string)\n * This is currently used to check the query parameter values in a url, because we don't\n * have the proper url parser (that creates a parse tree) yet, which would allow us to\n * actually parse a url into the right types.\n * So as long as that is not finished, we need to be less strict about the query params.\n */\nconst ajvWithCoerceTypes = new Ajv({\n  strict: true,\n  coerceTypes: true,\n});\naddFormats(ajvWithCoerceTypes);\n\n/**\n * Force https in production\n */\nfunction forceSecureSockets(req, res: Response, next) {\n  const isHttps = req.headers[\"x-forwarded-proto\"] === \"https\";\n  if (\n    !isHttps &&\n    req.get(\"Host\").indexOf(\"localhost\") < 0 &&\n    req.get(\"Host\").indexOf(\"127.0.0.1\") < 0\n  ) {\n    res.redirect(`https://${req.get(\"Host\")}${req.url}`);\n  } else {\n    next();\n  }\n}\n\n/**\n * Handle GET /{type}/schema\n */\nfunction getSchema(req, resp) {\n  const type = req.route.path\n    .split(\"/\")\n    .slice(0, req.route.path.split(\"/\").length - 1)\n    .join(\"/\");\n  const mapping = typeToMapping(type);\n\n  resp.set(\"Content-Type\", \"application/json\");\n  resp.send(mapping.schema);\n}\n\n/**\n * Handle GET /docs and /{type}/docs\n */\nfunction getDocs(req, resp: Response) {\n  const typeToMappingMap = typeToConfig(global.sri4node_configuration.resources);\n  const type = req.route.path\n    .split(\"/\")\n    .slice(0, req.route.path.split(\"/\").length - 1)\n    .join(\"/\");\n  if (type in typeToMappingMap) {\n    const mapping = typeToMappingMap[type];\n    resp.locals.path = req._parsedUrl.pathname;\n    // resp.render('resource', { resource: mapping, queryUtils });\n    resp.write(pugTpl.resource({ resource: mapping, queryUtils }));\n    resp.end();\n  } else if (req.route.path === \"/docs\") {\n    // resp.render('index', { config: global.sri4node_configuration });\n    resp.write(pugTpl.index({ config: global.sri4node_configuration }));\n    resp.end();\n  } else {\n    resp.status(404).send(\"Not Found\");\n  }\n}\n\nconst getResourcesOverview = (_req, resp) => {\n  resp.set(\"Content-Type\", \"application/json\");\n  const resourcesToSend = {};\n  global.sri4node_configuration.resources.forEach((resource) => {\n    const resourceName = resource.type.substring(1); // strip leading slash\n    resourcesToSend[resourceName] = {\n      docs: `${resource.type}/docs`,\n      schema: `${resource.type}/schema`,\n      href: resource.type,\n    };\n\n    if (resource.schema) {\n      resourcesToSend[resourceName].description = resource.schema.title;\n    }\n  });\n  resp.send(resourcesToSend);\n};\n\nfunction checkRequiredFields(mapping, information) {\n  const table = tableFromMapping(mapping);\n  const idx = mapping.type;\n  if (!information[idx]) {\n    throw new Error(`Table '${table}' seems to be missing in the database.`);\n  }\n  const mandatoryFields = [\"key\", \"$$meta.created\", \"$$meta.modified\", \"$$meta.deleted\"];\n  mandatoryFields.forEach((field: string) => {\n    if (!(field in information[idx])) {\n      throw new Error(`Mapping '${mapping.type}' lacks mandatory field '${field}'`);\n    }\n  });\n}\n\nconst middlewareErrorWrapper = (fun) => async (req, resp) => {\n  try {\n    await fun(req, resp);\n  } catch (err) {\n    error(\n      \"____________________________ E R R O R (middlewareErrorWrapper) ___________________________\",\n    );\n    error(err);\n    error(\"STACK:\");\n    error(err.stack);\n    error(\n      \"___________________________________________________________________________________________\",\n    );\n    resp.status(500).send(`Internal Server Error. [${stringifyError(err)}]`);\n  }\n};\n\nprocess.on(\"unhandledRejection\", (err) => {\n  console.log(err);\n  throw err;\n});\n\nconst handleRequest = async (\n  sriRequest: TSriRequest,\n  func: TSriRequestHandler,\n  mapping: TResourceDefinition | null,\n): Promise<TSriResult> => {\n  const { dbT } = sriRequest;\n  let result;\n  if (sriRequest.isBatchRequest) {\n    result = await (func as TSriRequestHandlerForBatch)(\n      sriRequest,\n      global.sriInternalUtils as TSriInternalUtils,\n    );\n  } else {\n    const job = [\n      func as TSriRequestHandlerForPhaseSyncer,\n      [dbT, sriRequest, mapping, global.sriInternalUtils as TSriInternalUtils],\n    ] as const;\n\n    [result] = settleResultsToSriResults(\n      await phaseSyncedSettle([job], {\n        beforePhaseHooks: global.sri4node_configuration.beforePhase,\n      }),\n    );\n    if (result instanceof SriError || result?.__proto__?.constructor?.name === \"SriError\") {\n      throw result;\n    }\n\n    if (sriRequest.streamStarted === undefined || !sriRequest.streamStarted()) {\n      await applyHooks(\n        \"transform response\",\n        mapping?.transformResponse,\n        (f) => f(dbT, sriRequest, result),\n        sriRequest,\n      );\n    }\n  }\n  return result;\n};\n\nconst handleServerTiming = async (req, resp, sriRequest: TSriRequest) => {\n  const logEnabled = isLogChannelEnabled(\"server-timing\");\n  const hdrEnable = sriRequest.headers?.[\"request-server-timing\"] !== undefined;\n  let serverTiming = \"\";\n  if ((logEnabled || hdrEnable) && sriRequest.serverTiming !== undefined) {\n    emtReportToServerTiming(req, resp, sriRequest);\n    const notNullEntries = Object.entries(sriRequest.serverTiming).filter(\n      ([_property, value]) => (value as number) > 0,\n    );\n\n    if (notNullEntries.length > 0) {\n      serverTiming = notNullEntries\n        .map(\n          ([property, value]) =>\n            `${property};dur=${(Math.round((value as number) * 100) / 100).toFixed(2)}`,\n        )\n        .join(\", \");\n      if (logEnabled) {\n        debug(\"server-timing\", serverTiming);\n      }\n      if (hdrEnable) {\n        if (resp.headersSent) {\n          // streaming mode\n          (sriRequest.outStream as any).addTrailers({\n            \"Server-Timing\": serverTiming,\n          });\n        } else {\n          resp.set(\"Server-Timing\", serverTiming);\n        }\n      }\n    }\n  }\n};\n\nconst expressWrapper = (\n  dbR,\n  dbW,\n  func: TSriRequestHandler,\n  sriConfig: TSriConfig,\n  mapping: TResourceDefinition | null,\n  isStreamingRequest: boolean,\n  isBatchRequest: boolean,\n  readOnly0: boolean,\n) =>\n  async function (req: Request, resp: Response, _next) {\n    let t: any = null;\n    let endTask;\n    let resolveTx;\n    let rejectTx;\n    let readOnly;\n    const reqMsgStart = `${req.method} ${req.originalUrl}`;\n    debug(\"requests\", `${reqMsgStart} starting.`);\n\n    const hrstart = process.hrtime();\n    resp.on(\"finish\", () => {\n      const hrend = process.hrtime(hrstart);\n      const ms = hrend[0] * 1000 + hrend[1] / 1e6;\n      debug(\"requests\", `${reqMsgStart} took ${ms.toFixed(2)} ms`);\n    });\n    debug(\"trace\", \"Starting express wrapper\");\n    let sriRequest;\n    try {\n      let batchRoutingDuration = 0;\n      if (isBatchRequest) {\n        // evaluate batch body now to know wether the batch is completetly read-only\n        // and do early error detecion\n\n        const hrStart2 = process.hrtime();\n        batch.matchBatch(req);\n        const hrDuration = process.hrtime(hrStart2);\n        batchRoutingDuration = hrtimeToMilliseconds(hrDuration);\n\n        const mapReadOnly = (a) => {\n          if (Array.isArray(a)) {\n            return a.map(mapReadOnly);\n          }\n          return a.match.handler.readOnly;\n        };\n        readOnly = _.flatten(req.body?.map(mapReadOnly)).every((e) => e);\n      } else {\n        readOnly = readOnly0;\n      }\n      global.overloadProtection.startPipeline();\n\n      const reqId = httpContext.get(\"reqId\");\n      if (reqId !== undefined) {\n        resp.set(\"vsko-req-id\", reqId);\n      } else {\n        console.log(\"no reqId ???\");\n      }\n\n      // Before creating the inital SriRequest object, we need to generate a task/transaction !!!\n      const hrStartStartTransaction = process.hrtime();\n      if (readOnly === true) {\n        ({ t, endTask } = await startTask(dbR));\n      } else {\n        ({ tx: t, resolveTx, rejectTx } = await startTransaction(dbW));\n      }\n      const hrElapsedStartTransaction = process.hrtime(hrStartStartTransaction);\n\n      sriRequest = generateSriRequest(req, resp, {\n        isBatchRequest,\n        readOnly,\n        mapping: mapping || undefined,\n        isStreamingRequest,\n        dbT: t,\n      });\n      setServerTimingHdr(\n        sriRequest,\n        \"db-starttask\",\n        hrtimeToMilliseconds(hrElapsedStartTransaction),\n      );\n\n      req.on(\"close\", (_err) => {\n        sriRequest.reqCancelled = true;\n      });\n\n      await applyHooks(\n        \"transform request\",\n        sriConfig.transformRequest || [],\n        (f) => f(req, sriRequest, t),\n        sriRequest,\n      );\n\n      setServerTimingHdr(sriRequest, \"batch-routing\", batchRoutingDuration);\n\n      const result = await handleRequest(sriRequest, func, mapping);\n\n      const terminateDb = async (error1, readOnly1) => {\n        if (readOnly1 === true) {\n          debug(\"db\", \"++ Processing went OK. Closing database task. ++\");\n          await endTask();\n        } else if (error1) {\n          if (req.query.dryRun === \"true\") {\n            debug(\n              \"db\",\n              \"++ Error during processing in dryRun mode. Rolling back database transaction.\",\n            );\n          } else {\n            debug(\"db\", \"++ Error during processing. Rolling back database transaction.\");\n          }\n          await rejectTx();\n        } else if (req.query.dryRun === \"true\") {\n          debug(\"db\", \"++ Processing went OK in dryRun mode. Rolling back database transaction.\");\n          await rejectTx();\n        } else {\n          debug(\"db\", \"++ Processing went OK. Committing database transaction.\");\n          await resolveTx();\n        }\n      };\n\n      if (resp.headersSent) {\n        // we are in streaming mode\n        if (result.status < 300) {\n          await terminateDb(false, readOnly);\n        } else {\n          await terminateDb(true, readOnly);\n        }\n        await handleServerTiming(req, resp, sriRequest);\n        sriRequest.outStream?.end();\n      } else {\n        if (result.status < 300) {\n          await terminateDb(false, readOnly);\n        } else {\n          await terminateDb(true, readOnly);\n        }\n\n        await handleServerTiming(req, resp, sriRequest);\n        if (result.headers) {\n          resp.set(result.headers);\n        }\n        // resp.status(result.status).send(result.body) // OLD VERSION, now streaming JSON stringify for list resources\n        resp.status(result.status);\n        // now stream result.body to the express response\n        // TODO: fix bad test to know if it's a list resource, but the code below that also adds\n        // all other fields besides $$meta and results, should avoid that this is a disaster\n        if (result.body && Array.isArray(result.body.results)) {\n          resp.setHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n          // VERSION WITH JSON STREAM\n          // const writableJsonsStream = JSONStream.stringify(`{\"$$meta\": ${JSON.stringify(result.body.$$meta)}, \"results\":\\n`, ',', '\\n}');\n          // writableJsonsStream.pipe(resp);\n          // writableJsonsStream.write(result.body.results);\n          // writableJsonsStream.end();\n\n          // VERSION WHERE I SIMPLY PUT EACH ARRAY ITEM ON THE STREAM MYSELF (is this faster than JSONStream.striingify which seems slow looking at my first tests)\n          if (result.body.$$meta) {\n            resp.write(`{\"$$meta\": ${JSON.stringify(result.body.$$meta)}, \"results\": [\\n`);\n          }\n          const total = result.body.results.length;\n          result.body.results.forEach((record, index) =>\n            resp.write(`${JSON.stringify(record)}${index + 1 < total ? \",\" : \"\"}\\n`),\n          );\n          resp.write(\"]\");\n          // if result.body contains other properties, add them to the response as well\n          Object.entries(result.body)\n            .filter(([key]) => ![\"$$meta\", \"results\"].includes(key))\n            .forEach(([key, value]) => resp.write(`,\\n\"${key}\": ${JSON.stringify(value)}`));\n          resp.write(\"\\n}\");\n          resp.end();\n        } else if (result.body !== undefined) {\n          resp.send(result.body);\n        } else {\n          resp.send();\n        }\n      }\n      await applyHooks(\n        \"afterRequest\",\n        sriConfig.afterRequest || [],\n        (f) => f(sriRequest),\n        sriRequest,\n      );\n      if (\n        global.sri4node_configuration.logdebug &&\n        global.sri4node_configuration.logdebug.statuses !== undefined\n      ) {\n        setImmediate(() => {\n          // use setImmediate to make sure also the last log messages are buffered before calling handleRequestDebugLog\n          handleRequestDebugLog(result.status);\n        });\n      }\n    } catch (err) {\n      await applyHooks(\n        \"errorHandler\",\n        sriConfig.errorHandler || [],\n        (f) => f(sriRequest, err),\n        sriRequest,\n      );\n\n      // TODO: what with streaming errors\n      if (t != null) {\n        // t will be null in case of error during startTask/startTransaction\n        if (readOnly === true) {\n          debug(\"db\", \"++ Exception caught. Closing database task. ++\");\n          await endTask();\n        } else {\n          debug(\"db\", \"++ Exception caught. Rolling back database transaction. ++\");\n          await rejectTx();\n        }\n      }\n\n      if (resp.headersSent) {\n        error(\n          \"____________________________ E R R O R (expressWrapper)____________________________________\",\n        );\n        error(err);\n        error(JSON.stringify(err, null, 2));\n        error(\"STACK:\");\n        error(err.stack);\n        error(\n          \"___________________________________________________________________________________________\",\n        );\n        error(\"NEED TO DESTROY STREAMING REQ\");\n        resp.on(\"drain\", async () => {\n          await resp.destroy();\n          error(\"[drain event] Stream is destroyed.\");\n        });\n        resp.on(\"finish\", async () => {\n          await resp.destroy();\n          error(\"[finish event] Stream is destroyed.\");\n        });\n        resp.write(\n          \"\\n\\n\\n____________________________ E R R O R (expressWrapper)____________________________________\\n\",\n        );\n        resp.write(err.toString());\n        resp.write(JSON.stringify(err, null, 2));\n        resp.write(\n          \"\\n___________________________________________________________________________________________\\n\",\n        );\n\n        // keep sending data until the buffer is full, which will trigger a drain event,\n        // at which point the stream will be destroyed instead of closing it gracefully\n        // (because we want tosignal to the user that something went wrong, even if a\n        // 200 OK header has already been sent)\n        while (resp.write(\"       \")) {\n          // do nothing besides writing some more\n        }\n      } else if (err instanceof SriError || err?.__proto__?.constructor?.name === \"SriError\") {\n        if (err.status > 0) {\n          const reqId = httpContext.get(\"reqId\");\n          if (reqId !== undefined) {\n            err.body.vskoReqId = reqId;\n            err.headers[\"vsko-req-id\"] = reqId;\n          }\n          resp.set(err.headers).status(err.status).send(err.body);\n        }\n      } else {\n        error(\n          \"____________________________ E R R O R (expressWrapper)____________________________________\",\n        );\n        error(err);\n        error(\"STACK:\");\n        error(err.stack);\n        error(\n          \"___________________________________________________________________________________________\",\n        );\n        resp.status(500).send(`Internal Server Error. [${stringifyError(err)}]`);\n      }\n      if (\n        global.sri4node_configuration.logdebug &&\n        global.sri4node_configuration.logdebug.statuses !== undefined\n      ) {\n        setImmediate(() => {\n          // use setImmediate to make sure also the last log messages are buffered before calling handleRequestDebugLog\n          console.log(\"GOING TO CALL handleRequestDebugLog\");\n          handleRequestDebugLog(err.status ? err.status : 500);\n        });\n      }\n    } finally {\n      global.overloadProtection.endPipeline();\n    }\n  };\n\nconst toArray = (resource, name) => {\n  // makes the property <name> of object <resource> an array\n  if (resource[name] === undefined) {\n    resource[name] = [];\n  } else if (resource[name] === null) {\n    console.log(`WARNING: handler '${name}' was set to 'null' -> assume []`);\n    resource[name] = [];\n  } else if (!Array.isArray(resource[name])) {\n    resource[name] = [resource[name]];\n  }\n};\n\n/**\n * Exposes a bunch of utility functions.\n */\nconst utils = {\n  // Utilities to run arbitrary SQL in validation, beforeupdate, afterupdate, etc..\n  executeSQL: pgExec,\n  prepareSQL,\n  convertListResourceURLToSQL: listResource.getSQLFromListResource,\n  addReferencingResources: utilLib.addReferencingResources,\n\n  // removed pgInit and pgResult, but kept pgConnect for now (in case someoine wants to use the\n  // db, dbW and/or dbR properties)\n  pgConnect,\n\n  // still here for backwards compatibility, in most cases we assume that using an\n  // internalSriRerquest would be sufficient\n  transformRowToObject,\n  transformObjectToRow,\n\n  typeToMapping,\n  tableFromMapping,\n  urlToTypeAndKey,\n  parseResource, // should be deprecated in favour of a decent url parsing mechanism\n};\n\n/**\n * The main function that configures an sri4node api on top of an existing express app,\n * and based on an sriConfig object\n * @param app express application\n * @param sriConfig the config object\n */\nasync function configure(app: Application, sriConfig: TSriConfig): Promise<TSriServerInstance> {\n  // make sure no x-powered-by header is being sent\n  app.disable(\"x-powered-by\");\n\n  // 2022-03-08 REMOVE gc-stats as the project is abandoned and will cause problems with node versions > 12\n  // let maxHeapUsage = 0;\n  // if (sriConfig.trackHeapMax === true) {\n  //   const gc = (require('gc-stats'))();\n  //   gc.on('stats', (stats) => {\n  //     const heapUsage = (stats.before.usedHeapSize / 1024 / 1024);\n  //     if (heapUsage > maxHeapUsage) {\n  //       maxHeapUsage = heapUsage;\n  //     }\n  //   });\n  // }\n\n  try {\n    sriConfig.resources.forEach((resource) => {\n      // initialize undefined hooks in all resources with empty list\n      [\n        \"beforeRead\",\n        \"afterRead\",\n        \"beforeUpdate\",\n        \"afterUpdate\",\n        \"beforeInsert\",\n        \"afterInsert\",\n        \"beforeDelete\",\n        \"afterDelete\",\n        \"customRoutes\",\n        \"transformResponse\",\n      ].forEach((name) => toArray(resource, name));\n      // for backwards compability set listResultDefaultIncludeCount default to true\n      if (resource.listResultDefaultIncludeCount === undefined) {\n        resource.listResultDefaultIncludeCount = true;\n      }\n    });\n\n    // initialize undefined global hooks with empty list\n    [\"beforePhase\", \"transformRequest\", \"transformInternalRequest\"].forEach((name) =>\n      toArray(sriConfig, name),\n    );\n    sriConfig.beforePhase = [\n      ...(sriConfig.beforePhase || []),\n      regularResource.beforePhaseQueryByKey,\n    ];\n    sriConfig.beforePhase = [\n      ...(sriConfig.beforePhase || []),\n      regularResource.beforePhaseInsertUpdateDelete,\n    ];\n\n    if (sriConfig.bodyParserLimit === undefined) {\n      sriConfig.bodyParserLimit = \"5mb\";\n    }\n\n    sriConfig.resources.forEach((resourceDefinition) => {\n      if (!resourceDefinition.onlyCustom) {\n        // In case query is not defied -> use defaultFilter\n        if (resourceDefinition.query === undefined) {\n          resourceDefinition.query = { defaultFilter: queryUtils.defaultFilter };\n        }\n        // In case of 'referencing' fields -> add expected filterReferencedType query\n        // if not defined.\n        if (resourceDefinition.map) {\n          Object.keys(resourceDefinition.map).forEach((key) => {\n            if (\n              resourceDefinition.map?.[key]?.references !== undefined &&\n              resourceDefinition.query &&\n              resourceDefinition.query?.[key] === undefined\n            ) {\n              resourceDefinition.query[key] = queryUtils.filterReferencedType(\n                resourceDefinition.map[key].references,\n                key,\n              );\n            }\n          });\n        }\n\n        // TODO: what with custom stuff ?\n        //  e.g content-api with attachments / security/query\n        // TODO: implement a better way to determine key type!!\n        if (resourceDefinition.schema === undefined) {\n          throw new Error(`Schema definition is missing for '${resourceDefinition.type}' !`);\n        }\n        const keyPropertyDefinition = findPropertyInJsonSchema(resourceDefinition.schema, \"key\");\n        if (keyPropertyDefinition === null) {\n          throw new Error(`Key is not defined in the schema of '${resourceDefinition.type}' !`);\n        }\n        if (keyPropertyDefinition.pattern === schemaUtils.guid(\"foo\").pattern) {\n          resourceDefinition.singleResourceRegex = new RegExp(\n            `^${resourceDefinition.type}/([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$`,\n          );\n        } else if (keyPropertyDefinition.type === schemaUtils.numeric(\"foo\").type) {\n          resourceDefinition.singleResourceRegex = new RegExp(\n            `^${resourceDefinition.type}/([0-9]+)$`,\n          );\n        } else if (keyPropertyDefinition.type === schemaUtils.string(\"foo\").type) {\n          resourceDefinition.singleResourceRegex = new RegExp(\n            `^${resourceDefinition.type}/(\\\\w+)$`,\n          );\n        } else {\n          throw new Error(`Key type of resource ${resourceDefinition.type} unknown!`);\n        }\n        resourceDefinition.listResourceRegex = new RegExp(\n          `^${resourceDefinition.type}(?:[?#]\\\\S*)?$`,\n        );\n\n        // TODO: add descent type!\n        try {\n          // Compile the JSON schema to see if there are errors + store it for later usage\n          debug(\"general\", `Going to compile JSON schema of ${resourceDefinition.type}`);\n          // validateKey is used with express request params which are always strings,\n          // so the schema needs to be checked without complaining about the fact that\n          // it is a string, even when key is defined asa number for example\n          resourceDefinition.validateKey = ajvWithCoerceTypes.compile(keyPropertyDefinition);\n          resourceDefinition.validateSchema = ajv.compile(resourceDefinition.schema);\n        } catch (err) {\n          console.error(\"===============================================================\");\n          console.error(`Compiling JSON schema of ${resourceDefinition.type} failed:`);\n          console.error(\"\");\n          console.error(`Schema: ${JSON.stringify(resourceDefinition.schema, null, 2)}`);\n          console.error(\"\");\n          console.error(`Error: ${err.message}`);\n          console.error(\"===============================================================\");\n          process.exit(1);\n        }\n      }\n    });\n\n    sriConfig.resources.forEach((mapping) => {\n      if (mapping.metaType === undefined) {\n        error(`WARNING: metaType missing for resource ${mapping.type}`);\n        mapping.metaType = \"NOT SPECIFIED\";\n      }\n    });\n\n    sriConfig.utils = utils;\n\n    if (sriConfig.batchConcurrency === undefined) {\n      sriConfig.batchConcurrency = 4;\n    }\n\n    if (sriConfig.logdebug !== undefined) {\n      sriConfig.logdebug = createDebugLogConfigObject(sriConfig.logdebug);\n    }\n\n    global.sri4node_configuration = sriConfig; // share configuration with other modules\n\n    // in futre we'd want to support a separate read and write datrabase by adding another\n    // connection paramaters object toi the config, and if it is filled in that can be the\n    // separate read database\n    const db = await pgConnect(sriConfig);\n    const dbR = db;\n    const dbW = db;\n\n    const pgp = getPgp();\n\n    // before registering routes in express, call startUp hook\n    await applyHooks(\"start up\", sriConfig.startUp || [], (f) => f(db, pgp));\n\n    const currentInformationSchema = await informationSchema(dbR, sriConfig);\n    global.sri4node_configuration.informationSchema = currentInformationSchema;\n\n    // Do automatic DB updates that are part of sri4node's standard behavior (like adding version triggers)\n    await pMap(\n      sriConfig.resources,\n      async (mapping) => {\n        if (!mapping.onlyCustom) {\n          const schema =\n            sriConfig.databaseConnectionParameters?.schema ||\n            sriConfig.databaseLibraryInitOptions?.schema;\n          const schemaName = Array.isArray(schema) ? schema[0] : schema?.toString();\n          await installVersionIncTriggerOnTable(dbW, tableFromMapping(mapping), schemaName);\n        }\n      },\n      { concurrency: 1 },\n    );\n\n    checkSriConfigWithDb(sriConfig, currentInformationSchema);\n\n    // Prepare pg-promise columnsets for multi insert/update & delete\n    const generatePgColumnSet = (columnNames, type, table) => {\n      const columns = columnNames.map((cname) => {\n        const cConf: pgPromise.IColumnConfig<Record<string, string>> = {\n          name: cname,\n        };\n\n        if (cname.includes(\".\")) {\n          // popertynames with dot like $$meta.* are problematic with default pg-promise\n          // see https://github.com/vitaly-t/pg-promise/issues/494  ==> workaround with .init() fun\n          cConf.prop = `_${cname.replace(/\\./g, \"_\")}`; // if prop is not unique multiple $$meta.* will get the same value!\n          cConf.init = (c) => c.source[cname];\n        }\n        const cType = global.sri4node_configuration.informationSchema[type][cname].type;\n        const cElementType =\n          global.sri4node_configuration.informationSchema[type][cname].element_type;\n        if (cType !== \"text\") {\n          if (cType === \"ARRAY\") {\n            cConf.cast = `${cElementType}[]`;\n            // } else if (cType.toLowerCase() === \"jsonb\") {\n            //   cConf.mod = ':json';\n          } else {\n            cConf.cast = cType;\n          }\n        }\n        if (cname === \"key\") {\n          cConf.cnd = true;\n        }\n        return new pgp.helpers.Column(cConf);\n      });\n\n      return new pgp.helpers.ColumnSet(columns, { table });\n    };\n\n    global.sri4node_configuration.pgColumns = Object.fromEntries(\n      sriConfig.resources\n        .filter((resource) => !resource.onlyCustom)\n        .map((resource) => {\n          const { type } = resource;\n          const table = tableFromMapping(typeToMapping(type));\n          const columns = JSON.parse(`[${sqlColumnNames(typeToMapping(type))}]`).filter(\n            (cname) => !cname.startsWith(\"$$meta.\"),\n          );\n          const ret: any = {};\n          ret.insert = new pgp.helpers.ColumnSet(columns, { table });\n\n          const dummyUpdateRow = transformObjectToRow({}, resource, false);\n          ret.update = generatePgColumnSet(\n            [...new Set([\"key\", \"$$meta.modified\", ...Object.keys(dummyUpdateRow)])],\n            type,\n            table,\n          );\n          ret.delete = generatePgColumnSet(\n            [\"key\", \"$$meta.modified\", \"$$meta.deleted\"],\n            type,\n            table,\n          );\n\n          return [table, ret];\n        }),\n    );\n\n    global.sri4node_loaded_plugins = new Map();\n\n    global.sri4node_install_plugin = async (plugin: TPluginConfig) => {\n      console.log(`Installing plugin ${util.inspect(plugin)}`);\n      // load plugins with a uuid only once; backwards compatible with old system without uuid\n      if (plugin.uuid !== undefined && global.sri4node_loaded_plugins.has(plugin.uuid)) {\n        return;\n      }\n\n      await plugin.install(global.sri4node_configuration, dbW);\n\n      if (plugin.uuid !== undefined) {\n        debug(\"general\", `Loaded plugin ${plugin.uuid}.`);\n        global.sri4node_loaded_plugins.set(plugin.uuid, plugin);\n      }\n    };\n\n    if (sriConfig.plugins !== undefined) {\n      await pMap(\n        sriConfig.plugins,\n        async (plugin) => {\n          await global.sri4node_install_plugin(plugin);\n        },\n        { concurrency: 1 },\n      );\n    }\n\n    // set the overload protection as first middleware to drop requests as soon as possible\n    global.overloadProtection = overloadProtectionFactory(sriConfig.overloadProtection);\n    app.use(async (_req, res, next) => {\n      if (global.overloadProtection.canAccept()) {\n        next();\n      } else {\n        debug(\"overloadProtection\", \"DROPPED REQ\");\n        if (sriConfig.overloadProtection?.retryAfter !== undefined) {\n          res.set(\"Retry-After\", sriConfig.overloadProtection?.retryAfter.toString());\n        }\n        res.status(503).send([\n          {\n            code: \"too.busy\",\n            msg: \"The request could not be processed as the server is too busy right now. Try again later.\",\n          },\n        ]);\n      }\n    });\n\n    const emt = installEMT(app);\n\n    if (global.sri4node_configuration.forceSecureSockets) {\n      // All URLs force SSL and allow cross origin access.\n      app.use(forceSecureSockets);\n    }\n\n    app.use(emt.instrument(compression(), \"mw-compression\"));\n    app.use(\n      emt.instrument(\n        bodyParser.json({ limit: sriConfig.bodyParserLimit, strict: false }),\n        \"mw-bodyparser\",\n      ),\n    );\n    // use option 'strict: false' to allow also valid JSON like a single boolean\n\n    /// 2023: docs were broken because __dirname does not exist in ESM modules,\n    /// and we used pwd which is incorrect.\n    /// In order to fix this, we stopped using static files stored relative to this file\n    /// and instead hardcoded the few files (.pug and .css) we need for the docs\n    /// inside the docs/pugTemplates.ts module\n    const returnFileFromDocsStatic = (_req: Request, res: Response) => {\n      res.write(pugTpl.staticFiles[_req.params.file]);\n      res.end();\n    };\n\n    app.get(\"/docs/static/:file\", returnFileFromDocsStatic);\n\n    app.put(\n      \"/log\",\n      middlewareErrorWrapper((req, resp) => {\n        const err = req.body;\n        console.log(\"Client side error :\");\n        err.stack.split(\"\\n\").forEach((line) => console.log(line));\n        resp.end();\n      }),\n    );\n\n    app.get(\"/docs\", middlewareErrorWrapper(getDocs));\n    app.get(\"/resources\", middlewareErrorWrapper(getResourcesOverview));\n\n    app.post(\"/setlogdebug\", (req, resp, _next) => {\n      global.sri4node_configuration.logdebug = createDebugLogConfigObject(req.body);\n      resp.send(\"OK\");\n    });\n\n    app.use(httpContext.middleware);\n    // Run the context for each request. Assign a unique identifier to each request\n    app.use((req, res, next) => {\n      httpContext.ns.bindEmitter(req);\n      httpContext.ns.bindEmitter(res);\n      let reqId: string | string[];\n      if (req.headers[\"x-request-id\"] !== undefined) {\n        // if present use the id provided by heroku\n        reqId = req.headers[\"x-request-id\"];\n      } else if (req.headers[\"x-amz-cf-id\"] !== undefined) {\n        // if present use the id provided by cloudfront\n        reqId = req.headers[\"x-amz-cf-id\"];\n      } else {\n        reqId = shortid.generate();\n      }\n      if (sriConfig.id !== undefined) {\n        reqId = `${sriConfig.id}#${reqId}`;\n      }\n      httpContext.set(\"reqId\", reqId);\n      next();\n    });\n\n    await pMap(\n      sriConfig.resources,\n      async (mapping) => {\n        if (!mapping.onlyCustom) {\n          if (mapping.map?.key === undefined) {\n            // add key if missing, needed for key offset paging\n            mapping.map = {\n              ...mapping.map,\n              key: {} as any,\n            };\n          }\n          checkRequiredFields(mapping, sriConfig.informationSchema);\n\n          if (mapping.query === undefined) {\n            mapping.query = {};\n          }\n\n          // append relation filters if auto-detected a relation resource\n          if (mapping.map.from && mapping.map.to) {\n            // mapping.query.relationsFilter = mapping.query.relationsFilter(mapping.map.from, mapping.map.to);\n            mapping.query = {\n              ...mapping.query,\n              ...relationFilters,\n            };\n          }\n\n          // register schema for external usage. public.\n          app.get(`${mapping.type}/schema`, middlewareErrorWrapper(getSchema));\n\n          // register docs for this type\n          app.get(`${mapping.type}/docs`, middlewareErrorWrapper(getDocs));\n          app.get(`${mapping.type}/docs/static/:file`, returnFileFromDocsStatic);\n        }\n      },\n      { concurrency: 1 },\n    );\n\n    // temporarilty allow a global /batch via config option for samenscholing\n    if (sriConfig.enableGlobalBatch) {\n      const globalBatchPath = `${sriConfig.globalBatchRoutePrefix !== undefined ? sriConfig.globalBatchRoutePrefix : \"\"}/batch`;\n      debug(\"general\", `registering route ${globalBatchPath} - PUT/POST`);\n      debug(\"general\", `registering route ${`${globalBatchPath}_streaming`} - PUT/POST`);\n      app.put(\n        globalBatchPath,\n        expressWrapper(dbR, dbW, batch.batchOperation, sriConfig, null, false, true, false),\n      );\n      app.post(\n        globalBatchPath,\n        expressWrapper(dbR, dbW, batch.batchOperation, sriConfig, null, false, true, false),\n      );\n\n      app.put(\n        `${globalBatchPath}_streaming`,\n        expressWrapper(dbR, dbW, batch.batchOperationStreaming, sriConfig, null, true, true, false),\n      );\n      app.post(\n        `${globalBatchPath}_streaming`,\n        expressWrapper(dbR, dbW, batch.batchOperationStreaming, sriConfig, null, true, true, false),\n      );\n    }\n\n    /**\n     * array of objects with url, verb, handler and some other options\n     * which can be called within a batch\n     */\n    const batchHandlerMap: Array<TBatchHandlerRecord> = sriConfig.resources.reduce(\n      (acc: Array<TBatchHandlerRecord>, mapping) => {\n        // [path, verb, func, mapping, streaming, readOnly, isBatch]\n        const crudRoutes: Array<TBatchHandlerRecord> = [\n          {\n            route: `${mapping.type}/:key`,\n            verb: \"GET\" as THttpMethod,\n            func: regularResource.getRegularResource,\n            config: sriConfig,\n            mapping,\n            streaming: false,\n            readOnly: true,\n            isBatch: false,\n          },\n          {\n            route: `${mapping.type}/:key`,\n            verb: \"PUT\",\n            func: regularResource.createOrUpdateRegularResource,\n            config: sriConfig,\n            mapping,\n            streaming: false,\n            readOnly: false,\n            isBatch: false,\n          },\n          {\n            route: `${mapping.type}/:key`,\n            verb: \"PATCH\",\n            func: regularResource.patchRegularResource,\n            config: sriConfig,\n            mapping,\n            streaming: false,\n            readOnly: false,\n            isBatch: false,\n          },\n          {\n            route: `${mapping.type}/:key`,\n            verb: \"DELETE\",\n            func: regularResource.deleteRegularResource,\n            config: sriConfig,\n            mapping,\n            streaming: false,\n            readOnly: false,\n            isBatch: false,\n          },\n          {\n            route: mapping.type,\n            verb: \"GET\",\n            func: listResource.getListResource,\n            config: sriConfig,\n            mapping,\n            streaming: false,\n            readOnly: true,\n            isBatch: false,\n          },\n          // // a check operation to determine wether lists A is part of list B\n          {\n            route: `${mapping.type}/isPartOf`,\n            verb: \"POST\",\n            func: listResource.isPartOf,\n            config: sriConfig,\n            mapping,\n            streaming: false,\n            readOnly: true,\n            isBatch: false,\n          },\n        ];\n\n        const batchRoutes: Array<TBatchHandlerRecord> = [\n          // [`${mapping.type}/batch`, 'PUT', batch.batchOperation, sriConfig, mapping, false, false, true],\n          {\n            route: `${mapping.type}/batch`,\n            verb: \"PUT\",\n            func: batch.batchOperation,\n            config: sriConfig,\n            mapping,\n            streaming: false,\n            readOnly: false,\n            isBatch: true,\n          },\n          // [`${mapping.type}/batch`, 'POST', batch.batchOperation, sriConfig, mapping, false, false, true],\n          {\n            route: `${mapping.type}/batch`,\n            verb: \"POST\",\n            func: batch.batchOperation,\n            config: sriConfig,\n            mapping,\n            streaming: false,\n            readOnly: false,\n            isBatch: true,\n          },\n          // [`${mapping.type}/batch_streaming`, 'PUT', batch.batchOperationStreaming, sriConfig, mapping, true, false, true],\n          {\n            route: `${mapping.type}/batch_streaming`,\n            verb: \"PUT\",\n            func: batch.batchOperationStreaming,\n            config: sriConfig,\n            mapping,\n            streaming: true,\n            readOnly: false,\n            isBatch: true,\n          },\n          // [`${mapping.type}/batch_streaming`, 'POST', batch.batchOperationStreaming, sriConfig, mapping, true, false, true],\n          {\n            route: `${mapping.type}/batch_streaming`,\n            verb: \"POST\",\n            func: batch.batchOperationStreaming,\n            config: sriConfig,\n            mapping,\n            streaming: true,\n            readOnly: false,\n            isBatch: true,\n          },\n        ];\n\n        // TODO: check customRoutes have required fields and make sense ==> use json schema for validation\n\n        mapping.customRoutes?.forEach((cr) => {\n          const customMapping: TResourceDefinition = _.cloneDeep(mapping) as TResourceDefinition;\n          if (\n            isLikeCustomRouteDefinition(cr) &&\n            \"alterMapping\" in cr &&\n            cr.alterMapping !== undefined\n          ) {\n            cr.alterMapping(customMapping);\n          } else if (\"transformResponse\" in cr && cr.transformResponse) {\n            customMapping.transformResponse = [\n              ...(customMapping.transformResponse || []),\n              cr.transformResponse,\n            ];\n          }\n\n          cr.httpMethods.forEach((method) => {\n            if (isLikeCustomRouteDefinition(cr)) {\n              const crudPath = mapping.type + cr.like;\n              customMapping.query = {\n                ...customMapping.query,\n                ...cr.query,\n              };\n\n              const likeMatches: TBatchHandlerRecord[] = crudRoutes.filter(\n                ({ route, verb }) => route === crudPath && verb === method.toUpperCase(),\n              );\n              if (likeMatches.length === 0) {\n                console.log(\n                  `\\nWARNING: customRoute like ${crudPath} - ${method} not found => ignored.\\n`,\n                );\n              } else {\n                const { verb, func, streaming, readOnly } = likeMatches[0];\n                acc.push({\n                  route: crudPath + cr.routePostfix,\n                  verb,\n                  func,\n                  config: sriConfig,\n                  mapping: customMapping,\n                  streaming,\n                  readOnly,\n                  isBatch: false,\n                });\n              }\n            } else if (isStreamingCustomRouteDefinition(cr)) {\n              const { streamingHandler } = cr;\n              acc.push({\n                route: mapping.type + cr.routePostfix,\n                verb: method.toUpperCase() as THttpMethod,\n                func: async (\n                  _phaseSyncer,\n                  tx: pgPromise.IDatabase<unknown>,\n                  sriRequest: TSriRequest,\n                  _mapping1,\n                ) => {\n                  if (sriRequest.isBatchPart) {\n                    throw new SriError({\n                      status: 400,\n                      errors: [\n                        {\n                          code: \"streaming.not.allowed.in.batch\",\n                          msg: \"Streaming mode cannot be used inside a batch.\",\n                        },\n                      ],\n                    });\n                  }\n                  if (cr.busBoy) {\n                    try {\n                      sriRequest.busBoy = busboy({\n                        ...cr.busBoyConfig,\n                        headers: sriRequest.headers,\n                      });\n                    } catch (err) {\n                      throw new SriError({\n                        status: 400,\n                        errors: [\n                          {\n                            code: \"error.initialising.busboy\",\n                            msg: `Error during initialisation of busboy: ${err}`,\n                          },\n                        ],\n                      });\n                    }\n                  }\n\n                  if (cr.beforeStreamingHandler !== undefined) {\n                    try {\n                      const result = await cr.beforeStreamingHandler(\n                        tx,\n                        sriRequest,\n                        customMapping,\n                        global.sriInternalUtils as TSriInternalUtils,\n                      );\n                      if (result !== undefined) {\n                        const { status, headers } = result;\n                        headers.forEach(([k, v]) => {\n                          if (sriRequest.setHeader) {\n                            sriRequest.setHeader(k, v);\n                          }\n                        });\n                        if (sriRequest.setStatus) {\n                          sriRequest.setStatus(status);\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        err instanceof SriError ||\n                        err?.__proto__?.constructor?.name === \"SriError\"\n                      ) {\n                        throw err;\n                      } else {\n                        throw new SriError({ status: 500, errors: [`${util.format(err)}`] });\n                      }\n                    }\n                  }\n\n                  let keepAliveTimer: NodeJS.Timer | null = null;\n                  let stream;\n                  const streamEndEmitter = new EventEmitter();\n                  const streamDonePromise = pEvent(streamEndEmitter, \"done\");\n\n                  if (cr.binaryStream) {\n                    stream = sriRequest.outStream;\n                  } else {\n                    if (sriRequest.setHeader) {\n                      sriRequest.setHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n                    }\n                    stream = createReadableStream(true);\n                    const JsonStream = new JsonStreamStringify(stream);\n                    JsonStream.pipe(sriRequest.outStream);\n                    // after an upgrade of JsonStreamStringify, we seem to have to call this\n                    // to make sure the headers will be sent already (even if nothing is\n                    // written to the stream yet)\n                    sriRequest.outStream.write(\"\");\n\n                    keepAliveTimer = setInterval(() => {\n                      sriRequest.outStream.write(\" \");\n                      // flush outstream, otherwise an intermediate layer such as gzip compression\n                      // might keep the keep-alive write in buffer and break the keep-alive mechanism\n                      // A cast to 'any' is needed to make typescript accept this; 'flush' is defined\n                      // and added to ServerResponse by the 'compression' middleware:\n                      // http://expressjs.com/en/resources/middleware/compression.html\n                      if (sriRequest.outStream instanceof ServerResponse) {\n                        (sriRequest.outStream as any).flush();\n                      }\n                    }, sriConfig.streamingKeepAliveTimeoutMillis || 20000);\n                  }\n\n                  sriRequest.outStream.on(\"close\", () => streamEndEmitter.emit(\"done\"));\n\n                  const streamingHandlerPromise = streamingHandler(\n                    tx,\n                    sriRequest,\n                    stream,\n                    global.sriInternalUtils as TSriInternalUtils,\n                  );\n\n                  // Wait till busboy handler are in place (can be done in\n                  // beforeStreamingHandler or streamingHandler) before piping request\n                  // to busBoy (otherwise events might get lost).\n                  if (cr.busBoy && sriRequest.busBoy) {\n                    sriRequest.inStream.pipe(sriRequest.busBoy);\n                  }\n\n                  try {\n                    await streamingHandlerPromise;\n                  } finally {\n                    if (keepAliveTimer !== null) {\n                      clearInterval(keepAliveTimer);\n                    }\n                  }\n\n                  if (cr.binaryStream) {\n                    stream.end();\n                  } else {\n                    stream.push(null);\n                  }\n\n                  // wait until stream is ended\n                  await streamDonePromise;\n\n                  return { status: 200 };\n                },\n                config: sriConfig,\n                mapping: customMapping,\n                streaming: true,\n                readOnly: method.toUpperCase() === \"GET\" ? true : !!cr.readOnly,\n                isBatch: false,\n              });\n            } else if (cr.handler !== undefined) {\n              const { handler } = cr;\n              acc.push({\n                route: mapping.type + cr.routePostfix,\n                verb: method.toUpperCase() as THttpMethod,\n                func: async (phaseSyncer, tx, sriRequest: TSriRequest, _mapping) => {\n                  await phaseSyncer.phase();\n                  await phaseSyncer.phase();\n                  await phaseSyncer.phase();\n                  if (cr.beforeHandler !== undefined) {\n                    await cr.beforeHandler(\n                      tx,\n                      sriRequest,\n                      customMapping,\n                      global.sriInternalUtils as TSriInternalUtils,\n                    );\n                  }\n                  await phaseSyncer.phase();\n                  const result = await handler(\n                    tx,\n                    sriRequest,\n                    customMapping,\n                    global.sriInternalUtils as TSriInternalUtils,\n                  );\n                  await phaseSyncer.phase();\n                  await phaseSyncer.phase();\n                  if (cr.afterHandler !== undefined) {\n                    await cr.afterHandler(\n                      tx,\n                      sriRequest,\n                      customMapping,\n                      result,\n                      global.sriInternalUtils as TSriInternalUtils,\n                    );\n                  }\n                  await phaseSyncer.phase();\n                  return result;\n                },\n                config: sriConfig,\n                mapping: customMapping,\n                streaming: false,\n                readOnly: method.toUpperCase() === \"GET\" ? true : !!cr.readOnly,\n                isBatch: false,\n              });\n            } else {\n              throw new Error(\"No handlers defined\");\n            }\n          });\n        });\n\n        acc.push(...batchRoutes);\n\n        if (!mapping.onlyCustom) {\n          acc.push(...crudRoutes);\n        }\n\n        return acc;\n      },\n      [] as Array<TBatchHandlerRecord>,\n    );\n\n    /**\n     * Sometimes one wants to do sri4node operations on its own API, but within the state\n     * of the current transaction. Internal requests can be used for this purpose.\n     * You provide similar input as a http request in a javascript object with the\n     * database transaction to execute it on. The internal calls follow the same code path\n     * as http requests (inclusive plugins like for example security checks or version tracking).\n     *\n     * @param internalReq\n     * @returns\n     */\n    const internalSriRequest = async (\n      internalReq: Omit<TInternalSriRequest, \"protocol\" | \"serverTiming\">,\n    ): Promise<TSriResult> => {\n      const match = batch.matchHref(internalReq.href, internalReq.verb);\n\n      const sriRequest = generateSriRequest(\n        undefined,\n        undefined,\n        undefined,\n        match,\n        undefined,\n        undefined,\n        internalReq,\n      );\n\n      await applyHooks(\n        \"transform internal sriRequest\",\n        match.handler.config.transformInternalRequest || [],\n        (f) => f(internalReq.dbT, sriRequest, internalReq.parentSriRequest),\n        sriRequest,\n      );\n\n      const result = await handleRequest(sriRequest, match.handler.func, match.handler.mapping);\n      // we do a JSON stringify/parse cycle because certain fields like Date fields are expected\n      // in string format instead of Date objects\n      return JSON.parse(JSON.stringify(result));\n    };\n\n    global.sri4node_internal_interface = internalSriRequest;\n\n    // so we can add it to every sriRequest via expressRequest.app.get('sriInternalRequest')\n    const sriInternalUtils: TSriInternalUtils = {\n      internalSriRequest,\n    };\n    // we don't like passing this around via the global object (we also lose the typing)\n    // but for now we'll stick with it because there are plenty of other cases where the global\n    // has been used\n    // so where we want to pass this object to a hook or handler function we'll need to use\n    //  global.sriInternalUtils as TSriInternalUtils\n    global.sriInternalUtils = sriInternalUtils;\n\n    /** THIS WILL BE THE RETURN VALUE !!! */\n    const sriServerInstance = {\n      pgp,\n      db,\n      app,\n      // informationSchema: currentInformationSchema, // maybe later\n\n      close: async () => {\n        // we don't install plugins with the same uuid twice, so we also don't close them twice!\n        if (Array.isArray(sriConfig.plugins)) {\n          const alreadyClosed = new Set<string>();\n          await pMap(\n            sriConfig.plugins,\n            async (plugin) => {\n              if (plugin.close) {\n                try {\n                  if (!plugin.uuid || !alreadyClosed.has(plugin.uuid)) {\n                    await plugin.close(global.sri4node_configuration, dbW);\n                  }\n                } catch (err) {\n                  console.error(`Error closing plugin ${plugin.uuid}: ${err}`);\n                } finally {\n                  if (plugin.uuid) {\n                    alreadyClosed.add(plugin.uuid);\n                  }\n                }\n              }\n            },\n            { concurrency: 1 },\n          );\n        }\n\n        db && (await db.$pool.end());\n      },\n    };\n\n    // register individual routes in express\n    batchHandlerMap.forEach(\n      ({ route, verb, func, config, mapping, streaming, readOnly, isBatch }) => {\n        // Also use phaseSyncedSettle like in batch to use same shared code,\n        // has no direct added value in case of single request.\n        debug(\"general\", `registering route ${route} - ${verb} - ${readOnly}`);\n        app[verb.toLowerCase()](\n          route,\n          emt.instrument(\n            expressWrapper(dbR, dbW, func, config, mapping, streaming, isBatch, readOnly),\n            \"express-wrapper\",\n          ),\n        );\n      },\n    );\n\n    // transform map with 'routes' to be usable in batch (translate and group by verb)\n    // TODO: do not modify the sriConfig provided to us by the user!\n    sriConfig.batchHandlerMap = _.groupBy(\n      batchHandlerMap.map(\n        ({ route, verb, func, config, mapping, streaming, readOnly, isBatch }) => ({\n          route: new Route(route),\n          verb,\n          func,\n          config,\n          mapping,\n          streaming,\n          readOnly,\n          isBatch,\n        }),\n      ),\n      (e) => e.verb,\n    );\n\n    app.get(\"/\", (_req: Request, res: Response) => res.redirect(\"/resources\"));\n\n    console.log(\n      \"___________________________ SRI4NODE INITIALIZATION DONE _____________________________\",\n    );\n    return sriServerInstance;\n  } catch (err) {\n    console.error(\n      \"___________________________ SRI4NODE INITIALIZATION ERROR _____________________________\",\n    );\n    console.error(err);\n    process.exit(1);\n  }\n}\n\n/* express.js application, configuration for roa4node */\n// export = // for typescript\nexport {\n  configure,\n  debugAnyChannelAllowed as debug, // debugAnyChannelAllowed(ch, msg) => debug(null, ch, msg)\n  error,\n  queryUtils,\n  mapUtils,\n  schemaUtils,\n  utils,\n};\n\nexport * from \"./js/typeDefinitions\";\n", "/* Internal utilities for sri4node */\nimport { URL } from \"url\";\nimport Express from \"express\";\nimport { IInitOptions } from \"pg-promise\";\nimport pgPromise from \"pg-promise\";\nimport monitor from \"pg-monitor\";\nimport { Application, Request, Response } from \"express\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { Readable } from \"stream\";\n// import { DEFAULT_MAX_VERSION } from 'tls';\n// import { generateFlatQueryStringParserGrammar } from './url_parsing/flat_url_parser';\n\nimport _ from \"lodash\";\n\nimport * as flatUrlParser from \"./url_parsing/flat_url_parser\";\nimport * as schemaUtils from \"./schemaUtils\";\nimport {\n  TResourceDefinition,\n  TSriConfig,\n  TSriRequest,\n  IExtendedDatabaseConnectionParameters,\n  TDebugChannel,\n  TInternalSriRequest,\n  THttpMethod,\n  TDebugLogFunction,\n  TErrorLogFunction,\n  SriError,\n  TLogDebug,\n  TInformationSchema,\n} from \"./typeDefinitions\";\nimport { generateNonFlatQueryStringParser } from \"./url_parsing/non_flat_url_parser\";\nimport url from \"url\";\nimport EventEmitter from \"events\";\nimport pEvent from \"p-event\";\nimport path from \"path\";\nimport stream from \"stream\";\nimport peggy from \"peggy\";\nimport httpContext from \"express-http-context\";\nimport * as emt from \"./express-middleware-timer\";\nimport { JSONSchema4 } from \"json-schema\";\nimport { IClient } from \"pg-promise/typescript/pg-subset\";\n\nlet pgp: pgPromise.IMain; // will be initialized at pgConnect\n\nconst logBuffer: { [k: string]: string[] } = {};\n\n/**\n * Base class for every error that is being thrown throughout the lifetime of an sri request\n */\n\n/**\n * process.hrtime() method can be used to measure execution time, but returns an array\n *\n * @param {Array<Integer>} hrtime tuple [seconds, nanoseconds]\n * @returns the input translated to milliseconds\n */\nfunction hrtimeToMilliseconds([seconds, nanoseconds]: [number, number]): number {\n  return seconds * 1000 + nanoseconds / 1000000;\n}\n\nconst isLogChannelEnabled = (channel: TDebugChannel | string): boolean => {\n  return (\n    global.sri4node_configuration === undefined ||\n    (global.sri4node_configuration.logdebug &&\n      (global.sri4node_configuration.logdebug.channels === \"all\" ||\n        global.sri4node_configuration.logdebug.channels.has(channel)))\n  );\n};\n\n/**\n * Logging output: each debug call is 'tagged' with a 'channel' (first parameter).\n * If the 'channel' of a debug call is in the selected set of debug channels in the\n * sri4node configuration (logdebug.channels), output (second parameter) is logged.\n * Otherwise output is discared.\n * (see https://github.com/katholiek-onderwijs-vlaanderen/sri4node#logging for more\n * information).\n *\n * This function is available for sri4node plugins and applications using sri4, which\n * are allowed to use logchannels of their own.\n *\n * @param channel one of the predefined log channels\n * @param output string or string generating function to log\n */\nconst debugAnyChannelAllowed: TDebugLogFunction = (channel, output) => {\n  if (isLogChannelEnabled(channel)) {\n    const reqId: string = httpContext.get(\"reqId\");\n    const msg = `${new Date().toISOString()} ${\n      reqId ? `[reqId:${reqId}]` : \"\"\n    }[${channel}] ${typeof output === \"function\" ? output() : output}`;\n    if (reqId !== undefined) {\n      if (global.sri4node_configuration.logdebug.statuses !== undefined) {\n        if (!logBuffer[reqId]) {\n          logBuffer[reqId] = [msg];\n        } else {\n          logBuffer[reqId].push(msg);\n        }\n      } else {\n        console.log(msg);\n      }\n    } else {\n      console.log(msg);\n    }\n  }\n};\n\n/**\n * Logging output: each debug call is 'tagged' with a 'channel' (first parameter).\n * If the 'channel' of a debug call is in the selected set of debug channels in the\n * sri4node configuration (logdebug.channels), output (second parameter) is logged.\n * Otherwise output is discared.\n * (see https://github.com/katholiek-onderwijs-vlaanderen/sri4node#logging for more\n * information).\n *\n * This function is for internal (sri4node) usage where logchannels are restricted\n * to pre-defined debug channels. Restricting channels avoids errors and will make\n * it possible for vscode to do auto-completion.\n * @param channel one of the predefined log channels\n * @param output string or string generating function to log\n */\nconst debug = (channel: TDebugChannel, output: (() => string) | string) => {\n  debugAnyChannelAllowed(channel, output);\n};\n\nconst error: TErrorLogFunction = function (...args) {\n  const reqId = httpContext.get(\"reqId\");\n  if (reqId) {\n    console.error(`[reqId:${reqId}]`, ...args);\n  } else {\n    console.error(...args);\n  }\n};\n\n/**\n * Given the generated grammar, generate and return the parser\n *\n * @param {*} grammar\n * @returns\n */\nfunction generateQueryStringParser(\n  grammar: string,\n  allowedStartRules: string[] | undefined = undefined,\n): any {\n  const pegConf = allowedStartRules\n    ? {\n        // Array of rules the parser will be allowed to start parsing from (default: the first rule in the grammar).\n        allowedStartRules,\n      }\n    : {};\n  return peggy.generate(grammar, pegConf);\n}\n\n/**\n *\n * @param {pegSyntaxError} e\n * @param {String} input\n * @returns a string\n */\nfunction pegSyntaxErrorToErrorMessage(e: { [prop: string]: any }, input = \"\") {\n  if (e.location) {\n    const searchParams = input;\n\n    // const markedPart = ' >> ' + searchParams.slice(e.location.start.offset, e.location.end.offset) + ' << ' +\n\n    // Since we can expect to be in a UTF-8 environment we can use some UTF-8 niftyness\n    //   https://www.fileformat.info/info/unicode/block/combining_diacritical_marks/index.htm\n    //   a character that modifies the previous one (like adding underline or something)\n    //   try them all with for (let i = 0x0300; i < 0x036F; i ++) { console.log( \"hello\".split('').map(c => `${c}${String.fromCharCode(i)}`).join('') + ' = 0x' + i.toString(16)); }\n\n    const markedPart = searchParams\n      .slice(e.location.start.offset, e.location.end.offset)\n      .split(\"\")\n      .map((c) => `${c}\\u0333`) // \\u0330 (tilde below) \\u0332 (underline) \\u0333 (double underline) \\u0347 (also double underline)\n      .join(\"\");\n\n    const markedErrorString = (\n      searchParams.slice(0, e.location.start.offset) +\n      markedPart +\n      searchParams.slice(e.location.end.offset)\n    )\n      .split(\"\\n\")\n      .map((l, lineNr) => `${`0000${lineNr}`.slice(-3)} ${l}`)\n      .filter(\n        (_l, lineNr) => lineNr > e.location.start.line - 3 && lineNr < e.location.start.line + 3,\n      )\n      .join(\"\\n\");\n\n    return `${e.message} at line ${e.location.start.line}, column ${e.location.start.column}\\n\\n${markedErrorString}`;\n  }\n  return e.toString(); // not recognized as pegSyntaxError\n}\n\n/**\n * If the url object has been parsed, it's easy to check if some filters that\n * have implicit values, are missing from the 'normalized' url.\n *\n * This function just generates a list of missing properties, so they can easily\n * be added to an existing parsed url object.\n *\n * Examples: _LIMIT=30&_EXPANSION=FULL&$$meta.deleted_IN=false\n * (but in parseTree format = an array of objects)\n *\n * @param {UrlQueryParamsParseTree} parseTree\n * @param {} mapping\n * @returns {UrlQueryParamsParseTree}\n */\nfunction generateMissingDefaultsForParseTree(parseTree: any, mapping: TResourceDefinition) {\n  const DEFAULT_LIMIT = 30; // if not configured in mapping file\n  const DEFAULT_MAX_LIMIT = 500; // if not configured in mapping file\n  const DEFAULT_EXPANSION = \"FULL\";\n  const DEFAULT_INCLUDECOUNT = false;\n  const DEFAULT_LIST_ORDER_BY = [\"$$meta.created\", \"key\"];\n  const DEFAULT_LIST_ORDER_DESCENDING = false;\n\n  const retVal: any[] = [];\n\n  if (!parseTree.find((f: any) => f.operator === \"LIST_LIMIT\")) {\n    retVal.push({\n      operator: \"LIST_LIMIT\",\n      value: Math.min(mapping.defaultlimit || DEFAULT_LIMIT, mapping.maxlimit || DEFAULT_MAX_LIMIT),\n    });\n  }\n  if (!parseTree.find((f: any) => f.operator === \"EXPANSION\")) {\n    retVal.push({\n      operator: \"EXPANSION\",\n      value: mapping.defaultexpansion || DEFAULT_EXPANSION,\n    });\n  }\n  if (!parseTree.find((f: any) => f.operator === \"LIST_META_INCLUDE_COUNT\")) {\n    retVal.push({\n      operator: \"LIST_META_INCLUDE_COUNT\",\n      value: DEFAULT_INCLUDECOUNT,\n    });\n  }\n  if (!parseTree.find((f: any) => f.property === \"$$meta.deleted\" && f.operator === \"IN\")) {\n    retVal.push({\n      property: \"$$meta.deleted\",\n      operator: \"IN\",\n      value: [false],\n      caseInsensitive: true,\n      invertOperator: false,\n    });\n  }\n  if (!parseTree.find((f: any) => f.operator === \"LIST_ORDER_BY\")) {\n    retVal.push({\n      operator: \"LIST_ORDER_BY\",\n      value: DEFAULT_LIST_ORDER_BY,\n    });\n  }\n  if (!parseTree.find((f: any) => f.operator === \"LIST_ORDER_DESCENDING\")) {\n    retVal.push({\n      operator: \"LIST_ORDER_DESCENDING\",\n      value: DEFAULT_LIST_ORDER_DESCENDING,\n    });\n  }\n  return retVal;\n}\n\n/**\n * Will modify the parameter array into a sorted param array.\n *\n * @param {*} parseTree\n * @returns the in-place sorted parseTree\n */\nfunction sortUrlQueryParamParseTree(parseTree: any[]) {\n  const compareProperties = (a: any, b: any, properties: string[]) =>\n    properties.reduce((acc, cur) => {\n      if (acc !== 0) return acc;\n      if (a[cur] === b[cur]) return acc;\n      if ((a[cur] || \"\") > (b[cur] || \"\")) {\n        // console.log(a[cur], '>', b[cur], ' => return 1', a, b);\n        return 1;\n      }\n      // console.log(a[cur], '<', b[cur], ' => return -1', a, b);\n      return -1;\n    }, 0);\n\n  return parseTree.sort((a, b) =>\n    compareProperties(a, b, [\"property\", \"operator\", \"invertOperator\", \"caseInsensitive\", \"value\"]),\n  );\n}\n\nconst hrefToParsedObjectFactoryThis: any = {};\n\n/**\n * This factory function will return a function that can parse an href\n * into an object containing the parseTree, and a normalizedUrl.\n *\n * This function should change the given href into an object\n * - that contains the \"parse tree\" (a translation of the url into a data structure\n *   that expresses what it does)\n * - [MAYBE] that also contains a translated URL object that should be easier to handle\n *   later on in all the processes because all the defaults have been explicitly\n *   applied, and all the 'stupid' url prameters have been translated into parameters\n *   more closely aligned with what sri4node and sri-query spec should support by default.\n *\n * Examples:\n *  * /persons would become /persons?$$meta.deleted_IN=false&_LIMIT=30\n *  * /persons?hrefs=1,2,3 would become\n *    /persons?$$meta.deleted_IN=false&$$meta.permalink_IN=1,2,3&_LIMIT=30\n *  * /persons?$$meta.deleted=any would become /persons?$$meta.deleted_IN=false,true&_LIMIT=30\n *  * and maybe also sort the query params + for 'lists' (href_IN=B,C,A) we could even sort the list itself\n *    tag_IN=B,C,A => tag_IN=A,B,C\n *  * limit=* and expand is NONE => _EXPAND=NONE (and no limit clause as we want all the results)\n *  * froms => from.href_IN\n *  * fromTypes => (from.href).type_IN ??? can we invent a proper default for this?\n *  * orderBy is by default on key I think (needed to make keyOffset work properly)\n *  * we could imagine that booleanPropGreater=false and booleanPropGreaterOrEqual=false could be\n *    rewritten to booleanProp_IN=true (and a lot of other variations)\n *  * should omit be rewritten to _OMIT, or to a positive selector like _INCLUDEFIELDS=...\n *\n * This way, there is no other place in the code where we should take into account\n * default values for certain parameters (like limit & $$meta.deleted).\n * Also: everything is translated into a format that we'd like to support in the futere\n * where all the 'operators' are visually more clearly separated from the property names.\n * key_IN is easier to understand than keys or keyIn\n * birthDate_GT is easier to understand than birthDateGreater\n *\n * This also makes things easier to optimize (for example sri4node security plugin would become\n * easier with less exceptions, especially for $$meta.deleted=any) because after nomalisation\n * /persons and /persons?$$meta.deleted=false will be the same.\n *\n * But the good thing is that all the 'old' stuff is still supported, so we stay backwards\n * compatible, while allowing the API's to evolve into a more mature way of querying.\n * Also, by prefixing all 'non-filtering' query params with an _ like _LIMIT or _OFFSET,\n * it is more clear that these are no filters related to a specific property like the other ones.\n *\n * What to do with things like rootWithContextContains?\n * Do we think they should start with an underscore (because root is no property)?\n * We could forbid the user to configure filters with arbitrary names and say:\n *  * your filter has to start with an underscore\n *  * OR it has to start with a property name, followed by an underscore and then some capitals\n *    to help 'custom filters' to also follow the '<property>_<operator>' spec.\n *\n * It could be that we'll provide more options in the mapping section of sri4node config\n * to control aliases and default values maybe (if they don't exist already)\n *\n * With rewriting, can we support easy-to-use params for everything with a start- and an enddate?\n * like _ACTIVE=true&_DATE=2021-09-07\n * can/should this be translated in (default date would be 'now') startDate_LTE=<now>&endDate_GTE=now\n * (in the case of dates we mstly assume that null means an open-ended period, so it's still running)\n * so endDate_GTEN (greater than or equal to or null)\n * (normalizing it to ?(startDate_GTE=...;startDate_ISNULL) is no option I guess)\n *\n * Why I use the term 'normalized url':\n * https://en.wikipedia.org/wiki/Canonical_form#Computing\n * \"In computing, the reduction of data to any kind of canonical form is commonly called data normalization.\"\n * also check: https://en.wikipedia.org/wiki/Canonical_form\n *\n * @param {object} sri4nodeConfigObject the sri4node config (and mainly the mapping section)\n *                                      holds most info we need to know\n * @param {boolean} flat if true, will generate a 'flat' parseTree, otherwise a non-flat parseTree\n *                       (filters grouped per type) will be generated\n */\nfunction hrefToParsedObjectFactory(\n  sriConfig: TSriConfig = { resources: [], databaseConnectionParameters: {} },\n  flat = false,\n) {\n  const parseQueryStringPartByPart = \"PART_BY_PART\" as \"NORMAL\" | \"PART_BY_PART\" | \"VALUES_APART\"; // 'PARTBYPART';\n\n  // assuming sriConfig will always be the same, we optimize with\n  // some simple memoization of a few calculated helper data structures\n  if (hrefToParsedObjectFactoryThis.sriConfig !== sriConfig) {\n    try {\n      hrefToParsedObjectFactoryThis.sriConfig = sriConfig;\n      hrefToParsedObjectFactoryThis.mappingByPathMap = Object.fromEntries(\n        sriConfig.resources.map((r) => [r.type, r]),\n      );\n      hrefToParsedObjectFactoryThis.flattenedJsonSchemaByPathMap = Object.fromEntries(\n        sriConfig.resources.map((r) => [r.type, schemaUtils.flattenJsonSchema(r.schema)]),\n      );\n      hrefToParsedObjectFactoryThis.flatQueryStringParserByPathMap = Object.fromEntries(\n        sriConfig.resources.map((r) => {\n          const grammar = flatUrlParser.generateFlatQueryStringParserGrammar(\n            hrefToParsedObjectFactoryThis.flattenedJsonSchemaByPathMap[r.type],\n          );\n          try {\n            // console.log(`${r.type} GRAMMAR`);\n            // console.log(`=================`);\n            // console.log(grammar);\n            switch (parseQueryStringPartByPart) {\n              case \"NORMAL\":\n                return [r.type, generateQueryStringParser(grammar)];\n              case \"PART_BY_PART\":\n                return [r.type, generateQueryStringParser(grammar, [\"QueryStringPart\"])];\n              case \"VALUES_APART\":\n                return [\n                  r.type,\n                  {\n                    filterParser: generateQueryStringParser(grammar, [\"FilterName\"]),\n                    singleValueParser: generateQueryStringParser(grammar, [\"SingleValue\"]),\n                    multiValueParser: generateQueryStringParser(grammar, [\"MultiValue\"]),\n                  },\n                ];\n              default:\n                throw new Error(\n                  `parseQueryStringPartByPart has an unsupported value (${parseQueryStringPartByPart})`,\n                );\n            }\n          } catch (e) {\n            console.log(pegSyntaxErrorToErrorMessage(e, grammar));\n            throw e;\n          }\n        }),\n      );\n      hrefToParsedObjectFactoryThis.nonFlatQueryStringParserByPathMap = Object.fromEntries(\n        sriConfig.resources.map((r) => {\n          // const grammar = generateNonFlatQueryStringParserGrammar(hrefToParsedObjectFactoryThis.flattenedJsonSchemaByPathMap[r.type], sriConfig);\n          try {\n            // return [r.type, generateQueryStringParser(grammar)];\n            // sriConfigDefaults?:{ defaultlimit: number, [k:string]: any }, sriConfigResourceDefinition?:ResourceDefinition, allowedStartRules\n            return [r.type, generateNonFlatQueryStringParser(sriConfig, r)];\n          } catch (e) {\n            // console.log(pegSyntaxErrorToErrorMessage(e, grammar));\n            console.log(pegSyntaxErrorToErrorMessage(e));\n            throw e;\n          }\n        }),\n      );\n    } catch (e) {\n      delete hrefToParsedObjectFactoryThis.sriConfig;\n      console.log(\"Uh oh, something went wrong while setting up flattenedJsonSchema and parsers\");\n      console.log(pegSyntaxErrorToErrorMessage(e));\n      throw e;\n    }\n  }\n\n  if (flat) {\n    return function hrefToFlatParsedObject(href: string) {\n      const urlToWorkOn = new URL(`https://domain.com${href}`);\n      const searchParamsToWorkOn = urlToWorkOn.searchParams;\n\n      const flatQueryStringParser =\n        hrefToParsedObjectFactoryThis.flatQueryStringParserByPathMap[urlToWorkOn.pathname];\n      try {\n        const parseTree = {\n          NORMAL: () => flatQueryStringParser.parse(searchParamsToWorkOn.toString()),\n          PART_BY_PART: () =>\n            [...searchParamsToWorkOn.entries()].map(([k, v]) =>\n              flatQueryStringParser.parse(`${encodeURIComponent(k)}=${encodeURIComponent(v)}`),\n            ),\n          // TODO !!!\n          VALUES_APART: () =>\n            [...searchParamsToWorkOn.entries()].map(([k, v]) => {\n              const { expectedValue, ...parsedFilter } = flatQueryStringParser.filterParser.parse(\n                encodeURIComponent(k),\n              );\n              // now that we know if the expected input is an array or not, we can parse it as such\n              const value = flatQueryStringParser.valueParser.parse(encodeURIComponent(v), [\n                expectedValue.inputShouldBeArray ? \"MultiValue\" : \"SingleValue\",\n              ]);\n              return { ...parsedFilter, value };\n            }),\n        }[parseQueryStringPartByPart]();\n\n        const missingDefaultsParseTree = generateMissingDefaultsForParseTree(\n          parseTree,\n          hrefToParsedObjectFactoryThis.mappingByPathMap[urlToWorkOn.pathname],\n        );\n\n        // validateQueryParam(\n        //   '_LIMIT',\n        //   limit => limit < (mapping.maxlimit || MAX_LIMIT),\n        //   limit => `Limit of ${limit} is higher than configured max limit of ${mapping.maxlimit}`\n        // );\n\n        // validateQueryParam(\n        //   '_EXPANSION',\n        //   expansion => ['NONE','FULL','SUMMARY'].includes(expansion),\n        //   expansion => `_EXPAND=${expansion} is not one of 'NONE','FULL','SUMMARY'`,\n        // );\n\n        const normalizedParseTree = sortUrlQueryParamParseTree([\n          ...parseTree,\n          ...missingDefaultsParseTree,\n        ])\n          // remove 'expectedValue' to make sure tests still work\n          .map((x) => {\n            const { expectedValue: _expectedValue, ...rest } = x;\n            return rest;\n          });\n\n        const parsedUrlObject = {\n          parseTree: normalizedParseTree,\n          // TODO normalizedUrl: urlQueryStringParseTreeToNormalizedURLSearchParams(parseTree),\n        };\n\n        return parsedUrlObject;\n      } catch (e) {\n        // console.log('href parse error', e.message, e);\n        console.log(pegSyntaxErrorToErrorMessage(e, searchParamsToWorkOn.toString()));\n        throw e;\n      }\n    };\n  }\n\n  return function hrefToNonFlatParsedObject(href: string) {\n    const urlToWorkOn = new URL(href, \"https://domain.com\");\n    const searchParamsToWorkOn = urlToWorkOn.searchParams;\n\n    const nonFlatQueryStringParser =\n      hrefToParsedObjectFactoryThis.nonFlatQueryStringParserByPathMap[urlToWorkOn.pathname];\n    try {\n      const parseTree = nonFlatQueryStringParser.parse(searchParamsToWorkOn.toString());\n\n      // validateQueryParam(\n      //   '_LIMIT',\n      //   limit => limit < (mapping.maxlimit || MAX_LIMIT),\n      //   limit => `Limit of ${limit} is higher than configured max limit of ${mapping.maxlimit}`\n      // );\n\n      // validateQueryParam(\n      //   '_EXPANSION',\n      //   expansion => ['NONE','FULL','SUMMARY'].includes(expansion),\n      //   expansion => `_EXPAND=${expansion} is not one of 'NONE','FULL','SUMMARY'`,\n      // );\n\n      const parsedUrlObject = {\n        parseTree,\n        // TODO normalizedUrl: urlQueryStringParseTreeToNormalizedURLSearchParams(parseTree),\n      };\n\n      return parsedUrlObject;\n    } catch (e) {\n      // console.log('href parse error', e.message, e);\n      console.log(pegSyntaxErrorToErrorMessage(e, searchParamsToWorkOn.toString()));\n      throw e;\n    }\n  };\n}\n\n/**\n * @param sriRequest\n * @param recurse if set, return top sriRequest\n * @returns the parent sri request if it exists (otherwise the same request is returned!)\n */\nfunction getParentSriRequest(sriRequest: TSriRequest, recurse = false) {\n  return sriRequest.parentSriRequest\n    ? recurse\n      ? getParentSriRequest(sriRequest.parentSriRequest)\n      : sriRequest.parentSriRequest\n    : sriRequest;\n}\n\nfunction installEMT(app: Application) {\n  app.use(\n    emt.init((_req: Express.Request, _res: Express.Response) => {\n      // Do nothing (empty function provided to avoid stdout logging for each request)\n    }),\n  );\n  return emt;\n}\n\nfunction setServerTimingHdr(sriRequest: TSriRequest, property, value) {\n  const parentSriRequest = getParentSriRequest(sriRequest);\n  if ((parentSriRequest as TSriRequest).serverTiming === undefined) {\n    parentSriRequest.serverTiming = {};\n  }\n  if (parentSriRequest.serverTiming[property] === undefined) {\n    parentSriRequest.serverTiming[property] = value;\n  } else {\n    parentSriRequest.serverTiming[property] += value;\n  }\n}\n\nfunction emtReportToServerTiming(req: Request, res: Response, sriRequest: TSriRequest) {\n  try {\n    const report = emt.calculate(req, res);\n    Object.keys(report.timers).forEach((timer) => {\n      const duration = report.timers[timer].took;\n      if (duration > 0 && timer !== \"express-wrapper\") {\n        setServerTimingHdr(sriRequest, timer, duration);\n      }\n    });\n  } catch (err) {\n    error(\"[emtReportToServerTiming] it does not work anymore but why???\", err);\n    throw err;\n  }\n}\n\nfunction createDebugLogConfigObject(logdebug: TLogDebug | boolean): TLogDebug {\n  if (logdebug === true) {\n    // for backwards compability\n    console.warn(\n      \"\\n\\n\\n------------------------------------------------------------------------------------------------------------------\\n\" +\n        \"The logdebug parameter has changed format. Before, debug logging was enabled by specifying the boolean value 'true'.\\n\" +\n        \"Now you need to provide a string with all the logchannels for which you want to receive debug logging (see the\\n\" +\n        'sri4node documentation for more details ). For now \"general,trace,requests,server-timing\" is set as sensible default, \\n' +\n        \"but please specify the preferred channels for which logging is requested.\\n\" +\n        \"------------------------------------------------------------------------------------------------------------------\\n\\n\\n\",\n    );\n    return {\n      channels: new Set([\"general\", \"trace\", \"requests\", \"server-timing\"]),\n    };\n  }\n  if (logdebug === false) {\n    return { channels: new Set() };\n  }\n  const tempLogDebug: TLogDebug = {\n    channels: logdebug.channels === \"all\" ? \"all\" : new Set(logdebug.channels),\n  };\n  if (logdebug.statuses) {\n    tempLogDebug.statuses = new Set(logdebug.statuses);\n  }\n  return tempLogDebug;\n}\n\nfunction handleRequestDebugLog(status: number) {\n  const reqId = httpContext.get(\"reqId\");\n  if (global.sri4node_configuration.logdebug.statuses.has(status)) {\n    logBuffer[reqId].forEach((e) => console.log(e));\n  }\n  delete logBuffer[reqId];\n}\n\nfunction urlToTypeAndKey(urlToParse: string) {\n  if (typeof urlToParse !== \"string\") {\n    throw new Error(`urlToTypeAndKey requires a string argument instead of ${urlToParse}`);\n  }\n  const parsedUrl = url.parse(urlToParse);\n  const pathName = parsedUrl.pathname?.replace(/\\/$/, \"\");\n  const parts = pathName?.split(\"/\");\n  const type = _.initial(parts).join(\"/\");\n  const key = _.last(parts);\n\n  return { type, key };\n}\n\n// 2 functions below are COPIED FROM beveiliging_nodejs --> TODO: remove them there and use the version here\n\n/**\n * Unfortunatly we seems to have generated invalid UUIDs in the past.\n * (we even have uuids with invalid version like /organisations/efeb7119-60e4-8bd7-e040-fd0a059a2c55)\n * Therefore we cannot use a strict uuid checker like the npm module 'uuid-validate' but do we have to be less strict.\n *\n * @param uuid\n * @returns true or false\n */\nfunction isUuid(uuid: string): boolean {\n  return uuid.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/) != null;\n}\n\n/**\n * @deprecated\n *\n * It is being used nowhere (maybe in some plugin?)\n *\n * Translates an href into an object containing base, id, query, comment\n * example: /things/<guid>?expand=subthings#somehash will become\n * { base: '/things', id: '<guid>', query: 'expand=subthing', comment: 'somehash' }\n * @param u: an href\n * @returns the parsed url\n */\nfunction parseResource(u: string) {\n  if (!u) {\n    return null;\n  }\n\n  const [u1, comment] = u.includes(\"#\") ? u.split(\"#/\") : [u, null];\n\n  if (u1.includes(\"?\")) {\n    const splittedUrl = u1.split(\"?\");\n    return {\n      base: splittedUrl[0],\n      id: null,\n      query: splittedUrl[1],\n      comment,\n    };\n  }\n  const pp = path.parse(u1);\n  if (isUuid(pp.name)) {\n    return {\n      base: pp.dir,\n      id: pp.name,\n      query: null,\n      comment,\n    };\n  }\n  return {\n    base: `${pp.dir !== \"/\" ? pp.dir : \"\"}/${pp.name}`,\n    id: null,\n    query: null,\n    comment,\n  };\n}\n\nfunction errorAsCode(s: string) {\n  // return any string as code for REST API error object.\n  let ret = s;\n\n  ret = ret.replace(/\".*\"/, \"\");\n\n  ret = ret.toLowerCase().trim();\n  ret = ret.replace(/[^a-z0-9 ]/gim, \"\");\n  ret = ret.replace(/ /gim, \".\");\n\n  return ret;\n}\n\n/**\n * Converts the configuration object for sri4node into an array per resource type\n */\nfunction typeToConfig(config: TResourceDefinition[]) {\n  return config.reduce((acc, c) => {\n    acc[c.type] = c;\n    return acc;\n  }, {});\n}\n\n/**\n * @param type the string used as 'type' in the sriConfig resources\n * @returns the resource definition record from the active sriConfig\n */\nfunction typeToMapping(type: string): TResourceDefinition {\n  return typeToConfig(global.sri4node_configuration.resources)[type];\n}\n\nfunction sqlColumnNames(mapping, summary = false) {\n  const columnNames = summary\n    ? Object.keys(mapping.map).filter(\n        (c) =>\n          !(\n            mapping.map[c].excludeOn !== undefined &&\n            mapping.map[c].excludeOn.toLowerCase() === \"summary\"\n          ),\n      )\n    : Object.keys(mapping.map);\n\n  return `${\n    (columnNames.includes(\"key\") ? \"\" : '\"key\",') + columnNames.map((c) => `\"${c}\"`).join(\",\")\n  }, \"$$meta.deleted\", \"$$meta.created\", \"$$meta.modified\", \"$$meta.version\"`;\n}\n\n/**\n * @param row the database row\n * @param resourceMapping the applicable resource definition from the sriConfig object\n * @returns the json object as returned by the api\n */\nfunction transformRowToObject(row: any, resourceMapping: TResourceDefinition) {\n  const map = resourceMapping.map || {};\n  const element: any = {};\n  element.$$meta = {};\n  Object.keys(map).forEach((key) => {\n    if (map[key].references) {\n      const referencedType = map[key].references;\n      if (row[key] !== null) {\n        element[key] = {\n          href: `${referencedType}/${row[key]}`,\n        };\n      } else {\n        element[key] = null;\n      }\n    } else if (key.startsWith(\"$$meta.\")) {\n      element.$$meta[key.split(\"$$meta.\")[1]] = row[key];\n    } else {\n      element[key] = row[key];\n    }\n\n    map[key]?.columnToField?.forEach((f) => f(key, element));\n  });\n\n  Object.assign(\n    element.$$meta,\n    _.pickBy({\n      // keep only properties with defined non-null value (requires lodash - behaves different as underscores _.pick())\n      deleted: row[\"$$meta.deleted\"],\n      created: row[\"$$meta.created\"],\n      modified: row[\"$$meta.modified\"],\n    }),\n  );\n  element.$$meta.permalink = `${resourceMapping.type}/${row.key}`;\n  element.$$meta.version = row[\"$$meta.version\"];\n\n  return element;\n}\n\n/**\n * Function which verifies wether for all properties specified in the sri4node configuration\n * there exists a column in the database.\n * An improvement might be to also check if the types\n * @param sriConfig sri4node configuration object\n * @returns nothing, throw an error in case something is wrong\n */\n\nfunction checkSriConfigWithDb(sriConfig: TSriConfig, informationSchema: TInformationSchema) {\n  sriConfig.resources.forEach((resourceMapping) => {\n    const map = resourceMapping.map || {};\n    Object.keys(map).forEach((key) => {\n      if (informationSchema[resourceMapping.type][key] === undefined) {\n        const dbFields = Object.keys(informationSchema[resourceMapping.type]).sort();\n        const caseInsensitiveIndex = dbFields\n          .map((c) => c.toLowerCase())\n          .indexOf(key.toLowerCase());\n        if (caseInsensitiveIndex >= 0) {\n          console.error(\n            `\\n[CONFIGURATION PROBLEM] No database column found for property '${key}' as specified in sriConfig of resource '${resourceMapping.type}'. It is probably a case mismatch because we did find a column named '${dbFields[caseInsensitiveIndex]}'instead.`,\n          );\n        } else {\n          console.error(\n            `\\n[CONFIGURATION PROBLEM] No database column found for property '${key}' as specified in sriConfig of resource '${\n              resourceMapping.type\n            }'. All available column names are ${dbFields.join(\", \")}`,\n          );\n        }\n        throw new Error(\"mismatch.between.sri.config.and.database\");\n      }\n    });\n  });\n}\n\n/**\n * @param obj the api object\n * @param resourceMapping the applicable resource definition from the sriConfig object\n * @param isNewResource boolean indicating that the resource doesn't exist yet\n * @returns a row to be saved on the database\n */\nfunction transformObjectToRow(\n  obj: Record<string, any>,\n  resourceMapping: TResourceDefinition,\n  isNewResource: boolean,\n) {\n  const map = resourceMapping.map || {};\n  const row = {};\n  Object.keys(map).forEach((key) => {\n    if (map[key].references && obj[key] !== undefined) {\n      const permalink = obj[key].href;\n      if (!permalink) {\n        throw new SriError({\n          status: 409,\n          errors: [\n            {\n              code: \"no.href.inside.reference\",\n              msg: `No href found inside reference ${key}`,\n            },\n          ],\n        });\n      }\n      const expectedType = map[key].references;\n      const { type: refType, key: refKey } = urlToTypeAndKey(permalink);\n      if (refType === expectedType) {\n        row[key] = refKey;\n      } else {\n        const msg = `Faulty reference detected [${permalink}], detected [${refType}] expected [${expectedType}].`;\n        console.log(msg);\n        throw new SriError({\n          status: 409,\n          errors: [{ code: \"faulty.reference\", msg }],\n        });\n      }\n    } else if (obj[key] !== undefined) {\n      row[key] = obj[key];\n    } else {\n      // explicitly set missing properties to null (https://github.com/katholiek-onderwijs-vlaanderen/sri4node/issues/118)\n      row[key] = null;\n    }\n\n    if (map[key].fieldToColumn) {\n      map[key].fieldToColumn.forEach((f) => f(key, row, isNewResource));\n    }\n\n    const fieldTypeDb =\n      global.sri4node_configuration.informationSchema[resourceMapping.type][key].type;\n    if (fieldTypeDb === \"jsonb\") {\n      if (row[key] !== null) {\n        // do not stringify null, it ends up in the db as 'null'\n        row[key] = JSON.stringify(row[key]);\n      }\n    }\n  });\n\n  return row;\n}\n\n/**\n * Here we initalize the instance of the pgPromise LIBRARY.\n *\n * For some reason, setting the default schema is done on the library level\n * instead of the connection level...\n *\n * @param pgpInitOptions\n * @param extraOptions\n */\nasync function pgInit(\n  pgpInitOptions: IInitOptions = {},\n  extraOptions: {\n    schema?: pgPromise.ValidSchema | ((dc: any) => pgPromise.ValidSchema) | undefined;\n    connectionInitSql?: string;\n    monitor: boolean;\n  },\n) {\n  const pgpInitOptionsUpdated: IInitOptions = {\n    schema: extraOptions.schema,\n    ...pgpInitOptions,\n    connect:\n      extraOptions.connectionInitSql === undefined\n        ? pgpInitOptions.connect\n        : (client, dc, useCount) => {\n            if (useCount === 0) {\n              client.query(extraOptions.connectionInitSql);\n            }\n            if (pgpInitOptions.connect) {\n              pgpInitOptions.connect(client, dc, useCount);\n            }\n          },\n  };\n\n  pgp = pgPromise(pgpInitOptionsUpdated);\n\n  // const pgMonitor = process.env.PGP_MONITOR === 'true' || (global.sri4node_configuration && global.sri4node_configuration.pgMonitor===true);\n  if (extraOptions.monitor) {\n    monitor.attach(pgpInitOptionsUpdated);\n  }\n\n  // The node pg library assumes by default that values of type 'timestamp without time zone' are in local time.\n  //   (a deliberate choice, see https://github.com/brianc/node-postgres/issues/429)\n  // In the case of sri4node storing in UTC makes more sense as input data arrives in UTC format. Therefore we\n  // override the pg handler for type 'timestamp without time zone' with one that appends a 'Z' before conversion\n  // to a JS Date object to indicate UTC.\n  if (pgp) {\n    pgp.pg.types.setTypeParser(1114, (s) => new Date(`${s}Z`));\n\n    pgp.pg.types.setTypeParser(1184, (s) => {\n      const match = s.match(/\\.\\d\\d\\d(\\d{0,3})\\+/);\n      let microseconds = \"\";\n      if (match !== null) {\n        microseconds = match[1];\n      }\n\n      const isoWithoutMicroseconds = new Date(s).toISOString();\n      const isoWithMicroseconds = `${\n        isoWithoutMicroseconds.substring(0, isoWithoutMicroseconds.length - 1) + microseconds\n      }Z`;\n      return isoWithMicroseconds;\n    });\n\n    pgp.pg.types.setTypeParser(20, BigInt);\n    pgp.pg.types.setTypeParser(1700, (val) => parseFloat(val));\n    (BigInt.prototype as any).toJSON = function () {\n      return this.toString();\n    };\n  } else {\n    throw \"pgPromise not initialized!\";\n  }\n}\n\n/**\n * The mechanism to know how to connect to the DB used to be messy,\n * with one config property called defaultdatabaseurl,\n * next to another mechanism that read the databaseurl from the environment variables\n * but the only way to pass a schema being through environment variables.\n *\n * We want a single mechanism to configure sri4node, and that is through a json-object.\n *\n * Also: sri4node only supported a connection string, whereas the underlying node-postgres\n * library also supports a connection object.\n *\n * So the new mechanism will simply pass the section about the database from the config-object\n * (maybe filling in a few defaults where properties are missing) to the pg library.\n * This way we not only support a connection string but also other ways of connecting to the database.\n *\n * What about schema? Shouldn't that simply be running 'set search_path=...'\n * on any new connection before handing it over to someone to use it?\n *\n * @param sriConfig sriConfig object\n * @returns {pgPromise.IDatabase} the database connection\n */\nasync function pgConnect(sri4nodeConfig: TSriConfig) {\n  // WARN WHEN USING OBSOLETE PROPETIES IN THE CONFIG\n  if (sri4nodeConfig.defaultdatabaseurl !== undefined) {\n    console.warn(\n      \"defaultdatabaseurl config property has been deprecated, use databaseConnectionParameters.connectionString instead\",\n    );\n    // throw new Error('defaultdatabaseurl config property has been deprecated, use databaseConnectionParameters.connectionString instead');\n  }\n  if (sri4nodeConfig.maxConnections) {\n    // maximum size of the connection pool: sri4nodeConfig.databaseConnectionParameters.max\n    console.warn(\n      \"maxConnections config property has been deprecated, use databaseConnectionParameters.max instead\",\n    );\n  }\n  if (sri4nodeConfig.dbConnectionInitSql) {\n    // maximum size of the connection pool: sri4nodeConfig.databaseConnectionParameters.max\n    console.warn(\n      \"dbConnectionInitSql config property has been deprecated, use databaseConnectionParameters.connectionInitSql instead\",\n    );\n  }\n  if (process.env.PGP_MONITOR) {\n    // maximum size of the connection pool: sri4nodeConfig.databaseConnectionParameters.max\n    console.warn(\n      \"environemtn variable PGP_MONITOR has been deprecated, set config property databaseLibraryInitOptions.pgMonitor to true instead\",\n    );\n  }\n\n  // FIRST INITIALIZE THE LIBRARY IF IT HASN'T BEEN INITIALIZED BEFORE\n  if (!pgp) {\n    const extraOptions = {\n      schema: sri4nodeConfig.databaseConnectionParameters.schema,\n      monitor: sri4nodeConfig.enablePgMonitor === true,\n      connectionInitSql: sri4nodeConfig.databaseConnectionParameters.connectionInitSql,\n    };\n    pgInit(sri4nodeConfig.databaseLibraryInitOptions, extraOptions);\n  }\n\n  // this should ideally be be a simple clone of sri4nodeConfig.databaseConnectionParameters but\n  // there is a bit of messing about going on afterwards to turn it into the actual connection object\n  const cn: IExtendedDatabaseConnectionParameters = {\n    // first some defaults, but override them with whatever is in the config\n    max: 16,\n    connectionTimeoutMillis: 2_000, // 2 seconds\n    idleTimeoutMillis: 14_400_000, // 4 hours\n    ...sri4nodeConfig.databaseConnectionParameters,\n  };\n\n  console.log(`Using database connection object : [${JSON.stringify(cn)}]`);\n\n  return pgp(cn);\n}\n\n/**\n * @type {{ name: string, text: string }} details\n * @returns a prepared statement that can be used with tx.any() or similar functions\n */\nfunction createPreparedStatement(details: pgPromise.IPreparedStatement | undefined) {\n  return new pgp.PreparedStatement(details);\n}\n\n// Q wrapper for executing SQL statement on a node-postgres client.\n//\n// Instead the db object is a node-postgres Query config object.\n// See : https://github.com/brianc/node-postgres/wiki/Client#method-query-prepared.\n//\n// name : the name for caching as prepared statement, if desired.\n// text : The SQL statement, use $1,$2, etc.. for adding parameters.\n// values : An array of java values to be inserted in $1,$2, etc..\n//\n// It returns a Q promise to allow chaining, error handling, etc.. in Q-style.\nasync function pgExec(db: pgPromise.IDatabase<unknown, IClient>, query, sriRequest?: TSriRequest) {\n  const { sql, values } = query.toParameterizedSql();\n\n  debug(\"sql\", () => pgp?.as.format(sql, values));\n\n  const hrstart = process.hrtime();\n  const result = await db.query(sql, values);\n  const hrElapsed = process.hrtime(hrstart);\n  if (sriRequest) {\n    setServerTimingHdr(sriRequest, \"db\", hrtimeToMilliseconds(hrElapsed));\n  }\n\n  return result;\n}\n\nasync function pgResult(\n  db: pgPromise.IDatabase<unknown, IClient>,\n  query,\n  sriRequest?: TSriRequest,\n) {\n  const { sql, values } = query.toParameterizedSql();\n\n  debug(\"sql\", () => pgp?.as.format(sql, values));\n\n  const hrstart = process.hrtime();\n  const result = await db.result(sql, values);\n  const hrElapsed = process.hrtime(hrstart);\n  if (sriRequest) {\n    setServerTimingHdr(sriRequest, \"db\", hrtimeToMilliseconds(hrElapsed));\n  }\n\n  return result;\n}\n\nasync function startTransaction(\n  db: pgPromise.IDatabase<unknown, IClient>,\n  mode = new pgp.txMode.TransactionMode(),\n) {\n  debug(\"db\", \"++ Starting database transaction.\");\n\n  const eventEmitter = new EventEmitter();\n\n  const txWrapper = async (emitter: EventEmitter) => {\n    // This wrapper run async without being awaited. This has some consequences:\n    //   * errors are not passed the usual way, but via the 'tDone' event\n    //   * debug() does not log the correct reqId\n    try {\n      await db.tx({ mode }, async (tx) => {\n        emitter.emit(\"txEvent\", tx);\n        const how = await pEvent(emitter, \"terminate\");\n        if (how === \"reject\") {\n          throw \"txRejected\";\n        }\n      });\n      emitter.emit(\"txDone\");\n    } catch (err) {\n      // 'txRejected' as err is expected behaviour in case rejectTx is called\n      //\n      // Other possible \"expected\" error is the error which occurs after a db\n      // connection error (which already resulted in error for the current\n      // request). In that case the transaction rollback also generates\n      // an error, which we will ignore (unfortunatly pg-promise does nog use\n      // an error code so we need to check on the error message).\n      if (\n        err === \"txRejected\" ||\n        (err.message === \"Client has encountered a connection error and is not queryable\" &&\n          err.query === \"rollback\")\n      ) {\n        emitter.emit(\"txDone\");\n      } else {\n        emitter.emit(\"txDone\", err);\n      }\n    }\n  };\n\n  try {\n    const tx: pgPromise.ITask<any> = await new Promise((resolve, reject) => {\n      let resolved = false;\n      eventEmitter.on(\"txEvent\", (tx) => {\n        resolve(tx);\n        resolved = true;\n      });\n      eventEmitter.on(\"txDone\", (err) => {\n        // ignore undefined error, happens at\n        if (!resolved) {\n          console.log(\"GOT ERROR:\");\n          console.log(err);\n          console.log(JSON.stringify(err));\n          reject(err);\n        }\n      });\n      txWrapper(eventEmitter);\n    });\n    debug(\"db\", \"Got db tx object.\");\n\n    await tx.none(\"SET CONSTRAINTS ALL DEFERRED;\");\n\n    const terminateTx = (how) => async () => {\n      if (how !== \"reject\") {\n        await tx.none(\"SET CONSTRAINTS ALL IMMEDIATE;\");\n      }\n      eventEmitter.emit(\"terminate\", how);\n      const res = await pEvent(eventEmitter, \"txDone\");\n      if (res !== undefined) {\n        throw res;\n      }\n    };\n\n    return {\n      tx,\n      resolveTx: terminateTx(\"resolve\"),\n      rejectTx: terminateTx(\"reject\"),\n    };\n  } catch (err) {\n    error(\"CAUGHT ERROR: \");\n    error(JSON.stringify(err), err);\n    throw new SriError({\n      status: 503,\n      errors: [\n        {\n          code: \"too.busy\",\n          msg: \"The request could not be processed as the database is too busy right now. Try again later.\",\n        },\n      ],\n    });\n  }\n}\n\nasync function startTask(db: pgPromise.IDatabase<unknown, IClient>) {\n  debug(\"db\", \"++ Starting database task.\");\n\n  const emitter = new EventEmitter();\n\n  const taskWrapper = async (emitter) => {\n    // This wrapper run async without being awaited. This has some consequences:\n    //   * errors are not passed the usual way, but via the 'tDone' event\n    //   * debug() does not log the correct reqId\n    try {\n      await db.task(async (t) => {\n        emitter.emit(\"tEvent\", t);\n        await pEvent(emitter, \"terminate\");\n      });\n      emitter.emit(\"tDone\");\n    } catch (err) {\n      emitter.emit(\"tDone\", err);\n    }\n  };\n\n  try {\n    const t = await new Promise((resolve, reject) => {\n      emitter.on(\"tEvent\", (t) => {\n        resolve(t);\n      });\n      emitter.on(\"tDone\", (err) => {\n        reject(err);\n      });\n      taskWrapper(emitter);\n    });\n    debug(\"db\", \"Got db t object.\");\n\n    const endTask = async () => {\n      emitter.emit(\"terminate\");\n      const res = await pEvent(emitter, \"tDone\");\n      debug(\"db\", \"db task done.\");\n      if (res !== undefined) {\n        throw res;\n      }\n    };\n\n    return { t, endTask };\n  } catch (err) {\n    error(\"CAUGHT ERROR: \");\n    error(JSON.stringify(err));\n    throw new SriError({\n      status: 503,\n      errors: [\n        {\n          code: \"too.busy\",\n          msg: \"The request could not be processed as the database is too busy right now. Try again later.\",\n        },\n      ],\n    });\n  }\n}\n\nasync function installVersionIncTriggerOnTable(\n  db: pgPromise.IDatabase<unknown, IClient>,\n  tableName: string,\n  schemaName?: string,\n) {\n  // 2023-09: at a certain point we added the schemaname to the triggername which causes problems when\n  // copying a database to another schema (trigger gets created twice), so we'll use the\n  const tgNameToBeDropped = `vsko_resource_version_trigger_${\n    schemaName !== undefined ? schemaName : \"\"\n  }_${tableName}`;\n  const tgname = `vsko_resource_version_trigger_${tableName}`;\n\n  // we should respect the search_path I guess instead of assuming 'public', but for now...\n  const schemaNameOrPublic = schemaName !== undefined ? schemaName : \"public\";\n\n  const plpgsql = `\n    DO $___$\n    BEGIN\n      -- 1. add column '$$meta.version' if not yet present\n      IF NOT EXISTS (\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = '${tableName}'\n          AND column_name = '$$meta.version'\n          AND table_schema = '${schemaNameOrPublic}'\n          -- ${schemaName !== undefined ? `AND table_schema = '${schemaName}'` : \"\"}\n      ) THEN\n        ALTER TABLE \"${schemaNameOrPublic}\".\"${tableName}\" ADD \"$$meta.version\" integer DEFAULT 0;\n      END IF;\n\n      -- 2. create func vsko_resource_version_inc_function if not yet present\n      IF NOT EXISTS (SELECT proname from pg_proc p INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)\n                      WHERE proname = 'vsko_resource_version_inc_function'\n                        AND nspname = '${schemaNameOrPublic}'\n                    ) THEN\n        CREATE FUNCTION \"${schemaNameOrPublic}\".vsko_resource_version_inc_function() RETURNS TRIGGER AS '\n        BEGIN\n          NEW.\"$$meta.version\" := OLD.\"$$meta.version\" + 1;\n          RETURN NEW;\n        END' LANGUAGE 'plpgsql';\n      END IF;\n\n      -- 3. drop old triggers if they exist\n      DROP TRIGGER IF EXISTS \"${tgNameToBeDropped}\" on \"${schemaNameOrPublic}\".\"${tableName}\";\n\n      -- 4. create trigger 'vsko_resource_version_trigger_${tableName}' if not yet present\n      IF NOT EXISTS (\n          SELECT 1 FROM information_schema.triggers\n          WHERE trigger_name = '${tgname}'\n\t          AND trigger_schema = '${schemaNameOrPublic}'\n            AND event_object_table = '${tableName}'\n          -- OBSOLETE (does not check for schema and tablenam): SELECT 1 FROM pg_trigger WHERE tgname = '${tgname}'\n        ) THEN\n          CREATE TRIGGER ${tgname} BEFORE UPDATE ON \"${schemaNameOrPublic}\".\"${tableName}\"\n          FOR EACH ROW EXECUTE PROCEDURE \"${schemaNameOrPublic}\".vsko_resource_version_inc_function();\n      END IF;\n    END\n    $___$\n    LANGUAGE 'plpgsql';\n  `;\n  await db.query(plpgsql);\n}\n\nasync function getCountResult(tx, countquery, sriRequest) {\n  const [{ count }] = await pgExec(tx, countquery, sriRequest);\n  return parseInt(count, 10);\n}\n\n/**\n * Given a single resource definition from sriConfig.resources\n * returns the corresponding database table.\n * @param mapping\n * @returns the correponding database table name\n */\nfunction tableFromMapping(mapping: TResourceDefinition) {\n  return mapping.table || _.last(mapping.type.split(\"/\"));\n}\n\nfunction isEqualSriObject(obj1, obj2, mapping) {\n  const relevantProperties = Object.keys(mapping.map);\n\n  function customizer(val, key, _obj) {\n    if (findPropertyInJsonSchema(mapping.schema, key)?.format === \"date-time\") {\n      return new Date(val).getTime();\n    }\n\n    if (\n      global.sri4node_configuration.informationSchema[mapping.type][key] &&\n      global.sri4node_configuration.informationSchema[mapping.type][key].type === \"bigint\"\n    ) {\n      return BigInt(val);\n    }\n  }\n\n  const o1 = _.cloneDeepWith(\n    _.pickBy(\n      obj1,\n      (val, key) => val !== null && val != undefined && relevantProperties.includes(key),\n    ),\n    customizer,\n  );\n  const o2 = _.cloneDeepWith(\n    _.pickBy(\n      obj2,\n      (val, key) => val !== null && val != undefined && relevantProperties.includes(key),\n    ),\n    customizer,\n  );\n\n  return _.isEqualWith(o1, o2);\n}\n\nfunction stringifyError(e) {\n  if (e instanceof Error) {\n    return e.toString();\n  }\n  return JSON.stringify(e);\n}\n\nfunction settleResultsToSriResults(results) {\n  return results.map((res) => {\n    if (res.isFulfilled) {\n      return res.value;\n    }\n    const err = res.reason;\n    if (err instanceof SriError || err?.__proto__?.constructor?.name === \"SriError\") {\n      return err;\n    }\n    error(\n      \"____________________________ E R R O R (settleResultsToSriResults)_________________________\",\n    );\n    error(stringifyError(err));\n    if (err && err.stack) {\n      error(\"STACK:\");\n      error(err.stack);\n    }\n    error(\n      \"___________________________________________________________________________________________\",\n    );\n    return new SriError({\n      status: 500,\n      errors: [\n        {\n          code: \"internal.server.error\",\n          msg: `Internal Server Error. [${stringifyError(err)}}]`,\n        },\n      ],\n    });\n  });\n}\n\nfunction createReadableStream(objectMode = true) {\n  const s = new Readable({ objectMode });\n  s._read = function () {\n    // Do nothing\n  };\n  return s;\n}\n\nfunction getParentSriRequestFromRequestMap(\n  sriRequestMap: Map<string, TSriRequest>,\n  recurse = false,\n) {\n  const sriRequest = Array.from(sriRequestMap.values())[0];\n  return getParentSriRequest(sriRequest, recurse);\n}\n\nfunction getPgp() {\n  return pgp;\n}\n\n/**\n * This function will generate a new SriRequest object, based on some parameters.\n * Since the SriRequest is some kind of 'abstraction' over the express request,\n * which was introduced in order to be able to reuse the same code for operations\n * that would run from inside a batch request for example, this method will be called\n * from multiple places: once when a regular api request gets initated, but in case of\n * a batch, also once per every 'inner request' inside that batch.\n * There is also the possibility for plugins for example to do something like a\n * 'regular API request' but from within an already running request (imagine one update\n * would also trigger an update on another resource) but withint the same transaction.\n *\n * All these different use-cases produce different SriRequest objects, and need different input,\n * but I wanted to bring everything together in 1 function to make it easier to have an overview +\n * to make it easier to manage the stuff that is the same regardless of the mechanism.\n *\n * @param {object} expressRequest: needed for creating a basic SriRequest object\n * @param {object} expressResponse: needed for creating a basic SriRequest object\n *                  (if streaming mode = true)\n * @param {object} config: needed for creating a basic SriRequest object, of the form\n *                 { isBatchRequest: boolean, readOnly: boolean,\n *                   mapping: <single element from sri4node config 'mappings' section>}\n * @param {object} batchHandlerAndParams: an object as returned by batch/matchHref of the form\n *                 { path, routeParams, queryParams,\n *                   handler: [path, verb, func, config, mapping, streaming, readOnly, isBatch] }\n * @param {TSriRequest} parentSriRequest: needed when inside a batch or when called as\n *                     sri4node_internal_interface\n * @param {BatchElement} batchElement: needed when creating a 'virtual' SriRequest that represents\n *                       1 request from inside a batch\n *\n * @returns {TSriRequest}\n */\nfunction generateSriRequest(\n  expressRequest: Express.Request | undefined = undefined,\n  expressResponse: Express.Response | any | undefined = undefined,\n  basicConfig:\n    | {\n        isBatchRequest: boolean;\n        isStreamingRequest: boolean;\n        readOnly: boolean;\n        mapping?: TResourceDefinition;\n        dbT: any;\n      }\n    | undefined = undefined,\n  batchHandlerAndParams: any = undefined,\n  parentSriRequest: TSriRequest | undefined = undefined,\n  batchElement: any = undefined,\n  internalSriRequest:\n    | Omit<TInternalSriRequest, \"protocol\" | \"serverTiming\">\n    | undefined = undefined,\n): TSriRequest {\n  const baseSriRequest: TSriRequest = {\n    id: uuidv4(),\n    logDebug: debug, // (ch, message) => debug(requestId, ch, message)\n    logError: error,\n    SriError,\n    // context: {},\n    parentSriRequest: parentSriRequest || internalSriRequest?.parentSriRequest,\n\n    path: \"\",\n    query: {},\n    params: {},\n    sriType: undefined,\n    isBatchRequest: undefined,\n    readOnly: undefined,\n\n    originalUrl: undefined,\n    httpMethod: undefined,\n    headers: {},\n    body: undefined,\n    dbT: basicConfig?.dbT || internalSriRequest?.dbT || parentSriRequest?.dbT,\n    inStream: new stream.Readable(),\n    outStream: new stream.Writable(),\n    setHeader: undefined,\n    setStatus: undefined,\n    streamStarted: undefined,\n\n    protocol: undefined,\n    isBatchPart: undefined,\n\n    /**\n     * serverTiming is an object used to accumulate timing data which is passed to the client in the response\n     * as Server-Timing header (see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing).\n     */\n    serverTiming: {},\n    /**\n     * userData is an object which can be used by applications using sri4node to store information associated with\n     * a request. It is initialized as an empty object.\n     */\n    userData: {},\n  };\n\n  if (internalSriRequest && !batchElement) {\n    // internal interface\n    // const batchHandlerAndParams = batch.matchHref(parentSriRequest.href, parentSriRequest.verb);\n\n    return {\n      ...baseSriRequest,\n\n      // parentSriRequest: parentSriRequest,\n\n      originalUrl: internalSriRequest.href,\n\n      path: batchHandlerAndParams.path,\n      query: batchHandlerAndParams.queryParams,\n      params: batchHandlerAndParams.routeParams,\n\n      sriType: batchHandlerAndParams.handler.mapping.type,\n      isBatchRequest: batchHandlerAndParams.handler.isBatch,\n      readOnly: batchHandlerAndParams.handler.readOnly,\n\n      httpMethod: internalSriRequest.verb,\n      headers: internalSriRequest.headers ? internalSriRequest.headers : {},\n      body: internalSriRequest.body,\n      dbT: internalSriRequest.dbT,\n      inStream: internalSriRequest.inStream,\n      outStream: internalSriRequest.outStream,\n      setHeader: internalSriRequest.setHeader,\n      setStatus: internalSriRequest.setStatus,\n      streamStarted: internalSriRequest.streamStarted,\n\n      protocol: \"_internal_\",\n      isBatchPart: false,\n\n      parentSriRequest: internalSriRequest.parentSriRequest,\n    };\n  }\n  if (parentSriRequest && batchElement) {\n    // batch item\n    // const batchHandlerAndParams = batchElement.match;\n\n    return {\n      ...parentSriRequest,\n      ...baseSriRequest,\n\n      dbT: parentSriRequest.dbT,\n\n      originalUrl: batchElement.href,\n\n      path: batchHandlerAndParams.path,\n      query: batchHandlerAndParams.queryParams,\n      params: batchHandlerAndParams.routeParams,\n      httpMethod: batchElement.verb,\n\n      body:\n        batchElement.body == null\n          ? null\n          : _.isObject(batchElement.body)\n            ? batchElement.body\n            : JSON.parse(batchElement.body),\n      sriType: batchHandlerAndParams.handler.mapping.type,\n      isBatchPart: true,\n    };\n  }\n  if (expressRequest) {\n    // a 'normal' request\n    const generatedSriRequest: TSriRequest = {\n      ...baseSriRequest,\n\n      path: expressRequest.path,\n      originalUrl: expressRequest.originalUrl,\n      query: expressRequest.query as Record<string, string>,\n      params: expressRequest.params,\n      httpMethod: expressRequest.method as THttpMethod,\n\n      headers: expressRequest.headers,\n      protocol: expressRequest.protocol,\n      body: expressRequest.body,\n      isBatchPart: false,\n      isBatchRequest: basicConfig?.isBatchRequest,\n      readOnly: basicConfig?.readOnly,\n\n      // the batch code will set sriType for batch elements\n      sriType: !basicConfig?.isBatchRequest ? basicConfig?.mapping?.type : undefined,\n    };\n\n    // adding sriRequest.dbT should still be done in code after this function\n    // because for the normal case it is asynchronous, and I wanted to keep\n    // this function synchronous as long as possible\n    // ======================================================================\n\n    if (basicConfig?.isStreamingRequest) {\n      if (!expressResponse) {\n        throw Error(\n          \"[generateSriRequest] basicConfig.isStreamingRequest is true, but expressResponse argument is missing\",\n        );\n      }\n      // use passthrough streams to avoid passing req and resp in sriRequest\n      const inStream = new stream.PassThrough({\n        allowHalfOpen: false,\n        emitClose: true,\n      });\n      const outStream = new stream.PassThrough({\n        allowHalfOpen: false,\n        emitClose: true,\n      });\n      generatedSriRequest.inStream = expressRequest.pipe(inStream);\n      generatedSriRequest.outStream = outStream.pipe(expressResponse);\n      generatedSriRequest.setHeader = (k, v) => expressResponse.set(k, v);\n      generatedSriRequest.setStatus = (s) => expressResponse.status(s);\n      generatedSriRequest.streamStarted = () => expressResponse.headersSent;\n    }\n    return generatedSriRequest;\n  }\n\n  if (parentSriRequest && !batchElement) {\n    // internal interface\n    // const batchHandlerAndParams = batch.matchHref(parentSriRequest.href, parentSriRequest.verb);\n\n    return {\n      ...baseSriRequest,\n\n      originalUrl: parentSriRequest.href,\n\n      path: batchHandlerAndParams.path,\n      query: batchHandlerAndParams.queryParams,\n      params: batchHandlerAndParams.routeParams,\n\n      sriType: batchHandlerAndParams.handler.mapping.type,\n      isBatchRequest: batchHandlerAndParams.handler.isBatch,\n      readOnly: batchHandlerAndParams.handler.readOnly,\n\n      httpMethod: parentSriRequest.verb,\n      headers: parentSriRequest.headers ? parentSriRequest.headers : {},\n      body: parentSriRequest.body,\n      dbT: parentSriRequest.dbT,\n      inStream: parentSriRequest.inStream,\n      outStream: parentSriRequest.outStream,\n      setHeader: parentSriRequest.setHeader,\n      setStatus: parentSriRequest.setStatus,\n      streamStarted: parentSriRequest.streamStarted,\n\n      protocol: \"_internal_\",\n      isBatchPart: false,\n\n      parentSriRequest: parentSriRequest.parentSriRequest, // ??? || parentSriRequest,\n    };\n  }\n  if (parentSriRequest && batchElement) {\n    // batch item\n    // const batchHandlerAndParams = batchElement.match;\n\n    return {\n      ...parentSriRequest,\n      ...baseSriRequest,\n\n      originalUrl: batchElement.href,\n\n      path: batchHandlerAndParams.path,\n      query: batchHandlerAndParams.queryParams,\n      params: batchHandlerAndParams.routeParams,\n      httpMethod: batchElement.verb,\n\n      body:\n        batchElement.body == null\n          ? null\n          : _.isObject(batchElement.body)\n            ? batchElement.body\n            : JSON.parse(batchElement.body),\n      sriType: batchHandlerAndParams.handler.mapping.type,\n      isBatchPart: true,\n    };\n  }\n\n  throw Error(\n    \"[generateSriRequest] Unable to generate an SriRequest based on the given combination of parameters\",\n  );\n}\n\n/**\n * This is a recursive function that can find a property definition in a json schema definition.\n * This will also work when you have oneOf or anyOf sections in your schema definition.\n *\n * @param schema\n * @param propertyName\n * @returns the part of the json schema where the requested property is defined or null\n *  if the property is not found\n */\nfunction findPropertyInJsonSchema(schema: JSONSchema4, propertyName: string) {\n  if (schema?.properties?.[propertyName]) {\n    return schema.properties[propertyName];\n  }\n\n  const subSchemas = schema.anyOf || schema.allOf || schema.oneOf;\n  if (subSchemas) {\n    for (const subSchema of subSchemas) {\n      const found = findPropertyInJsonSchema(subSchema, propertyName);\n      if (found) {\n        return found;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport {\n  hrtimeToMilliseconds,\n  isLogChannelEnabled,\n  debugAnyChannelAllowed,\n  debug,\n  error,\n  sortUrlQueryParamParseTree,\n  hrefToParsedObjectFactory,\n  getParentSriRequest,\n  installEMT,\n  setServerTimingHdr,\n  emtReportToServerTiming,\n  createDebugLogConfigObject,\n  handleRequestDebugLog,\n  urlToTypeAndKey,\n  isUuid,\n  parseResource,\n  errorAsCode,\n  typeToConfig,\n  typeToMapping,\n  sqlColumnNames,\n  transformObjectToRow,\n  transformRowToObject,\n  pgInit,\n  pgConnect,\n  pgExec,\n  pgResult,\n  createPreparedStatement,\n  startTransaction,\n  startTask,\n  installVersionIncTriggerOnTable,\n  getCountResult,\n  tableFromMapping,\n  isEqualSriObject,\n  stringifyError,\n  settleResultsToSriResults,\n  createReadableStream,\n  getParentSriRequestFromRequestMap,\n  getPgp,\n  generateSriRequest,\n  checkSriConfigWithDb,\n  findPropertyInJsonSchema,\n};\n", "import { JSONSchema4, JSONSchema4Object } from \"json-schema\";\nimport { FlattenedJsonSchema } from \"./typeDefinitions\";\n\n/**\n * This will make sure we can easily find all possible dot-separated property names\n * by going through the keys in the object, because it will create a non-nested version\n * of the json schema where all the keys are dot-separated.\n * In case of a an array, the 'key' should become something like myobj.myarray[*] to indicate\n * all array elements, and thus myobj.myarray[*].arrayelementproperty if the array contains objects\n * (cfr. JSONPath)\n *\n * so\n * {\n *  type: 'object',\n *  properties: {\n *    a: {\n *      type: 'object',\n *      properties: {\n *        b: { type: 'string' }\n *        cs: { type: 'array', items: { type: 'number' } }\n *      }\n *    }\n *  }\n * }\n * would become:\n * {\n *  'a.b': { type: 'string' }\n *  'a.cs[*]': { type: 'number' }\n * }\n *\n * @param {object} jsonSchema\n * @param {Array<string>} pathToCurrent\n * @returns a version of the json schema where every property name if on the top-level\n *          but with dot notation\n */\nfunction flattenJsonSchema(\n  jsonSchema: JSONSchema4,\n  pathToCurrent: string[] = [],\n): FlattenedJsonSchema {\n  // TODO: support oneOf, anyOf, allOf !!!\n  if (jsonSchema.type === \"object\") {\n    // old skool modification of an object is a bit easier to reason about in this case\n    const retVal = {};\n    Object.entries(jsonSchema.properties || {}).forEach(([pName, pSchema]) => {\n      Object.assign(retVal, flattenJsonSchema(pSchema, [...pathToCurrent, pName]));\n    });\n    return retVal;\n  }\n  if (jsonSchema.type === \"array\") {\n    // return Object.fromEntries(flattenJsonSchema(jsonSchema.items, [...pathToCurrent, '[*]']);\n    const retVal = {};\n    if (Array.isArray(jsonSchema.items)) {\n      jsonSchema.items?.forEach((pSchema) => {\n        Object.assign(retVal, flattenJsonSchema(pSchema, [...pathToCurrent, \"[*]\"]));\n      });\n    } else if (jsonSchema.items) {\n      Object.assign(retVal, flattenJsonSchema(jsonSchema.items, [...pathToCurrent, \"[*]\"]));\n    }\n    return retVal;\n  }\n  const flattenedName = pathToCurrent.reduce((a, c) => {\n    if (c === \"[*]\") {\n      return `${a}${c}`;\n    }\n    return `${a}.${c}`;\n  });\n  return { [flattenedName]: jsonSchema };\n}\n\nfunction permalink(type: string, description: string): JSONSchema4 {\n  const name = type.substring(1);\n\n  return {\n    type: \"object\",\n    properties: {\n      href: {\n        type: \"string\",\n        pattern: `^/${name}/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$`,\n        description,\n      },\n    },\n    required: [\"href\"],\n  };\n}\n\nfunction string(\n  description: string,\n  min?: number,\n  max?: number,\n  pattern?: string | string[],\n): JSONSchema4 {\n  const ret: JSONSchema4 = {\n    type: \"string\",\n    description,\n  };\n  if (min) {\n    ret.minLength = min;\n  }\n  if (max) {\n    ret.maxLength = max;\n  }\n  if (pattern) {\n    if (Array.isArray(pattern)) {\n      ret.oneOf = pattern.map((p) => ({ pattern: p }));\n    } else {\n      ret.pattern = pattern;\n    }\n  }\n\n  return ret;\n}\n\nfunction numeric(description: string, min?: number, max?: number): JSONSchema4 {\n  const ret: JSONSchema4 = {\n    type: \"number\",\n    description,\n  };\n  if (min || min === 0) {\n    ret.minimum = min;\n  }\n  if (max) {\n    ret.maximum = max;\n  }\n\n  return ret;\n}\n\nfunction integer(description: string, min?: number, max?: number): JSONSchema4 {\n  const ret: JSONSchema4 = {\n    type: \"integer\",\n    description,\n  };\n  if (min || min === 0) {\n    ret.minimum = min;\n  }\n  if (max) {\n    ret.maximum = max;\n  }\n\n  return ret;\n}\n\n// email fun is used in mailer-api;\n// sam-api creates its own schema part with pattern: \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"\n//   ==> add it here ?\nfunction email(description: string): JSONSchema4 {\n  return {\n    type: \"string\",\n    format: \"email\",\n    minLength: 1,\n    maxLength: 254,\n    description,\n  };\n}\n\nfunction url(description: string): JSONSchema4 {\n  return {\n    type: \"string\",\n    minLength: 1,\n    maxLength: 2000,\n    format: \"uri\",\n    description,\n  };\n}\n\nfunction belgianzipcode(description: string): JSONSchema4 {\n  return {\n    type: \"string\",\n    pattern: \"^[0-9][0-9][0-9][0-9]$\",\n    description,\n  };\n}\n\n// seems to be only used in sri4node tests\nfunction phone(description: string): JSONSchema4 {\n  return {\n    type: \"string\",\n    pattern: \"^[0-9]*$\",\n    minLength: 9,\n    maxLength: 10,\n    description,\n  };\n}\n\nfunction guid(description: string): JSONSchema4 {\n  return {\n    type: \"string\",\n    description,\n    pattern: \"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\",\n  };\n}\n\nfunction timestamp(description: string): JSONSchema4 {\n  return {\n    type: \"string\",\n    format: \"date-time\",\n    description,\n  };\n}\n\nfunction boolean(description: string): JSONSchema4 {\n  return {\n    type: \"boolean\",\n    description,\n  };\n}\n\nfunction array(\n  description: string,\n  type?: \"string\" | \"number\" | \"boolean\" | JSONSchema4Object,\n): JSONSchema4 {\n  const ret: JSONSchema4 = {\n    type: \"array\",\n    description,\n  };\n  if (type !== undefined) {\n    if (type instanceof Object) {\n      ret.items = { ...type };\n    } else {\n      ret.items = { type };\n    }\n  }\n  return ret;\n}\n\nfunction enumeration(description: string, values: string[]): JSONSchema4 {\n  const ret: JSONSchema4 = {\n    type: \"string\",\n    description,\n    enum: values,\n  };\n  return ret;\n}\n\nfunction patchSchemaToDisallowAdditionalProperties(schema) {\n  // TODO: support oenOf, allOf, anyOf\n  const patchedSchema = { ...schema };\n  if (patchedSchema.properties && patchedSchema.additionalProperties === undefined) {\n    patchedSchema.additionalProperties = false;\n    patchedSchema.properties = Object.fromEntries(\n      Object.entries(patchedSchema.properties).map((e) => [\n        e[0],\n        patchSchemaToDisallowAdditionalProperties(e[1]),\n      ]),\n    );\n  }\n  return patchedSchema;\n}\n\nexport {\n  flattenJsonSchema,\n  permalink,\n  string,\n  numeric,\n  integer,\n  email,\n  url,\n  belgianzipcode,\n  phone,\n  guid,\n  timestamp,\n  boolean,\n  array,\n  enumeration,\n  patchSchemaToDisallowAdditionalProperties,\n};\n", "// This file should contain the shared type definitions.\n// For example everything that is a part of the sriConfig object should\n// have  a type definition, so it'll be easier to use for developers.\n// Also internally sri4node would benfit from more strict types for the shared data structures.\n\nimport { Busboy, BusboyConfig } from \"busboy\";\nimport { Request } from \"express\";\nimport { Operation } from \"fast-json-patch\";\nimport { IncomingHttpHeaders } from \"http2\";\nimport { JSONSchema4 } from \"json-schema\";\nimport pgPromise from \"pg-promise\";\nimport { IClient, IConnectionParameters } from \"pg-promise/typescript/pg-subset\";\nimport stream from \"stream\";\nimport { PhaseSyncer } from \"./phaseSyncedSettle\";\n\nimport { ValidateFunction } from \"ajv\";\nimport { ParsedUrlQuery } from \"querystring\";\n\n/**\n * This is the type definition for the plugin configuration object.\n */\nexport type TPluginConfig = {\n  /**\n   * Should be present in every plugin, and should be a unique identifier for the plugin.\n   *\n   */\n  uuid?: string;\n\n  /** 'installs' the plugin by making modifications to the sriConfig object\n   * (for example adding hooks to existing paths, or adding new paths).\n   * The second parameter is an initialized database connection so the plugin\n   * can do some database operations on startup.\n   *\n   */\n  install: (sriConfig: TSriConfig, db: pgPromise.IDatabase<{}, IClient>) => void | Promise<void>;\n  // Record<string, unknown>;\n\n  /**\n   * This is called when the api is being closed. It can be used to clean up resources.\n   * (like onnotification subscriptions to the database for example)\n   *\n   * @param sriConfig\n   * @param db\n   * @returns\n   */\n  close?: (sriConfig: TSriConfig, db: pgPromise.IDatabase<{}, IClient>) => void | Promise<void>;\n};\n\n// for example /llinkid/activityplanning, so should only start with a slash\n// and maybe only lowercase etc???\nexport type TUriPath = string;\n\nexport type THttpMethod = \"GET\" | \"PUT\" | \"DELETE\" | \"PATCH\" | \"POST\";\n\nexport type TDebugChannel =\n  | \"general\"\n  | \"db\"\n  | \"sql\"\n  | \"requests\"\n  | \"hooks\"\n  | \"server-timing\"\n  | \"batch\"\n  | \"trace\"\n  | \"phaseSyncer\"\n  | \"overloadProtection\"\n  | \"mocha\";\n\nexport type TLogDebug = {\n  channels: Set<TDebugChannel> | TDebugChannel[] | \"all\";\n  statuses?: Set<number> | Array<number>;\n};\n\nexport type TDebugLogFunction = (\n  channel: TDebugChannel | string,\n  x: (() => string) | string,\n) => void;\n\nexport type TErrorLogFunction = (...unknown) => void;\n\nexport class SriError {\n  status: number;\n\n  body: { errors: unknown[]; status: number; document: { [key: string]: unknown } };\n\n  headers: { [key: string]: string };\n\n  sriRequestID: string | null;\n\n  /**\n   * Contructs an sri error based on the given initialisation object\n   *\n   * @param {Object} value\n   */\n  constructor({\n    status = 500,\n    errors = [],\n    headers = {},\n    document = {},\n    sriRequestID = null,\n  }: {\n    status: number;\n    errors: unknown[];\n    headers?: { [k: string]: string };\n    document?: { [k: string]: unknown };\n    sriRequestID?: string | null;\n  }) {\n    this.status = status;\n    this.body = {\n      errors: errors.map((e: { [key: string]: unknown }) => {\n        if (e.type === undefined) {\n          e.type = \"ERROR\"; // if no type is specified, set to 'ERROR'\n        }\n        return e;\n      }),\n      status,\n      document,\n    };\n    this.headers = headers;\n    this.sriRequestID = sriRequestID;\n  }\n}\n\nexport type TSriBatchElement = {\n  href: string;\n  verb: THttpMethod;\n  body: TSriRequestBody;\n  match?: {\n    path: string;\n    queryParams: ParsedUrlQuery;\n    routeParams: any;\n    handler: TBatchHandlerRecord;\n  };\n};\n\nexport type TSriBatchArray = Array<TSriBatchElement | Array<TSriBatchElement>>;\n\nexport type TSriRequestBody =\n  | TSriBatchArray\n  | Array<Operation> // json patch\n  | any;\n\nexport type TPreparedSql = {\n  name?: string;\n  text: string;\n  params: Array<string | number | boolean>;\n  param: (x: string | number | boolean, noQuotes?: boolean) => TPreparedSql;\n  sql: (x: string) => TPreparedSql;\n  keys: (o: Record<string, unknown>) => TPreparedSql;\n  values: (o: Record<string, string | number | boolean>) => TPreparedSql;\n  array: (x: Array<string | number | boolean>) => TPreparedSql;\n  arrayOfTuples(x: Array<Array<string | number | boolean>>, cast?: Array<string>);\n  /**\n   * Check if a value is in a list of values.\n   * You would think about 'x IN (list)' in SQL, but implementing it using an exists clause\n   * is better for performance.\n   * 'EXISTS (SELECT 1 FROM (VALUES (list[0]), (list[1]), ... (list[n])) as t(x) where t.x = x)'\n   *\n   * @param valueRef a string referencing the value to check like a column name or 'LOWER(columnname)'\n   * @param list an array of values to check against\n   */\n  valueIn(valueRef: string, list: Array<string | number | boolean | Date>, cast?: string);\n  /**\n   * Check if a tuple is in a list of tuples.\n   * You would think about '(x,y) IN (listOfTuples)' in SQL, but implementing it using an exists clause\n   * is better for performance.\n   * 'EXISTS (SELECT 1 FROM (VALUES (list[0][0],list[0][1]), ... (list[n][0],list[n][1])) as t(x) where t.x = (x,y))'\n   *\n   * @param valueRef a string referencing the tuple to check like a column name or 'LOWER(columnname)'\n   * @param list an array of tuples to check against\n   */\n  tupleIn(\n    valueRef: string,\n    list: Array<Array<string | number | boolean | Date>>,\n    cast?: Array<string>,\n  );\n  with: (\n    nonrecursivequery: TPreparedSql,\n    unionclause: string,\n    recursivequery: TPreparedSql,\n    virtualtablename: string,\n  ) => TPreparedSql;\n  appendQueryObject(queryObject2: TPreparedSql): TPreparedSql;\n  toParameterizedSql: () => { sql: string; values: Array<any> };\n};\n\nexport type TInformationSchema = {\n  [resourcePath: string]: {\n    [columnName: string]:\n      | {\n          type: \"ARRAY\";\n          element_type: string;\n        }\n      | {\n          type: string;\n          element_type: null;\n        };\n  };\n};\n\n/**\n * This will be returned by sri4node.configure() and it contains instance specific properties\n */\nexport type TSriServerInstance = {\n  /**\n   * pgp is an initialised version of the pgPromise library (https://vitaly-t.github.io/pg-promise)\n   */\n  pgp: pgPromise.IMain;\n  /**\n   * pgPromise database object (http://vitaly-t.github.io/pg-promise/Database.html)\n   */\n  db: pgPromise.IDatabase<unknown, IClient>;\n  app: Express.Application;\n\n  // maybe later\n  // /**\n  //  * Will hold the current db structure\n  //  */\n  // informationSchema: any,\n\n  /**\n   * Closes the database pool.\n   */\n  close: () => void;\n};\n\n// TODO make more strict\nexport type TSriRequest = {\n  id: string;\n  parentSriRequest?: TSriRequest;\n\n  logDebug: TDebugLogFunction;\n  logError: TErrorLogFunction;\n  SriError: typeof SriError; // we expose the SriError class itself, not an object of this class\n  // context: Object,\n\n  href?: string;\n  verb?: THttpMethod;\n  httpMethod?: THttpMethod;\n\n  originalUrl?: string;\n\n  path: TUriPath;\n  query: ParsedUrlQuery; //Record<string, string>, // batchHandlerAndParams.queryParams,\n  params: Record<string, string>; // batchHandlerAndParams.routeParams,\n\n  sriType?: string; // batchHandlerAndParams.handler.mapping.type,\n  isBatchRequest?: boolean;\n  readOnly?: boolean;\n  reqCancelled?: boolean;\n\n  headers: { [key: string]: string } | IncomingHttpHeaders;\n  body?: TSriRequestBody;\n  dbT: pgPromise.IDatabase<unknown>; // db transaction\n  inStream: stream.Readable;\n  outStream: stream.Writable;\n  setHeader?: (key: string, value: string) => void;\n  setStatus?: (statusCode: number) => void;\n  streamStarted?: () => boolean;\n\n  protocol: \"_internal_\" | \"http\" | \"https\" | string | undefined;\n  isBatchPart?: boolean;\n\n  serverTiming: { [key: string]: unknown };\n\n  containsDeleted?: boolean;\n  generateError?: boolean;\n\n  busBoy?: Busboy;\n\n  ended?: boolean;\n\n  queryByKeyFetchList?: Record<string, Array<string>>;\n  queryByKeyResults?: Record<string, string>;\n\n  putRowsToInsert?: Record<string, Array<any>>;\n  putRowsToInsertIDs?: Array<string>;\n  multiInsertFailed?: boolean;\n  multiInsertError?: any;\n\n  putRowsToUpdate?: Record<string, Array<any>>;\n  putRowsToUpdateIDs?: Array<string>;\n  multiUpdateFailed?: boolean;\n  multiUpdateError?: any;\n\n  rowsToDelete?: Record<\n    string,\n    Array<{\n      key: string;\n      \"$$meta.modified\": Date;\n      \"$$meta.deleted\": boolean;\n    }>\n  >;\n  rowsToDeleteIDs?: Array<string>;\n  multiDeleteFailed?: boolean;\n  multiDeleteError?: any;\n\n  userData: Record<string, any>;\n  userObject?: any; // can be used to store information of the user\n};\n\nexport type TInternalSriRequest = {\n  protocol: \"_internal_\";\n  href: string;\n  verb: THttpMethod;\n  dbT: pgPromise.IDatabase<unknown>; // transaction or task object of pg promise\n  parentSriRequest: TSriRequest;\n  headers?: { [key: string]: string } | IncomingHttpHeaders;\n  body?: Array<{ href: string; verb: THttpMethod; body: TSriRequestBody }> | TSriRequestBody;\n\n  // In case of a streaming request, following fields are also required:\n  inStream?: any;\n  outStream?: any;\n  /** function called to set headers before streaming */\n  setHeader?: (key: string, value: string) => void;\n  /** function called to set status before streaming */\n  setStatus?: (statusCode: number) => void;\n  /** function which should return true when streaming is started */\n  streamStarted?: () => boolean;\n\n  serverTiming: { [key: string]: unknown };\n};\n\nexport type TResourceMetaType = Uppercase<string>;\n\n/**\n * We invented this object that contains some utility functions that can come in handy\n * when writing hooks and custom route handlers.\n * We saw that some projects (and our own tests) were using global.sri4node_internal_interface\n * but that doesn't feel right in terms of the interface.\n *\n * So we decided to pass an object with extra useful functions (starting with internalSriRequest)\n * to every handler and hook that we have in the configuration.\n *\n * By adding it as the last patrameter, this should not break anything on existing projects,\n * but at least we can start using this new way of doing things right away.\n *\n * If we find more useful functions later, we can also easily add them to this object in the future.\n */\nexport type TSriInternalUtils = {\n  internalSriRequest: (\n    internalReq: Omit<TInternalSriRequest, \"protocol\" | \"serverTiming\">,\n  ) => Promise<TSriResult>;\n};\n\nexport type TSriQueryFun = {\n  [key: string]: (\n    value: string,\n    select: TPreparedSql,\n    key: string,\n    database: pgPromise.IDatabase<unknown, IClient>,\n    doCount: boolean,\n    mapping: TResourceDefinition,\n    urlParameters: ParsedUrlQuery,\n  ) => void;\n};\n\n/** properties that always apply in ALL customRoute scenario's */\nexport type TCustomRouteGeneralProperties = {\n  routePostfix: TUriPath;\n  httpMethods: THttpMethod[];\n  readOnly?: boolean; // might only be used internally, in that case should be removed here\n};\n\n/**\n * 'like' scenario (cfr README: https://github.com/katholiek-onderwijs-vlaanderen/sri4node#custom-routes)\n *\n * example if resourceDefinition.type = /things and like = '/:id' and\n * routePostfix = '/todo', then the custom route /things/<key>/todo will be\n * created that will respond only to the given htttpMethods.\n * The handler of the main resource will be called, and the alterMapping\n * or transformReponse methods will be used to modify the response just enough.\n *\n * Used in audit-broadcast api in the 'alterMapping' version.\n * Used in mailer-api and traing-api in the 'transformResponse' version.\n *\n * This feature CAN PROBABLY BE REMOVED, and solved with a simple customRoute\n * combined with an SriInternalRequest.\n */\nexport type TLikeCustomRoute = TCustomRouteGeneralProperties &\n  ({\n    like: string;\n    /** this will define where the customRoute listens relative to the resource base */\n    query?: TSriQueryFun;\n  } & (\n    | {\n        alterMapping: (mapping: TResourceDefinition) => void;\n      }\n    | {\n        transformResponse: (\n          dbT: pgPromise.IDatabase<unknown>,\n          sriRequest: TSriRequest,\n          sriResult: TSriResult,\n        ) => Promise<void>;\n      }\n  ));\n\n/** NON streaming input & NON streaming output */\nexport type TNonStreamingCustomRoute = TCustomRouteGeneralProperties & {\n  /** this will define where the customRoute listens relative to the resource base */\n  beforeHandler?: (\n    tx: pgPromise.IDatabase<unknown>,\n    sriRequest: TSriRequest,\n    customMapping: TResourceDefinition,\n    internalUtils: TSriInternalUtils,\n  ) => Promise<void>;\n  handler: (\n    tx: pgPromise.IDatabase<unknown>,\n    sriRequest: TSriRequest,\n    customMapping: TResourceDefinition,\n    internalUtils: TSriInternalUtils,\n  ) => Promise<TSriResult>;\n  /** probably not so useful, since we can already control exactly what the response wil look like in the handler */\n  transformResponse?: (\n    dbT: pgPromise.IDatabase<unknown>,\n    sriRequest: TSriRequest,\n    sriResult: TSriResult,\n    internalUtils: TSriInternalUtils,\n  ) => Promise<void>;\n  afterHandler?: (\n    tx: pgPromise.IDatabase<unknown>,\n    sriRequest: TSriRequest,\n    customMapping: TResourceDefinition,\n    result: TSriResult,\n    internalUtils: TSriInternalUtils,\n  ) => Promise<void>;\n};\n\n/** streaming input & streaming output */\nexport type TStreamingCustomRoute = TCustomRouteGeneralProperties & {\n  /** indicates that busboy will be used, which helps with handling multipart form data */\n  busBoy?: boolean;\n  busBoyConfig?: BusboyConfig;\n  /** indicates that the output stream is a binary stream (otherwise a response header Content-Type: 'application/json' will be set) */\n  binaryStream?: boolean;\n  beforeStreamingHandler?: (\n    tx: pgPromise.IDatabase<unknown>,\n    sriRequest: TSriRequest,\n    customMapping: TResourceDefinition,\n    internalUtils: TSriInternalUtils,\n  ) => Promise<{ status: number; headers: Array<[key: string, value: string]> } | undefined>;\n  streamingHandler: (\n    tx: pgPromise.IDatabase<unknown>,\n    sriRequest: TSriRequest,\n    stream: import(\"stream\").Duplex,\n    internalUtils: TSriInternalUtils,\n  ) => Promise<void>;\n};\n\n/**\n * This is the part of TResourceDefinition where the customRoutes are defined\n * Currently there are 3 possible scenario's for custom routes that work differently.\n */\nexport type TCustomRoute = TLikeCustomRoute | TNonStreamingCustomRoute | TStreamingCustomRoute;\n\nexport function isLikeCustomRouteDefinition(cr: TCustomRoute): cr is TLikeCustomRoute {\n  return \"like\" in cr;\n}\n\nexport function isNonStreamingCustomRouteDefinition(\n  cr: TCustomRoute,\n): cr is TNonStreamingCustomRoute {\n  return \"handler\" in cr;\n}\n\nexport function isStreamingCustomRouteDefinition(cr: TCustomRoute): cr is TStreamingCustomRoute {\n  return \"streamingHandler\" in cr;\n}\n\nexport type TResourceDefinition = {\n  type: TUriPath;\n  metaType: TResourceMetaType;\n  methods?: THttpMethod[];\n\n  /** the database table to store the records, optional, inferred from typeif missing */\n  table?: string;\n\n  // these next lines are put onto the same object afterwards, not by the user\n  singleResourceRegex?: RegExp;\n  listResourceRegex?: RegExp;\n  validateKey?: ValidateFunction;\n  validateSchema?: ValidateFunction;\n\n  listResultDefaultIncludeCount?: boolean;\n  maxlimit?: number;\n  defaultlimit?: number;\n  defaultexpansion?: boolean;\n  // THIS SHOULD BE A JSON SCHEMA SO MAYBE https://github.com/json-schema-tools/meta-schema\n  // WILL HELP TO CORRECTLY TYPE JSON SCHEMA'S INISDE OUT CODE\n  schema: JSONSchema4;\n  // {\n  //   $schema: \"http://json-schema.org/schema#\",\n  //   title: \"activities on a plan\",\n  //   \"type\": \"object\",\n  //   \"properties\": {\n  //     \"key\": {\n  //       \"type\": \"string\",\n  //       \"description\": \"unique key\",\n  //       \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\"\n  //     },\n  //     \"parent\": {\n  //       \"type\": \"object\",\n  //       \"description\": \"a permalink to the parent. either another activity or the plan\",\n  //       \"properties\": {\n  //         \"href\": {\n  //           \"type\": \"string\",\n  //           \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n  //         }\n  //       },\n  //       \"required\": [\n  //         \"href\"\n  //       ]\n  //     },\n  //     \"title\": {\n  //       \"type\": \"string\",\n  //       \"description\": \"name of the activity\"\n  //     },\n  //     \"description\": {\n  //       \"type\": \"string\",\n  //       \"description\": \"short description of the entire activity (the entire period of the activity).\"\n  //     },\n  //     \"period\": {\n  //       \"type\": \"object\",\n  //       \"description\": \"the time-range that the activities is spanning.\",\n  //       \"properties\": {\n  //         \"startDate\": {\n  //           \"type\": \"string\",\n  //           \"format\": \"date-time\",\n  //           \"description\": \"Date on which this item must be published.\"\n  //         },\n  //         \"endDate\": {\n  //           \"type\": \"string\",\n  //           \"format\": \"date-time\",\n  //           \"description\": \"Date on which this item must be unpublished.\"\n  //         }\n  //       },\n  //       \"required\": [\n  //         \"startDate\",\n  //         \"endDate\"\n  //       ]\n  //     },\n  //     \"goals\": {\n  //       \"type\": \"array\",\n  //       \"description\": \"An array of permalinks to goals (either in the base curriculum, or one of the custom curricula).\",\n  //       \"items\": {\n  //         \"type\": \"object\",\n  //         \"description\": \"a permalink to the goal\",\n  //         \"properties\": {\n  //           \"href\": {\n  //             \"type\": \"string\",\n  //             \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n  //           }\n  //         },\n  //         \"required\": [\n  //           \"href\"\n  //         ]\n  //       }\n  //     }\n  //   },\n  //   \"required\": [\n  //     \"key\",\n  //     \"parent\",\n  //     \"period\"\n  //   ]\n  // },\n  beforeUpdate?: Array<\n    (\n      tx: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      data: Array<{\n        permalink: string;\n        incoming: Record<string, any>;\n        stored: Record<string, any>;\n      }>,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n  beforeInsert?: Array<\n    (\n      tx: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      data: Array<{\n        permalink: string;\n        incoming: Record<string, any>;\n        stored: null;\n      }>,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n  beforeRead?: Array<\n    (\n      tx: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n  beforeDelete?: Array<\n    (\n      tx: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      data: Array<{\n        permalink: string;\n        incoming: null;\n        stored: Record<string, any>;\n      }>,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n  afterRead?: Array<\n    (\n      tx: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      data: Array<{\n        permalink: string;\n        incoming: null;\n        stored: Record<string, any>;\n      }>,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n  afterUpdate?: Array<\n    (\n      tx: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      data: Array<{\n        permalink: string;\n        incoming: Record<string, any>;\n        stored: Record<string, any>;\n      }>,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n  afterInsert?: Array<\n    (\n      tx: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      data: Array<{\n        permalink: string;\n        incoming: Record<string, any>;\n        stored: Record<string, any>;\n      }>,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n  afterDelete?: Array<\n    (\n      tx: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      data: Array<{\n        permalink: string;\n        incoming: null;\n        stored: Record<string, any>;\n      }>,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n  transformResponse?: Array<\n    (\n      dbT: pgPromise.IDatabase<unknown>,\n      sriRequest: TSriRequest,\n      sriResult: TSriResult,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n\n  // all supported query parameters, with a function that will modify the preparedSQL so far\n  // to make sure only the relevant results are returned\n  query?: TSriQueryFun;\n  // uses the same jeys as in 'query', to make sure the custom filters are documented as well\n  queryDocs?: Record<string, string>;\n\n  // \"POSSIBLE_FUTURE_QUERY\": {\n  //   // THIS SHOULD ALWAYS WORK defaultFilter,\n  //   _rootWithContextContains: {\n  //     name: '_rootWithContextContains',\n  //     // propertyName: undefined or property if this filter filters on a specific property\n  //     // operatorName: '_INCLUDED_IN_ROOT'\n  //     'aliases': [ 'rootWithConextContains' ],\n  //     default: '*',\n  //     expectedValueType: 'string[]',\n  //     // option 1: the handlet to produce the SQL is per custom filter\n  //     handler: function(normalizedName, value) return { where: ..., joins: ..., cte: ... }\n  //     // whatn to do with customFilters that produce other query when multiple filters are combined\n  //   },\n  //   // option 1: the handlet to produce the SQL gets all the custom filters as input\n  //   handler: function(customFilters) {} //function([ { normalizedName, value }, ... ]) return { where: ..., joins: ..., cte: ... }\n  // },\n  map?: {\n    [k: string]: {\n      columnToField?: Array<(key: string, element: Record<string, unknown>) => void>;\n      [k: string]: any;\n    };\n  };\n  onlyCustom?: boolean;\n  customRoutes?: Array<TCustomRoute>;\n};\n\nexport type TSriRequestHandlerForPhaseSyncer = (\n  phaseSyncer: PhaseSyncer,\n  tx: pgPromise.IDatabase<unknown>,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition | null,\n  internalUtils: TSriInternalUtils,\n) => Promise<TSriResult>;\n\nexport type TSriRequestHandlerForBatch = (\n  sriRequest: TSriRequest,\n  internalUtils: TSriInternalUtils,\n) => Promise<TSriResult>;\n\nexport type TSriRequestHandler = TSriRequestHandlerForBatch | TSriRequestHandlerForPhaseSyncer;\n\nexport type TBatchHandlerRecord = {\n  route: string;\n  verb: THttpMethod;\n  func: TSriRequestHandler;\n  // eslint-disable-next-line no-use-before-define\n  config: TSriConfig;\n  mapping: TResourceDefinition;\n  streaming: boolean;\n  readOnly: boolean;\n  isBatch: boolean;\n};\n// EXPERIMENT: I think it would be better to separate func, which can have 2 types, into 2 separate\n// properties, one for each type. This would make the type system more precise.\n// & (\n//   { requestHandlerForBatch: TSriRequestHandlerForBatch }\n//   |\n//   { requestHandlerForPhaseSyncer: TSriRequestHandlerForPhaseSyncer }\n// )\n\n/**\n * I believe schema should be set on the connection level and not the library level\n * so I am supporting it here already...\n *\n * Also adding an option here to run some sql when getting a new connection.\n * That option used to be in the root of TSriConfig and used to be called dbConnectionInitSql\n * EXAMPLE: \"set random_page_cost = 1.1;\"\n */\nexport interface IExtendedDatabaseConnectionParameters extends IConnectionParameters {\n  schema?: pgPromise.ValidSchema | ((dc: unknown) => pgPromise.ValidSchema);\n  // will be run\n  connectionInitSql?: string; // example \"set random_page_cost = 1.1;\",\n}\n\nexport interface IExtendedDatabaseInitOptions extends pgPromise.IInitOptions {\n  /**\n   * Do we attach the pgMonitor plugin?\n   */\n  pgMonitor?: boolean;\n}\n\nexport type TSriResult = {\n  status: number;\n  headers?: Record<string, string>;\n  body?:\n    | {\n        $$meta?: any;\n        results: Array<any>;\n      }\n    | any;\n};\n\nexport type TOverloadProtection = {\n  maxPipelines: number;\n  retryAfter?: number;\n};\n\nexport type TJobMap = Map<string, PhaseSyncer>;\n\nexport type TBeforePhase = (\n  sriRequestMap: Map<string, TSriRequest>,\n  jobMap: TJobMap,\n  pendingJobs: Set<string>,\n  internalUtils: TSriInternalUtils,\n) => Promise<void>;\n\nexport type TSriConfig = {\n  // these next lines are put onto the same object afterwards, not by the user\n  utils?: unknown;\n  db?: pgPromise.IDatabase<unknown>;\n  dbR?: pgPromise.IDatabase<unknown>;\n  dbW?: pgPromise.IDatabase<unknown>;\n  informationSchema?: TInformationSchema;\n  /** a short string that will be added to every request id while logging\n   * (tis can help to differentiate between different api's while searching thourgh logs)\n   */\n  id?: string;\n\n  // the real properties !!!\n  plugins?: TPluginConfig[];\n  enableGlobalBatch?: boolean;\n  globalBatchRoutePrefix?: TUriPath;\n  // logrequests?: boolean,\n  // logsql?: boolean,\n  logdebug?: TLogDebug;\n  description?: string;\n  bodyParserLimit?: string; // example 50mb\n  batchConcurrency?: number;\n  overloadProtection?: TOverloadProtection;\n\n  defaultlimit?: boolean;\n  // 2022-03-08 REMOVE gc-stats as the project is abandoned and will cause problems with node versions > 12\n  // trackHeapMax?: boolean,\n  /**\n   * DO NOT USE! This is generated when configure() is called,\n   * and then added to the sriConfig object, which is bad practice.\n   *\n   * This is a map generated when configure() is called.\n   * where the keys are httpMethod and the values an array of \"*almost* TBatchHandlerRecord\"\n   */\n  batchHandlerMap?: {\n    [K in THttpMethod]: Array<Omit<TBatchHandlerRecord, \"route\"> & { route: Record<string, any> }>;\n  };\n  resources: TResourceDefinition[];\n\n  /**\n   * This is a global hook. It is called during configuration, before anything is done.\n   */\n  startUp?: Array<\n    (dbT: pgPromise.IDatabase<unknown>, pgp: pgPromise.IMain<unknown, IClient>) => void\n  >;\n\n  /**\n   * This is a global hook. New hook which will be called before each phase of a request is executed (phases are parts of requests,\n   * they are used to synchronize between executing batch operations in parallel, see Batch execution order in the README.\n   */\n  beforePhase?: Array<TBeforePhase>;\n\n  /**\n   * This is a global hook. This function is called at the very start of each http request (i.e. for batch only once).\n   * Based on the expressRequest (maybe some headers?) you could make changes to the sriRequest object (like maybe\n   * add the user's identity if it can be deducted from the headers).\n   */\n  transformRequest?: Array<\n    (\n      expressRequest: Request,\n      sriRequest: TSriRequest,\n      dbT: pgPromise.IDatabase<unknown>,\n      internalUtils: TSriInternalUtils,\n    ) => void\n  >;\n\n  /**\n   * This is a global hook. This hook is defined to be able to copy data set by transformRequest (like use data) from the\n   * original (parent) request to the new internal request. This function is called at creation of each sriRequest created\n   * via the 'internal' interface.\n   */\n  transformInternalRequest?: Array<\n    (\n      dbT: pgPromise.IDatabase<unknown>,\n      internalSriRequest: TInternalSriRequest,\n      parentSriRequest: TSriRequest,\n    ) => void\n  >;\n\n  /**\n   * This is a global hook. This hook will be called in case an exception is catched during the handling of an SriResquest.\n   * After calling this hook, sri4node continues with the built-in error handling (logging and sending error reply to the cient).\n   * Warning: in case of an early error, sriRequest might be undefined!\n   */\n  errorHandler?: Array<\n    (sriRequest: TSriRequest, error: Error, internalUtils: TSriInternalUtils) => void\n  >;\n\n  /**\n   * This is a global hook. It will be called after the request is handled (without errors). At the moment this handler is called,\n   * the database task/transaction is already closed and the response is already sent to the client.\n   */\n  afterRequest?: Array<(sriRequest: TSriRequest) => void>;\n\n  /**\n   * @deprecated\n   */\n  defaultdatabaseurl?: string;\n\n  /**\n   * @deprecated\n   */\n  dbConnectionInitSql?: string; // example \"set random_page_cost = 1.1;\",\n\n  /**\n   * @deprecated\n   */\n  maxConnections?: string;\n\n  // cfr. https://github.com/vitaly-t/pg-promise/blob/master/typescript/pg-subset.d.ts\n  databaseConnectionParameters: IExtendedDatabaseConnectionParameters; // IConnectionOptions<IClient> do I need this type param?\n  // cfr. https://github.com/vitaly-t/pg-promise/blob/master/typescript/pg-promise.d.ts\n  // OPTIONAL, but useful if you want to enable pgMonitor or enable some lifecycle hooks\n  databaseLibraryInitOptions?: IExtendedDatabaseInitOptions;\n\n  /**\n   * to enable [pg-monitor](https://www.npmjs.com/package/pg-monitor) (detailed logging about database interaction)\n   */\n  enablePgMonitor?: boolean;\n\n  /**\n   * When streaming a response, even if it takes a long time to send the next chunk,\n   * we'll make sure something (a space character) is being sent to the client\n   * to avoid anything in the middle to kill the connection.\n   *\n   * DEFAULT: 20_000 (20 seconds)\n   */\n  streamingKeepAliveTimeoutMillis?: number;\n};\n\nexport type ParseTreeType = \"string\" | \"number\" | \"integer\" | \"boolean\";\n\nexport type ParseTreeProperty = { name: string; type: ParseTreeType; multiValued: boolean };\n\nexport type ParseTreeOperator = { name: string; type: ParseTreeType; multiValued: boolean };\n\nexport type ParseTreeFilter = {\n  property?: ParseTreeProperty;\n  operator: ParseTreeOperator;\n  invertOperator: boolean;\n  caseInsensitive: boolean;\n  value: unknown;\n};\n\nexport type ParseTree = {\n  normalizedUrl: {\n    rowFilters: ParseTreeFilter[];\n    columnFilters: ParseTreeFilter[];\n    listControlFilters: ParseTreeFilter[];\n  };\n};\n\n// can be improved and made a lot more strict (cfr. @types/json-schema), but for now...\nexport type FlattenedJsonSchema = { [path: string]: { [jsonSchemaProperty: string]: unknown } };\n\n// const sriConfig = {\n//   \"plugins\": [\n//     {\n//       \"uuid\": \"7569812c-a992-11ea-841b-1f780ac2b6cc\"\n//     },\n//     {}\n//   ],\n//   \"enableGlobalBatch\": true,\n//   \"globalBatchRoutePrefix\": \"/llinkid/activityplanning\",\n//   \"logrequests\": true,\n//   \"logsql\": true,\n//   \"logdebug\": \"general\",\n//   \"description\": \"This API is to provide custom curricula\",\n//   \"bodyParserLimit\": \"50mb\",\n//   \"dbConnectionInitSql\": \"set random_page_cost = 1.1;\",\n//   \"resources\": [\n//     {\n//       \"type\": \"/llinkid/activityplanning/activityplans/activities\",\n//       \"metaType\": \"ACTIVITY\",\n//       \"listResultDefaultIncludeCount\": false,\n//       \"schema\": {\n//         \"$schema\": \"http://json-schema.org/schema#\",\n//         \"title\": \"activities on a plan\",\n//         \"type\": \"object\",\n//         \"properties\": {\n//           \"key\": {\n//             \"type\": \"string\",\n//             \"description\": \"unique key\",\n//             \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\"\n//           },\n//           \"parent\": {\n//             \"type\": \"object\",\n//             \"description\": \"a permalink to the parent. either another activity or the plan\",\n//             \"properties\": {\n//               \"href\": {\n//                 \"type\": \"string\",\n//                 \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n//               }\n//             },\n//             \"required\": [\n//               \"href\"\n//             ]\n//           },\n//           \"title\": {\n//             \"type\": \"string\",\n//             \"description\": \"name of the activity\"\n//           },\n//           \"description\": {\n//             \"type\": \"string\",\n//             \"description\": \"short description of the entire activity (over all weeks/the entire period of the activity).\"\n//           },\n//           \"period\": {\n//             \"type\": \"object\",\n//             \"description\": \"the time-range that the activities is spanning.\",\n//             \"properties\": {\n//               \"startDate\": {\n//                 \"type\": \"string\",\n//                 \"format\": \"date-time\",\n//                 \"description\": \"Date on which this item must be published.\"\n//               },\n//               \"endDate\": {\n//                 \"type\": \"string\",\n//                 \"format\": \"date-time\",\n//                 \"description\": \"Date on which this item must be unpublished.\"\n//               }\n//             },\n//             \"required\": [\n//               \"startDate\",\n//               \"endDate\"\n//             ]\n//           },\n//           \"goals\": {\n//             \"type\": \"array\",\n//             \"description\": \"An array of permalinks to goals (either in the base curriculum, or one of the custom curricula).\",\n//             \"items\": {\n//               \"type\": \"object\",\n//               \"description\": \"a permalink to the goal\",\n//               \"properties\": {\n//                 \"href\": {\n//                   \"type\": \"string\",\n//                   \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n//                 }\n//               },\n//               \"required\": [\n//                 \"href\"\n//               ]\n//             }\n//           }\n//         },\n//         \"required\": [\n//           \"key\",\n//           \"parent\",\n//           \"period\"\n//         ]\n//       },\n//       \"beforeUpdate\": [\n//         null,\n//         null\n//       ],\n//       \"beforeInsert\": [\n//         null,\n//         null\n//       ],\n//       \"afterRead\": [\n//         null,\n//         null\n//       ],\n//       \"query\": {\n//         defaultFilter: function(x,y,z) {}\n//       },\n//       // POSSIBLE_FUTURE_QUERY\n//       \"customQueryParams\": {\n//         // THIS SHOULD ALWAYS WORK defaultFilter,\n//         _rootWithContextContains: {\n//           name: '_rootWithContextContains', // necessary if the key already contains that name, or do we make customQueryParams an array of object?\n//           // propertyName: undefined or property if this filter filters on a specific property\n//           // operatorName: '_INCLUDED_IN_ROOT'\n//           'aliases': [ 'rootWithConextContains' ],\n//           default: '*', // the filter value that is equivalent to not specifying the filter, if applicable\n//           expectedValueType: 'string[]', // kind of 'borrowed' from typescript\n//           // option 1: the handler to produce the SQL is per custom filter\n//           handler: function(normalizedName, value) return { where: ..., joins: ..., cte: ... }\n//           // BUT what to do with customFilters that produce other query when multiple filters are combined\n//         },\n//         // option 2: the handlet to produce the SQL gets all the custom filters as input\n//         // (which allows for optimizing combinations of fillters, and also allows implementing a default for a custom filter)\n//         handler: function(customFilters) {} //function([ { normalizedName, value }, ... ]) return { where: ..., joins: ..., cte: ... }\n//       },\n//       \"maxlimit\": 5000,\n//       \"map\": {\n//         \"key\": {},\n//         \"parentPlan\": {},\n//         \"parentActivity\": {},\n//         \"title\": {},\n//         \"description\": {},\n//         \"period\": {},\n//         \"goals\": {}\n//       },\n//       \"customRoutes\": [\n//         {\n//           \"routePostfix\": \"/attachments\",\n//           \"httpMethods\": [\n//             \"POST\"\n//           ],\n//           \"readOnly\": false,\n//           \"busBoy\": true\n//         },\n//         {\n//           \"routePostfix\": \"/:key/attachments/:filename([^/]*.[A-Za-z0-9]{1,})\",\n//           \"httpMethods\": [\n//             \"GET\"\n//           ],\n//           \"readOnly\": true,\n//           \"binaryStream\": true\n//         },\n//         {\n//           \"routePostfix\": \"/:key/attachments/:attachmentKey\",\n//           \"readOnly\": false,\n//           \"httpMethods\": [\n//             \"DELETE\"\n//           ]\n//         },\n//         {\n//           \"routePostfix\": \"/:key/attachments/:attachmentKey\",\n//           \"httpMethods\": [\n//             \"GET\"\n//           ],\n//           \"readOnly\": true\n//         }\n//       ]\n//     },\n//     {\n//       \"type\": \"/llinkid/activityplanning/activityplans\",\n//       \"metaType\": \"ACTIVITY_PLAN\",\n//       \"listResultDefaultIncludeCount\": false,\n//       \"schema\": {\n//         \"$schema\": \"http://json-schema.org/schema#\",\n//         \"title\": \"List of activity plans\",\n//         \"type\": \"object\",\n//         \"properties\": {\n//           \"key\": {\n//             \"type\": \"string\",\n//             \"description\": \"unique key\",\n//             \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\"\n//           },\n//           \"title\": {\n//             \"type\": \"string\",\n//             \"description\": \"The additional name of this curriculum\"\n//           },\n//           \"creators\": {\n//             \"type\": \"array\",\n//             \"description\": \"List of creators for this activityplan\",\n//             \"minItems\": 1,\n//             \"items\": {\n//               \"type\": \"object\",\n//               \"description\": \"A permalink to the authoring [organisational unit | responsibility] of this plan\",\n//               \"properties\": {\n//                 \"href\": {\n//                   \"type\": \"string\",\n//                   \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n//                 }\n//               },\n//               \"required\": [\n//                 \"href\"\n//               ]\n//             }\n//           },\n//           \"context\": {\n//             \"type\": \"object\",\n//             \"description\": \"mandatory reference to the schoolentity that this activityplan is valid for\",\n//             \"properties\": {\n//               \"href\": {\n//                 \"type\": \"string\",\n//                 \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n//               }\n//             },\n//             \"required\": [\n//               \"href\"\n//             ]\n//           },\n//           \"issued\": {\n//             \"type\": \"object\",\n//             \"description\": \"the time-range that the activityplan is valid.\",\n//             \"properties\": {\n//               \"startDate\": {\n//                 \"type\": \"string\",\n//                 \"format\": \"date-time\",\n//                 \"description\": \"Date on which this item must be published.\"\n//               },\n//               \"endDate\": {\n//                 \"type\": \"string\",\n//                 \"format\": \"date-time\",\n//                 \"description\": \"Date on which this item must be unpublished.\"\n//               }\n//             },\n//             \"required\": [\n//               \"startDate\",\n//               \"endDate\"\n//             ]\n//           },\n//           \"curricula\": {\n//             \"type\": \"array\",\n//             \"description\": \"List of curricula for this activityplan\",\n//             \"minItems\": 1,\n//             \"items\": {\n//               \"type\": \"object\",\n//               \"description\": \"permalink to customcurricula or customcurriculagroup\",\n//               \"properties\": {\n//                 \"href\": {\n//                   \"type\": \"string\",\n//                   \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n//                 }\n//               },\n//               \"required\": [\n//                 \"href\"\n//               ]\n//             }\n//           },\n//           \"activityplangroup\": {\n//             \"type\": \"object\",\n//             \"properties\": {\n//               \"href\": {\n//                 \"type\": \"string\",\n//                 \"pattern\": \"^/llinkid/activityplanning/activityplangroups/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\",\n//                 \"description\": \"permalink to the activityplan group\"\n//               }\n//             },\n//             \"required\": [\n//               \"href\"\n//             ]\n//           },\n//           \"class\": {\n//             \"type\": \"object\",\n//             \"properties\": {\n//               \"href\": {\n//                 \"type\": \"string\",\n//                 \"pattern\": \"^/sam/organisationalunits/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\",\n//                 \"description\": \"permalink to a class (OU in samenscholing of type CLASS)\"\n//               }\n//             },\n//             \"required\": [\n//               \"href\"\n//             ]\n//           },\n//           \"observers\": {\n//             \"type\": \"array\",\n//             \"description\": \"List of people/OUs who can view this activityplan\",\n//             \"items\": {\n//               \"type\": \"object\",\n//               \"description\": \"A permalink to the authoring [organisational unit | responsibility] of this plan\",\n//               \"properties\": {\n//                 \"href\": {\n//                   \"type\": \"string\",\n//                   \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n//                 }\n//               },\n//               \"required\": [\n//                 \"href\"\n//               ]\n//             }\n//           },\n//           \"softDeleted\": {\n//             \"type\": \"string\",\n//             \"format\": \"date-time\",\n//             \"description\": \"a timestamp defining if/when the plan is soft-deleted\"\n//           }\n//         },\n//         \"required\": [\n//           \"key\",\n//           \"curricula\",\n//           \"creators\",\n//           \"issued\",\n//           \"class\",\n//           \"activityplangroup\"\n//         ]\n//       },\n//       \"query\": {},\n//       \"maxlimit\": 5000,\n//       \"map\": {\n//         \"key\": {},\n//         \"title\": {},\n//         \"context\": {},\n//         \"creators\": {},\n//         \"issued\": {},\n//         \"curricula\": {},\n//         \"activityplangroup\": {\n//           \"references\": \"/llinkid/activityplanning/activityplangroups\"\n//         },\n//         \"class\": {},\n//         \"observers\": {},\n//         \"softDeleted\": {}\n//       }\n//     },\n//     {\n//       \"type\": \"/llinkid/activityplanning/activityplangroups\",\n//       \"metaType\": \"ACTIVITY_PLAN_GROUP\",\n//       \"listResultDefaultIncludeCount\": false,\n//       \"schema\": {\n//         \"$schema\": \"http://json-schema.org/schema#\",\n//         \"title\": \"List of activity plan groups\",\n//         \"type\": \"object\",\n//         \"properties\": {\n//           \"key\": {\n//             \"type\": \"string\",\n//             \"description\": \"unique key of this activityplangroup\",\n//             \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\"\n//           }\n//         },\n//         \"required\": [\n//           \"key\"\n//         ]\n//       },\n//       \"query\": {},\n//       \"maxlimit\": 5000,\n//       \"map\": {\n//         \"key\": {}\n//       }\n//     }\n//   ]\n// };\n", "import peggy from \"peggy\";\nimport { flattenJsonSchema } from \"../schemaUtils\";\nimport {\n  FlattenedJsonSchema,\n  ParseTree,\n  ParseTreeFilter,\n  ParseTreeOperator,\n  ParseTreeProperty,\n  TResourceDefinition,\n  TSriConfig,\n} from \"../typeDefinitions\";\n\n/// /////////////////////////////////////////////////////////////////////////////\n// The following functions are needed as a helper inside the grammar\n/// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n * To be more stringent in adhering to RFC 3986 (which reserves !, ', (, ), and *),\n * even though these characters have no formalized URI delimiting uses,\n * the following function can be safely used instead of encodeURIComponent.\n *\n * cfr. https://datatracker.ietf.org/doc/html/rfc3986\n *\n * @param uriComp\n * @returns an encoded URI component where ! ' ( ) * will also be percent-encoded\n */\nfunction encodeURIComponentStrict(uriComp) {\n  return encodeURIComponent(uriComp).replace(/[!'()*]/g, (c) => `%${c.charCodeAt(0).toString(16)}`);\n}\n\n/**\n * Used to sort an array of parseTree objects (column, row or listControl)\n *\n * @param {*} a\n * @param {*} b\n * @returns -1 if a should be before b, 1 if b should be before a, 0 if they are equivalent\n */\nfunction parseTreeSortFunction(a: ParseTreeFilter, b: ParseTreeFilter) {\n  return (\n    [\n      [() => a.property && !b.property, -1],\n      [() => !a.property && b.property, +1],\n      [() => a.property && b.property && a.property.name > b.property.name, 1],\n      [() => a.property && b.property && a.property.name < b.property.name, -1],\n      [() => a.operator && !b.property, -1],\n      [() => !a.operator && b.operator, +1],\n      [() => a.operator && b.operator && a.operator.name > b.operator.name, 1],\n      [() => a.operator && b.operator && a.operator.name < b.operator.name, -1],\n    ] as [() => boolean, number][]\n  ).reduce(\n    (acc, [test, response]) => (acc !== null || !test() ? acc : response),\n    0, // we consider them 'equal' (don't change the order)\n  );\n}\n\n/**\n * Should turn EQ into IN, but also NOT_LT into GTE etc. ???\n * And then also translate the value from an array into a single value sometimes\n * or the other way around?\n */\nfunction normalizeRowFilter(rowFilter: ParseTreeFilter) {\n  const retVal = { ...rowFilter };\n  if (rowFilter.operator.name === \"EQ\") {\n    // translate EQ to IN\n    retVal.operator = { ...rowFilter.operator, name: \"IN\", multiValued: true };\n    retVal.value = [rowFilter.value];\n  } else if (rowFilter.invertOperator) {\n    // translate some inverted operators to their non-inverted equivalent\n    const invertedOperatorMap: { [key: string]: string } = {\n      LT: \"GTE\",\n      GT: \"LTE\",\n      LTE: \"GT\",\n      GTE: \"LT\",\n    };\n\n    const invertedOperatorName = invertedOperatorMap[rowFilter.operator.name];\n    if (invertedOperatorName) {\n      retVal.operator = { ...rowFilter.operator, name: invertedOperatorName };\n      retVal.invertOperator = false;\n    }\n  }\n\n  return retVal;\n}\n\n/**\n * Should turn OMIT into the opposite to list exactly all the fields required fields.\n */\nfunction normalizeColumnFilter(columnFilter: ParseTreeFilter) {\n  const retVal = { ...columnFilter };\n  // if (columnFilter.operator.name === 'EQ') {\n  //   // translate EQ to IN\n  //   retVal.operator = { ...columnFilter.operator, name: 'IN', multiValued: true };\n  //   retVal.value = [ columnFilter.value ];\n  // } else if (columnFilter.invertOperator) {\n  //   // translate some inverted operators to their non-inverted equivalent\n  //   const invertedOperatorMap = {\n  //     'LT': 'GTE',\n  //     'GT': 'LTE',\n  //     'LTE': 'GT',\n  //     'GTE': 'LT',\n  //   }\n\n  //   const invertedOperatorName = invertedOperatorMap[columnFilter.operator.name];\n  //   if (invertedOperatorName) {\n  //     retVal.operator = { ...columnFilter.operator, name: invertedOperatorName };\n  //     retVal.invertOperator = false;\n  //   }\n  // }\n\n  return retVal;\n}\n\n/**\n * Makes sure the input string is propery converted to an actual JSON type.\n *\n * So convertValue('1', 'string') => '1'\n * and convertValue('1', 'number') => 1.0\n * and convertValue('1.3', 'integer') => parseInt exception\n *\n * convertValue('true', 'string') => 'true'\n * convertValue('true', 'boolean') => true\n * convertValue('false', 'boolean') => false\n * convertValue('hello', 'boolean') => true\n */\nfunction convertValue(value: string, type = \"string\") {\n  if (type === \"boolean\") {\n    return value !== \"false\";\n  }\n  if (type === \"integer\") {\n    return parseInt(value, 10);\n  }\n  if (type === \"number\") {\n    return Number(value);\n  }\n  return value;\n}\n\nfunction translateValueType(\n  property: ParseTreeProperty | { type?: never } = {},\n  operator: ParseTreeOperator | { type?: never } = {},\n  value,\n) {\n  // console.log('translateValueType(', property, operator, value, ')');\n  return convertValue(value, operator.type || property.type);\n}\n\n/** should be smart enough to properly return an array or a single property\n * based on whether it is a multivalued property and if the operator is single- or multi-valued\n *\n */\nfunction produceValue(\n  property: ParseTreeProperty | { multiValued?: never; type?: never } = {},\n  operator: ParseTreeOperator | { multiValued?: never; type?: never } = {},\n  escapedUnparsedValue: string,\n) {\n  const value = decodeURIComponent(escapedUnparsedValue.replace(/\\\\+/g, \" \"));\n  // console.log('[produceValue]', JSON.stringify(property), JSON.stringify(operator), escapedUnparsedValue);\n  const safeProperty = property || null;\n  const safeOperator = operator || null;\n  const inputShouldBeArray = safeProperty.multiValued || safeOperator.multiValued;\n  const outputShouldBeArray = inputShouldBeArray;\n  const parsedValue = inputShouldBeArray ? value.split(\",\") : value;\n  if (outputShouldBeArray) {\n    return Array.isArray(parsedValue)\n      ? parsedValue.map((v) => translateValueType(safeProperty, safeOperator, v))\n      : [translateValueType(safeProperty, safeOperator, parsedValue)];\n  }\n  return translateValueType(\n    safeProperty,\n    safeOperator,\n    Array.isArray(parsedValue) ? value : parsedValue,\n  );\n}\n\n/**\n * Retunrs the 2 arrays merged, based on a compareFunction that can tell us\n * whether 2 elements are considered equivalent or not.\n * Elements will always be taken from the first array, unless the element is\n * missing from the first array, in which case the element from the second array\n * will be returned.\n *\n * Example:\n *  * mergeArrays([1, 2], [2, 3]) => [1, 2, 3]\n *  * mergeArrays(\n *      [ { id: 1, comment: 'one' }, { id: 2, comment: 'two' } ],\n *      [ { id: 2, comment: 'TWO' }, { id: 3, comment: 'THREE' } ],\n *      (a,b) => a.id === b.id\n *    ) => [ { id: 1, comment: 'one' }, { id: 2, comment: 'two' }, { id: 3, comment: 'THREE' } ],\n *\n * @param {*} mainArray the array whose results will be returned\n * @param {*} backupArray the array whose elements will be added to the output ONLY when mainArray\n *                        doesn't contain that element\n * @param {*} compareFunction\n */\nfunction mergeArrays(\n  mainArray: any[],\n  backupArray: any[],\n  compareFunction: (a, b) => boolean = (a, b) => a === b,\n) {\n  const retVal = backupArray.reduce((acc, cur) => {\n    // only add the element from the default tree if none like it is present\n    const found = acc.findIndex((item) => compareFunction(item, cur)) >= 0;\n    return found ? acc : [...acc, cur];\n  }, mainArray);\n  // console.debug('[mergeArrays]', mainArray, backupArray, compareFunction, retVal);\n  return retVal;\n}\n\n/**\n * Will take the parseTree and return a new one where all the missing defaults\n * as specified in the second argument will be applied.\n *\n * @param {*} flatParseTree\n * @param {*} defaultParseTree\n * @returns\n */\nfunction parsedQueryStringToParseTreeWithDefaults(\n  flatParseTree: { [k: string]: object },\n  defaultParseTree: { [k: string]: any } = {},\n) {\n  //   console.log(`[parsedQueryStringToParseTreeWithDefaults] current parseTree:\n  // ${JSON.stringify(parseTree, null, 2)}\n  // default parseTree:\n  // ${JSON.stringify(defaultParseTree, null, 2)}`\n  //   );\n  const typeToSubTreeNameMap = {\n    ROW_FILTER: \"rowFilters\",\n    COLUMN_FILTER: \"columnFilters\",\n    LIST_CONTROL: \"listControl\",\n  };\n\n  // as a first step, simply copy all the defaults\n  const retVal = { ...defaultParseTree };\n  // then for each subtree, take everything from parsed, and add all defaults that are missing\n  Object.entries(typeToSubTreeNameMap).forEach(([type, subTreeName]) => {\n    const flatParseTreeOfCurrentType = Object.values(flatParseTree)\n      .filter((item) => (item as any).type === type)\n      .map((item) => {\n        const { type: _itemType, ...restOfTheItem } = item as any;\n        return restOfTheItem;\n      });\n    retVal[subTreeName] = mergeArrays(\n      flatParseTreeOfCurrentType,\n      defaultParseTree[subTreeName],\n      (a, b) => a.property === b.property && a.operator.name === b.operator.name,\n    );\n  });\n\n  return retVal;\n}\n\n/**\n *\n * @param {*} parseTreeObject can contain property and operator objects that define what to expect\n *                            behind the = sign\n * @param {*} typeDescription something like boolean[] or string or integer[] to express single\n *                            values or an array of a certain data type\n *\n */\nfunction checkType(\n  { property, operator }: { property: ParseTreeProperty; operator: ParseTreeOperator },\n  typeDescription: string,\n) {\n  const safeProperty = property || {};\n  const safeOperator = operator || {};\n  const parseTreeExpectsArray = safeProperty.multiValued || safeOperator.multiValued;\n  const parseTreeExpectedType = operator.type || property.type;\n\n  const parsedTypeDescription = typeDescription.split(\"[\");\n  const describedType = parsedTypeDescription[0];\n  const describedIsArray = !!parsedTypeDescription[1];\n\n  const typesMatch = describedType === parseTreeExpectedType;\n  const isArrayMatches = parseTreeExpectsArray === describedIsArray;\n\n  // console.log('[checkType]', property, operator, 'returns', typesMatch && isArrayMatches);\n\n  return typesMatch && isArrayMatches;\n}\n\n/**\n * Given a parseTreeObject (which can contain property and operator objects that define what to\n * expect behind the = sign)\n * will generate a string like 'boolean', 'integer[]', etc.\n *\n * Should probably later on also be smart enough (and thus schema-aware) to\n * return if it's expecting an enum on the right side, so that we can properly parse\n * if an inexistent value is given to an enum field filter.\n *\n * @param {*} parseTreeObject can contain property and operator objects that define\n *                            what to expect behind the = sign\n * @returns a string expressing the expected type like 'boolean', 'integer[]', ...\n */\nfunction generateExpectedType({\n  property,\n  operator,\n}: {\n  property: ParseTreeProperty;\n  operator: ParseTreeOperator;\n}) {\n  const safeProperty = property || {};\n  const safeOperator = operator || {};\n  const parseTreeExpectsArray = safeProperty.multiValued || safeOperator.multiValued;\n  const parseTreeExpectedType = operator.type || property.type;\n\n  return `${parseTreeExpectedType}${parseTreeExpectsArray ? \"[]\" : \"\"}`;\n}\n\n/**\n * This grammar should generate a parseTree that is non-flat, so different 'types' of filters\n * are put together in one subtree.\n * This would help in comparing whether 1 url is a subset of another because the 'special'\n * query params can be ignored (like limit, offset, orderBy, ...)\n * The parseTree used to be a simple array, but we want to split it up further like this:\n * parseTree: {\n *  propertyFilters: [] // key_IN/firstName_MATCHES/labels_OVERLAPS/...\n *  // do we need to split defaultFilters and customFilters, because customFilters can be anything\n *  // (I mean hard to know whether a customfilter is a propertyFilter or a resultMapping filter\n *  // unless that is part of the config)?\n *  propertyMapping: [] // OMIT/PROPERTYNAME_IN but also expansion could belong here ????\n *  listControl: [] // _LIST_META_INCLUDE=count / _LIST_LIMIT / _LIST_ORDER_BY / _LIST_ORDER_DESCENDING etc.\n *                  // other ideas\n *                  // _LIST_RESPONSE_STYLE: single/results/line-by-line GET /persons/<key> === /persons?key=<key> === /persons?keyIn=<key>\n *                  // _LIST_LISTEN=true (to keep connected and listening for changes on the list later on can only be combined with line-by-line???)\n * }\n *\n * WHAT WITH EXPAND=NONE,FULL,... is this listControl, or propertyMapping, or yet another category?\n *\n * Also: all propertyFilters should start with the name of a property and then some operator,\n * all other filters should start with and underscore to distinguish them from the propertyFilters\n * all listControl filters should start with _LIST_ (like _LIST_LIMIT, _LIST_ORDER_BY, ...)\n * and all propertyMappings should start with _MAP_ (like _MAP_E)\n *\n * Generates a peggy grammar parser based on the flattened schema and the sriConfiog object\n * that can parse the entire query string (ideally it works whether characters are encoded or not).\n *\n * But for now we could assume that all characters in the string are escaped\n * (by escaping the defined propertyNames first, especially maybe the $ characters)?\n *\n * Currently the parser assumes that all the default filters are allowed on any property,\n * but the way sri4node config currently works is: if defaultFilter is not specified,\n * the defaultFilters won't work on that property\n * (although I think the default filters should ideally always work, because that's\n * what the sri-query spec explains).\n *\n * @param {Array<string>} existingProperties: a list of allowed properties\n * @param {TSriConfig} sriConfig\n * @returns {String} the peggy grammar\n */\nfunction generateNonFlatQueryStringParserGrammar(\n  flattenedJsonSchema: FlattenedJsonSchema,\n  sriConfigDefaults?: TSriConfig,\n  sriConfigResourceDefinition?: TResourceDefinition,\n) {\n  const allPropertyNamesSorted = Object.keys(flattenedJsonSchema).sort();\n  const allPropertyNamesSortedInReverse = Object.keys(flattenedJsonSchema).sort().reverse();\n\n  /**\n   * If not overwritten by actual query params, this should be the default parseTree\n   * of an empty url.\n   */\n  const defaultParseTree = {\n    // key_IN/firstName_MATCHES/labels_OVERLAPS/...\n    // * related to ROWS: propertyFilters/listFilters/listConditions/rowFilters\n    rowFilters: [], // empty by default, entirely controlled by the url params\n    // do we need to split defaultFilters and customFilters, because customFilters can be anything\n    // (I mean hard to know whether a customfilter is a propertyFilter or a resultMapping filter\n    // unless that is part of the config)?\n\n    // * related to COLUMNS: resourceConditions/resourceMapping/columnFilters (EXPANSION also part of this I guess??)\n    // if we call it columnFilters, can we assume sri4node's configuration complete enough to\n    // know which expansions are possible? Because in that case any expansion of related resources\n    // can be a case of propertyName in (where the expanded ones will start with $$)\n    // That would make it very generic. I guess it should be deductible from the config,\n    // but not 100% sure how (I guess we'd have to parse the regex behind the href, which is annoyingly indirect)\n    // Better would be to be able to have it specified specifically in the config, and that the\n    // JSON-schema would be deducted from this.\n    // But that would make the current configs kind of invalid? Not really, because most will\n    // be using the schemaUtils functions to generate the schema, so if we'd rewrite some of these\n    // functions it could be done + we can add our own properties in the json schema next to\n    // type & description.\n    // for example: if something is a 'foreign key' to another resource in the same API, we could\n    // create JSON schema like this (I surrouned our 'own' JSON schema meta-data with _)\n    // \"parent\": {\n    //             \"type\": \"object\",\n    //             \"description\": \"a permalink to the parent. either another activity or the plan\",\n    //             \"_references_type_\": [ '/llinkid/activityplanning/activity', '/llinkid/activityplanning/activityplan' ],\n    //             \"properties\": {\n    //               \"href\": {\n    //                 \"type\": \"string\",\n    //                 \"pattern\": \"^/[a-zA-Z/]+/[-0-9a-f].*$\"\n    //               }\n    //             }\n    columnFilters: [\n      // expand=SUMMARY should be translated to PROPERTYNAME_IN with fewer properties, omit is the same (pick could be a good antonym for omit, also used by typescript)\n      // (but do we know from the config what these properties are???)\n      {\n        operator: { name: \"RESOURCE_PROPERTYNAME_IN\", type: \"string\", multiValued: true },\n        value: allPropertyNamesSorted,\n      }, // not count\n      // OR\n      // { metaProperty: 'RESOURCE_PROPERTYNAME', operator: 'IN', value: ${allPropertyNamesSortedInReverse} }, // not count\n    ], // OMIT/PROPERTYNAME_IN but also expansion could belong here ????\n    listControl: [\n      // $$includeCount=false\n      {\n        operator: { name: \"LIST_META_PROPERTYNAME_IN\", type: \"string\", multiValued: true },\n        value: [\"created\", \"modified\", \"schema\"],\n      }, // not count\n      // a more generic LIST_INCLUDE thing (not limited to the $$meta section) would partly\n      // solve the default 'expand=FULL' issue, otherwise this would need to be yet another operator\n      {\n        operator: { name: \"LIST_PROPERTYNAME_IN\", type: \"string\", multiValued: true },\n        value: [\"$$meta.created\", \"$$meta.modified\", \"results[*].href\", \"results[*].$$expanded\"],\n      }, // not count\n      // OR\n      // { metaProperty: 'LIST_PROPERTYNAME', operator: 'IN', value: value: ['$$meta.created', '$$meta.modified', 'results[*].href', 'results[*].$$expanded'] }, // not count\n\n      {\n        operator: { name: \"LIST_LIMIT\", type: \"integer\", multiValued: false },\n        value:\n          sriConfigDefaults?.defaultlimit ||\n          (sriConfigResourceDefinition?.maxlimit\n            ? Math.min(30, sriConfigResourceDefinition.maxlimit)\n            : 30),\n      }, // not count\n      {\n        operator: { name: \"LIST_ORDER_BY\", type: \"string\", multiValued: true },\n        value: [\"$$meta.created\", \"key\"],\n      },\n      {\n        operator: { name: \"LIST_ORDER_DESCENDING\", type: \"boolean\", multiValued: false },\n        value: false,\n      },\n    ], // _LIST_META_INCLUDE=count/_LIST_LIMIT/_LIST_ORDER_BY/_LIST_ORDER_DESCENDING etc.\n  };\n\n  // const allPropertyNamesSortedInReverse = Object.keys(flattenedJsonSchema).sort().reverse();\n  const grammar = `\n    { //////// START OF JAVASCRIPT FUNCTIONS BLOCK ////////\n      // everything that is not overwritten will be set to the default\n      const defaultParseTree = ${JSON.stringify(defaultParseTree, null, 2)};\n\n      const flattenedJsonSchema = ${JSON.stringify(flattenedJsonSchema, null, 2)};\n\n      // Simply putting these functions in here by adding \\${functionName.toString()}\n      // doesn't work well with typescript because then I get the compiled version\n      // which might have typescript specific dependencies that will then not be available\n      // when actually running the parser.\n      // So we have to pass them on every call to parse, in the options object\n      const {\n        parseTreeSortFunction,\n        normalizeRowFilter,\n        normalizeColumnFilter,\n        convertValue,\n        translateValueType,\n        produceValue,\n        mergeArrays,\n        parsedQueryStringToParseTreeWithDefaults,\n        checkType,\n        generateExpectedType,\n      } = options;\n\n    } //////// END OF JAVASCRIPT FUNCTIONS BLOCK ////////\n\n\n    ParsedQueryStringWithDefaultsAppliedAndNormalizedAndSorted = pqs:ParsedQueryStringWithDefaultsApplied {\n      let retVal = {\n        ...pqs,\n        rowFilters: pqs.rowFilters.map((rowFilter) => normalizeRowFilter(rowFilter)).sort(parseTreeSortFunction),\n        columnFilters: pqs.columnFilters.map((rowFilter) => normalizeColumnFilter(rowFilter)).sort(parseTreeSortFunction),\n        listControl: [ ...pqs.listControl ].sort(parseTreeSortFunction),\n      };\n\n      return retVal;\n    }\n\n\n    ParsedQueryStringWithDefaultsApplied = qs:QueryString {\n      return parsedQueryStringToParseTreeWithDefaults(qs, defaultParseTree);\n    }\n\n    QueryString\n      = p1:QueryStringPart p23etc:( ( \"&\" part:QueryStringPart { return part } )* )\n        {\n          return [p1, ...p23etc]\n        }\n      / \"\" { return [] }\n\n    QueryStringPart\n      = fn:RowFilter \"=\"\n        et:( \"\" { return generateExpectedType(fn) })\n        v:(\n            v2:(\n                ( & { return et === 'integer[]' } @IntegerArray )\n              / ( & { return et === 'integer'   } @IntegerValue )\n              / ( & { return et === 'number[]'  } @NumberArray )\n              / ( & { return et === 'number'    } @NumberValue )\n              / ( & { return et === 'boolean[]' } @BooleanArray )\n              / ( & { return et === 'boolean'   } @BooleanValue )\n              / ( & { return et === 'string[]'  } @StringArray )\n              / ( & { return et === 'string'    } @StringValue )\n            ) {\n              const { enum: enumValues, pattern, minLength, maxLength, multipleOf, minimum, maximum, exclusiveMinimum, exclusiveMaximum } = flattenedJsonSchema[fn.property.name];\n              const regexp = pattern ? RegExp(pattern) : null;\n\n              function doCheck(value, isInvalidFunction, msg) {\n                if (Array.isArray(value)) {\n                  value\n                    .filter(isInvalidFunction)\n                    .forEach((e) => doCheck(e, isInvalidFunction, msg));\n                } else {\n                  if (isInvalidFunction(value)) {\n                    expected(msg);\n                  }\n                }\n              }\n\n              if (minLength) {\n                doCheck(v2, (e) => ('' + e).length < minLength, 'a value having at least ' + minLength + ' characters');\n              }\n              if (maxLength) {\n                doCheck(v2, (e) => ('' + e).length > maxLength, 'a value having at most ' + maxLength + ' characters');\n              }\n              // multipleOf, minimum, maximum, exclusiveMinimum, exclusiveMaximum\n              if ( et.includes('integer') || et.includes('number') ) {\n                if ( multipleOf ) {\n                  doCheck(v2, (e) => e % multipleOf !== 0, 'a multiple of ' + multipleOf);\n                }\n                if (minimum) {\n                  doCheck(v2, (e) => e < minimum, 'a value that is at least ' + minimum);\n                }\n                if (exclusiveMinimum) {\n                  doCheck(v2, (e) => e <= exclusiveMinimum, 'a value that is more than ' + exclusiveMinimum);\n                }\n                if (maximum) {\n                  doCheck(v2, (e) => e > maximum, 'a value that is at most ' + maximum);\n                }\n                if (exclusiveMaximum) {\n                  doCheck(v2, (e) => e >= exclusiveMaximum, 'a value that is less than ' + exclusiveMaximum);\n                }\n              }\n              if (enumValues) {\n                const enumValuesSet = new Set(enumValues);\n                doCheck(v2, (e) => !enumValuesSet.has(e), 'one of ' + enumValues.join());\n              }\n              if (regexp) {\n                doCheck(v2, (e) => !regexp.test(e), 'a value matching the regular expression ' + pattern);\n              }\n\n              return v2;\n            }\n        )\n        {\n          // console.log(\"        -------- RowFilter value of type\", et, v);\n          // First check if the format is correct and throw a parse error otherwise (with error(...) or expected(...))!!!\n\n          return { type: 'ROW_FILTER', ...fn, value: v }\n        }\n      // / ( fn:RowFilter \"=\" v:UnparsedValue {\n      //     console.log(\"        -------- RowFilter UnparsedValue\", v);\n      //     return { type: 'ROW_FILTER', ...fn, value: produceValue(fn.property, fn.operator, v) }\n      //   } )\n      / ( fn:ColumnFilter \"=\" v:UnparsedValue {\n          return { type: 'COLUMN_FILTER', ...fn, value: produceValue(fn.property, fn.operator, v) }\n        } )\n      / ( lcp:ListControlParameter \"=\" v:UnparsedValue {\n          return { type: 'LIST_CONTROL', ...lcp, value: produceValue(lcp.property, lcp.operator, v) } \n        } )\n\n\n    // Property name without an operator is considered to mean 'equals' (and thus translated to IN)\n    RowFilter\n      = p:Property ne:OperatorNegator ? op:RowFilterOperator ? ci:CaseInsensitive ? {\n          return { type: 'ROW_FILTER', property: p, operator: op || { name: 'EQ', multiValued: false }, invertOperator: !!ne, caseInsensitive: ci === null ? true : ci /*, expectedValue: produceExpectedValue(property, op)*/ };\n        }\n      / p:Property cs:OperatorCaseSensitive ? ne:OperatorNegator ? op:RowFilterOperator ? {\n          return { type: 'ROW_FILTER', property: p, operator: op || { name: 'EQ', multiValued: false }, invertOperator: !!ne, caseInsensitive: !cs /*, expectedValue: produceExpectedValue(property, op)*/ };\n        }\n\n    ColumnFilter\n      = op:ColumnFilterOperator { return { type: 'COLUMN_FILTER', operator: op } }\n        // \"=\" v:UnparsedValue\n\n    ColumnFilterOperator = ( \"omit\" / \"_COLUMN_OMIT\" ) { return { name: \"COLUMN_OMIT\", type: \"string\", multiValued: true } }\n\n    ListControlParameter\n      = op:ListControlOperator { return { operator: op } }\n      // translate $$includeCount to LIST_INCLUDE with property value $$meta.count (${encodeURIComponent(\"$$\")}meta.count)\n      / \"%24%24includeCount\" { return { operator: op } }\n\n\n    OperatorCaseSensitive = \"CaseSensitive\" { return true }\n\n    OperatorNegator\n      = \"_NOT\" / \"Not\"\n\n    RowFilterOperator = MultiValuedRowFilterOperator / SingleValuedRowFilterOperator\n\n    MultiValuedRowFilterOperator = operatorName:(\n        ( \"_IN\"i / \"In\" ) { return 'IN' }\n        / ( \"_OVERLAPS\"i / \"Overlaps\" ) { return 'OVERLAPS' }\n        / ( \"_CONTAINS\"i / \"Contains\" ) { return 'CONTAINS' }\n        // ( / \"_NOT\"i / \"Not\" ) { return 'NOT' }\n      ) { return { name: operatorName, multiValued: true } }\n\n    SingleValuedRowFilterOperator = operatorName:(\n        ( \"_GTE\"i / \"GreaterOrEqual\" ) { return 'GTE' }\n        / ( \"_LTE\"i / \"LessOrEqual\" ) { return 'LTE' }\n        / ( \"_GT\"i / \"Greater\" ) { return 'GT' }\n        / ( \"_LT\"i / \"Less\" ) { return 'LT' }\n        / ( \"_LIKE\"i / \"Like\" / \"Matches\" ) { return 'LIKE' }\n        // ( / \"_NOT\" / \"Not\" ) { return 'NOT' }\n      ) { return { name: operatorName, multiValued: false } }\n\n    CaseInsensitive = \"_I\" { return true }\n\n    UnparsedValue = $([^&]*) { return decodeURIComponent(text().replace(/\\\\+/g, ' ')) }\n\n\n    // TODO: make sure we can properly parse an encoded value,\n    // so we can put the intelligence of understanding arrays (or arrays of arrays with parentheses)\n    // in here for example!\n    MultiValue = sv1:(SingleValue) v23etc:( CommmaCharacter sv2:SingleValue { return sv2 } )*\n      // { return [v1, ...v23etc] }\n\n    StringArray\n      = result:(\n          (LeftParenthesis @( ( @StringValue CommmaCharacter?)* ) RightParenthesis )\n          /\n            @( ( @StringValue CommmaCharacter? )*)\n        )\n        { console.log(\"TRANSLATED STRING ARRAY TO\", JSON.stringify(result)); return result }\n\n    IntegerArray\n      = LeftParenthesis? result:( ( v:IntegerValue CommmaCharacter ? { return v } )* ) RightParenthesis?\n        { return result }\n\n    NumberArray\n      = LeftParenthesis? result:( ( v:NumberValue CommmaCharacter ? { return v } )*) RightParenthesis?\n        { return result }\n\n    BooleanArray\n      = LeftParenthesis? result:( ( v:BooleanValue CommmaCharacter ? { return v } )*) RightParenthesis?\n        { return result }\n\n    SingleValue = $( SingleValueCharacter* )\n\n    SingleValueCharacter = !(CommmaCharacter / '&') (\n         SpaceCharacter / PercentEncodedCharacter / [^&,]\n      )\n\n    // only allow old-school notation like limit or expand when no such properties exist on the resource !!!\n    ListControlOperator = \n      ( \"_LIST_LIMIT\" ${!allPropertyNamesSorted.includes(\"limit\") ? '/ \"limit\"' : \"\"} ) { return { name: 'LIST_LIMIT', type: 'integer', multiValued: false } }\n      / ( \"_EXPANSION\" ${!allPropertyNamesSorted.includes(\"expand\") ? '/ \"expand\"' : \"\"} ) { return { name: 'EXPANSION', type: 'string', multiValued: true } }\n      / ( \"_LIST_OFFSET\" ${!allPropertyNamesSorted.includes(\"offset\") ? '/ \"offset\"' : \"\"} ) { return { name: 'LIST_OFFSET', type: 'integer', multiValued: false } }\n      / ( \"_LIST_KEYOFFSET\" ${!allPropertyNamesSorted.includes(\"keyOffset\") ? '/ \"keyOffset\"' : \"\"} )  { return { name: 'LIST_KEY_OFFSET', type: 'string', multiValued: true } }\n      / ( \"_LIST_META_INCLUDE\" ${!allPropertyNamesSorted.includes(\"%24%24includeCount\") ? '/ \"%24%24includeCount\"' : \"\"} ) { return { name: 'LIST_META_INCLUDE_COUNT', type: 'boolean', multiValued: false } }\n      // _LIST_PROPERTY_EXCLUDE or OMIT ??? This could replace expand=none and list_meta_include (to include or exclude the count)\n      // the frustrating thing is we want to exclude the count by default and include the expanded results by default\n      // of course, if we would change that default (not expanding by default) we wouldn't have a problem\n      // / ( \"_LIST_PROPERTY_EXCLUDE\" ${!allPropertyNamesSorted.includes(\"omit\") ? '/ \"omit\"' : \"\"} ) { return { name: 'LIST_PROPERTY_EXCLUDE', type: 'boolean', multiValued: false } }\n      / ( \"_LIST_ORDER_BY\" ${!allPropertyNamesSorted.includes(\"orderBy\") ? '/ \"orderBy\"' : \"\"} ) { return { name: 'LIST_ORDER_BY', type: 'string', multiValued: true } }\n      / ( \"_LIST_ORDER_DESCENDING\" ${!allPropertyNamesSorted.includes(\"descending\") ? '/ \"descending\"' : \"\"} ) { return { name: 'LIST_ORDER_DESCENDING', type: 'boolean', multiValued: false } }\n\n    // important to list the longest properties first (if a shorter property's name is the start of a longer property's name) !!!\n    // example: \"firstNameCapital\" / \"firstName\" / \"lastName\"\n    Property = ${allPropertyNamesSortedInReverse\n      .map((n) => {\n        const type = flattenedJsonSchema[n].type || \"string\";\n        return `p:\"${encodeURIComponent(n)}\" { return { name: '${decodeURIComponent(n)}', type: '${type}', multiValued: ${n.endsWith(\"[*]\")} } }`;\n      })\n      .join(\" / \")}\n\n    // 1 string element from what can potentially be an array\n    StringValue \"string\"\n      = $( ! Comma ! LeftParenthesis ! RightParenthesis\n          @( SpaceCharacter / BackslashEscapedCharacter / PercentEncodedCharacter / UnencodedCharacter )\n        )+\n\n    BooleanValue \"boolean (true or false)\"\n      = \"true\" { return true }\n      / \"false\" { return false }\n\n    IntegerValue \"integer\"\n      = $([0-9]+) { return parseInt(text()) }\n\n    NumberValue \"number\"\n      = $( [0-9]+ ( \".\" [0-9]+ )? ) { return Number(text()) }\n\n    UnencodedCharacter = ! \"%\" c:. { return c }\n\n    BackslashEscapedCharacter\n      = Backslash c:(PercentEncodedCharacter / UnencodedCharacter)\n        { return c }\n\n    PercentEncodedCharacter = c:$('%' [0-9A-F] [0-9A-F]) { return decodeURIComponent(c) }\n\n    Comma = c:( \"${encodeURIComponentStrict(\",\")}\" / \",\" ) { return ',' }\n\n    Dollar = c:( \"${encodeURIComponentStrict(\"$\")}\" / \"$\" ) { return '$' }\n\n    LeftParenthesis = c:( \"${encodeURIComponentStrict(\"(\")}\" / \"(\" ) { return '(' }\n\n    RightParenthesis = c:( \"${encodeURIComponentStrict(\")\")}\" / \")\" ) { return ')' }\n\n    LeftSquareBracket = c:( \"${encodeURIComponentStrict(\"[\")}\" / \"[\" ) { return '[' }\n\n    RightSquareBracket = c:( \"${encodeURIComponentStrict(\"]\")}\" / \"]\" ) { return ']' }\n\n    Backslash = c:( \"${encodeURIComponentStrict(\"\\\\\")}\" / \"\\\\\\\\\" ) { return '\\\\\\\\'; }\n\n    CommmaCharacter = ( \",\" / \"%2C\" ) { return ',' }\n\n    SpaceCharacter = ( \"+\" / \"%20\" / \" \" ) { return ' ' }\n\n  `;\n\n  // ${ allPropertyNamesSortedInReverse.map(n => `\"${n}\"`).join(' / ') }\n\n  return grammar;\n}\n\ninterface SriParser extends peggy.Parser {\n  origParse: typeof peggy.parser.parse;\n}\n\nfunction generateNonFlatQueryStringParser(\n  sriConfigDefaults?: TSriConfig,\n  sriConfigResourceDefinition?: TResourceDefinition,\n  allowedStartRules: string[] | undefined = undefined,\n): SriParser {\n  const grammar = generateNonFlatQueryStringParserGrammar(\n    flattenJsonSchema(sriConfigResourceDefinition?.schema || {}),\n    sriConfigDefaults,\n    sriConfigResourceDefinition,\n  );\n\n  const options = {\n    parseTreeSortFunction,\n    normalizeRowFilter,\n    normalizeColumnFilter,\n    convertValue,\n    translateValueType,\n    produceValue,\n    mergeArrays,\n    parsedQueryStringToParseTreeWithDefaults,\n    checkType,\n    generateExpectedType,\n    cache: true,\n  };\n\n  const pegConf = allowedStartRules\n    ? {\n        // Array of rules the parser will be allowed to start parsing from\n        // (default: the first rule in the grammar).\n        allowedStartRules,\n        options,\n        cache: true,\n      }\n    : {};\n  const parser = peggy.generate(grammar, pegConf);\n\n  // I don't really like this, but it works (I'd love to be able to put them on the global pegConf)\n  // requiring external libraries from inside the grammar is too cumbersome for what I'm using\n  // and putting these functions inside the grammar I would have to write them in plain javascript\n  // AND without any code completion (because they are inside a string)\n  // which also makes them hard to test...\n\n  // parser.origParse = parser.parse;\n  // parser.parse = (input:string, moreOptions:object = {}):ParseTree => parser.origParse(\n  //   input, { ...moreOptions, ...options },\n  // );\n  return {\n    ...parser,\n    origParse: parser.parse,\n    parse: (input: string, moreOptions: object = {}): ParseTree =>\n      parser.parse(input, { ...moreOptions, ...options }),\n  };\n}\n\nexport { SriParser, generateNonFlatQueryStringParserGrammar, generateNonFlatQueryStringParser };\n", "// copied from an existing npm module (https://github.com/yp-engineering/express-middleware-timer)\n// that has not been updated in a long time\n// Since we had some trouble making sure that the env variable was set on time\n// I copied it here and modified the code slightly to make sure that it is always on\n// Turning it off can be done by not calling instrument in the main code then,\n// if needed, based on some config option.\n\nconst OFF = false;\n\nlet instrumented = 0;\nfunction instrument(middleware, name) {\n  if (OFF) return middleware;\n\n  function bindWrapper(m, name) {\n    return function wrapper(req, res, next) {\n      const now = Date.now();\n      if (res._timer && res._timer.times) {\n        res._timer.times[name] = {\n          from_start: now - res._timer.start,\n          last: now - res._timer.last,\n        };\n        res._timer.last = now;\n      }\n      m(req, res, next);\n    };\n  }\n\n  if (typeof middleware === \"function\") {\n    const position = instrumented++;\n    name = name || middleware.name || \"anonymous middlware #\" + position;\n    return bindWrapper(middleware, name);\n  }\n\n  let itter = 0; // if named\n  return middleware.map(function (m) {\n    const position = instrumented++;\n    let newname;\n    if (name) {\n      newname = name + \" #\" + itter++;\n    }\n    newname = newname || m.name || \"anonymous middlware #\" + position;\n    return bindWrapper(m, newname);\n  });\n}\n\nfunction calculate(req, res) {\n  // sillyness to cleanup reporting\n  const report = {\n    request: { url: req.url, headers: req.headers },\n    timers: { startup: { from_start: 0 } },\n  };\n\n  const reportedTimers = res._timer.times;\n\n  function updateReport(timer) {\n    const reportNames = Object.keys(report.timers);\n    const lastReport = reportNames[reportNames.length - 1];\n\n    if (typeof timer === \"string\") {\n      report.timers[lastReport].took = reportedTimers[timer].last;\n      report.timers[lastReport].from_start = reportedTimers[timer].from_start;\n      report.timers[timer] = {};\n    } else {\n      const now = Date.now();\n      report.timers[lastReport].took = now - timer.last;\n      report.timers[lastReport].from_start = now - timer.start;\n    }\n  }\n\n  Object.keys(reportedTimers).forEach(function (timer) {\n    updateReport(timer);\n  });\n\n  updateReport(res._timer);\n  return report;\n}\n\nfunction report(req, res) {\n  if (OFF || !res._timer || !res._timer.times) return;\n\n  // report\n  console.log(\"------------------------------\");\n  console.dir(calculate(req, res));\n  console.log(\"------------------------------\");\n}\n\nfunction init(reporter) {\n  return function (req, res, next) {\n    if (OFF) return next();\n\n    const now = Date.now();\n    res._timer = {\n      start: now,\n      last: now,\n      times: {},\n    };\n\n    reporter = typeof reporter === \"function\" ? reporter : report;\n\n    res.on(\"finish\", function onResponseFinish() {\n      reporter(req, res);\n    });\n\n    next();\n  };\n}\n\nexport {\n  instrument,\n  init,\n  calculate,\n  // on: !OFF,\n  // off: OFF,\n};\n", "import _ from \"lodash\";\nimport pMap from \"p-map\";\nimport pEachSeries from \"p-each-series\";\nimport url from \"url\";\nimport JSONStream from \"JSONStream\";\nimport EventEmitter from \"events\";\nimport pEvent from \"p-event\";\nimport httpContext from \"express-http-context\";\nimport { IDatabase } from \"pg-promise\";\n\nimport { applyHooks } from \"./hooks\";\nimport { phaseSyncedSettle } from \"./phaseSyncedSettle\";\nimport {\n  debug,\n  startTransaction,\n  settleResultsToSriResults,\n  generateSriRequest,\n  createReadableStream,\n} from \"./common\";\nimport {\n  THttpMethod,\n  SriError,\n  TBatchHandlerRecord,\n  TResourceDefinition,\n  TSriRequest,\n  TSriBatchElement,\n  TSriBatchArray,\n  TSriResult,\n  TSriInternalUtils,\n  TSriRequestHandlerForBatch,\n  TSriRequestHandlerForPhaseSyncer,\n  TSriConfig,\n} from \"./typeDefinitions\";\n\nconst maxSubListLen = (a) =>\n  // this code works as long as a batch array contain either all objects or all (sub)arrays\n  // (which is required by batchOpertation, otherwise a 'batch.invalid.type.mix' error is sent)\n  a.reduce((max, e, _idx, arr) => {\n    if (Array.isArray(e)) {\n      return Math.max(maxSubListLen(e), max);\n    }\n    return Math.max(arr.length, max);\n  }, 0);\n\ntype TMatchedHref = {\n  path: string;\n  routeParams: any;\n  queryParams: any;\n  handler: TBatchHandlerRecord;\n};\n\n/**\n * Tries to find the proper record in the global batchHandlerMap\n * and then returns the handler found + some extras\n * like path, routeParams (example /resources/:id) and queryParams (?key=value)\n *\n * @param {String} href\n * @param {THttpMethod} verb: GET,PUT,PATCH,DELETE,POST\n * @returns an object of the form { path, routeParams, queryParams, handler: [path, verb, func, config, mapping, streaming, readOnly, isBatch] }\n */\nfunction matchHref(href: string, verb: THttpMethod): TMatchedHref {\n  if (!verb) {\n    console.log(`No VERB stated for ${href}.`);\n    throw new SriError({\n      status: 400,\n      errors: [{ code: \"no.verb\", msg: `No VERB stated for ${href}.` }],\n    });\n  }\n  const parsedUrl = url.parse(href, true);\n  const queryParams = parsedUrl.query;\n  const path = (parsedUrl.pathname || \"\").replace(/\\/$/, \"\"); // replace eventual trailing slash\n\n  const batchHandlerMap: NonNullable<TSriConfig[\"batchHandlerMap\"]> =\n    global.sri4node_configuration.batchHandlerMap;\n  const matches = batchHandlerMap[verb]\n    .map((handler) => ({ handler, match: handler.route.match(path) }))\n    .filter(({ match }) => match !== false);\n\n  if (matches.length > 1) {\n    console.log(\n      `WARNING: multiple handler functions match for batch request ${path}. Only first will be used. Check configuration.`,\n    );\n  } else if (matches.length === 0) {\n    throw new SriError({\n      status: 404,\n      errors: [{ code: \"no.matching.route\", msg: `No route found for ${verb} on ${path}.` }],\n    });\n  }\n\n  const { handler } = _.first(matches);\n  const routeParams = _.first(matches).match;\n\n  return {\n    handler,\n    path,\n    routeParams,\n    queryParams,\n  };\n}\n\n/**\n * This will add a 'match' property to every batch element that already contains\n * which handler will be needed for each operation (and throws SriErrors if necessary)\n *\n * Used to detect early (without executing a lot of stuff on the DB first)\n * if a batch is going to fail anyway along the way because of invalid urls etc.\n *\n * @param {TSriRequest} req\n */\nfunction matchBatch(req) {\n  // Body of request is an array of objects with 'href', 'verb' and 'body' (see sri spec)\n  const reqBody = req.body;\n  const batchBase = req.path.split(\"/batch\")[0];\n\n  if (!Array.isArray(reqBody)) {\n    throw new SriError({\n      status: 400,\n      errors: [\n        {\n          code: \"batch.body.invalid\",\n          msg: \"Batch body should be JSON array.\",\n          body: reqBody,\n        },\n      ],\n    });\n  }\n\n  const handleBatchForMatchBatch = (batch) => {\n    if (batch.every((element) => Array.isArray(element))) {\n      batch.forEach(handleBatchForMatchBatch);\n    } else if (batch.every((element) => typeof element === \"object\" && !Array.isArray(element))) {\n      batch.forEach((element) => {\n        const match = matchHref(element.href, element.verb);\n\n        if (match.handler.isBatch === true) {\n          throw new SriError({\n            status: 400,\n            errors: [\n              {\n                code: \"batch.not.allowed.in.batch\",\n                msg: \"Nested /batch requests are not allowed, use 1 batch with sublists inside the batch JSON.\",\n              },\n            ],\n          });\n        }\n\n        // only allow batch operations within the same resource\n        // (will be extended later with 'boundaries')\n        if (!match.path?.startsWith(batchBase)) {\n          throw new SriError({\n            status: 400,\n            errors: [\n              {\n                code: \"href.across.boundary\",\n                msg: \"Only requests within (sub) path of /batch request are allowed.\",\n              },\n            ],\n          });\n        }\n\n        if (match.queryParams.dryRun === \"true\") {\n          throw new SriError({\n            status: 400,\n            errors: [\n              {\n                code: \"dry.run.not.allowed.in.batch\",\n                msg: \"The dryRun query parameter is only allowed for the batch url itself (/batch?dryRun=true), not for hrefs inside a batch request.\",\n              },\n            ],\n          });\n        }\n        element.match = match;\n      });\n    } else {\n      throw new SriError({\n        status: 400,\n        errors: [\n          {\n            code: \"batch.invalid.type.mix\",\n            msg: \"A batch array should contain either all objects or all (sub)arrays.\",\n          },\n        ],\n      });\n    }\n  };\n  handleBatchForMatchBatch(reqBody);\n}\n\nconst batchOperation: TSriRequestHandlerForBatch = async function batchOperation(\n  sriRequest,\n  internalUtils,\n): Promise<TSriResult> {\n  const reqBody: Array<TSriBatchElement> = (sriRequest.body as Array<TSriBatchElement>) || [];\n  const batchConcurrency = Math.min(\n    maxSubListLen(reqBody),\n    global.sri4node_configuration.batchConcurrency,\n  );\n  global.overloadProtection.startPipeline(batchConcurrency);\n  try {\n    let batchFailed = false;\n\n    const handleBatchInBatchOperation = async (batch: Array<TSriBatchElement>, tx) => {\n      if (batch.every((element) => Array.isArray(element))) {\n        debug(\n          \"batch\",\n          \"\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n        );\n        debug(\"batch\", \"| Handling batch list\");\n        debug(\n          \"batch\",\n          \"\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n        );\n        return pMap(\n          batch as unknown as Array<Array<TSriBatchElement>>,\n          async (element: Array<TSriBatchElement>) => {\n            const { tx: tx1, resolveTx, rejectTx } = await startTransaction(tx);\n            const result = await handleBatchInBatchOperation(element, tx1);\n            if (result.every((e) => e.status < 300)) {\n              await resolveTx();\n            } else {\n              await rejectTx();\n            }\n            return result;\n          },\n          { concurrency: 1 },\n        );\n      }\n\n      if (batch.every((element) => typeof element === \"object\" && !Array.isArray(element))) {\n        if (!batchFailed) {\n          const batchJobs: Array<\n            [\n              TSriRequestHandlerForPhaseSyncer,\n              [IDatabase<unknown>, TSriRequest, TResourceDefinition, TSriInternalUtils],\n            ]\n          > = await pMap(\n            batch,\n            async (batchElement: TSriBatchElement) => {\n              if (!batchElement.verb) {\n                throw new SriError({\n                  status: 400,\n                  errors: [{ code: \"verb.missing\", msg: \"VERB is not specified.\" }],\n                });\n              }\n              debug(\n                \"batch\",\n                \"\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n              );\n              debug(\n                \"batch\",\n                `| Executing /batch section ${batchElement.verb} - ${batchElement.href} `,\n              );\n              debug(\n                \"batch\",\n                \"\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n              );\n\n              const { match } = batchElement;\n\n              const innerSriRequest = generateSriRequest(\n                undefined,\n                undefined,\n                undefined,\n                match,\n                sriRequest,\n                batchElement,\n              );\n\n              if (!match?.handler?.func) throw new Error(\"match.handler.func is undefined\");\n              // WARNING: using \"as TSriRequestHandlerForPhaseSyncer\" assumes that they will be correct without proper type checking!\n              return [\n                match.handler.func as TSriRequestHandlerForPhaseSyncer,\n                [tx, innerSriRequest, match.handler.mapping, internalUtils],\n              ];\n            },\n            { concurrency: 1 },\n          );\n\n          const results = settleResultsToSriResults(\n            await phaseSyncedSettle(batchJobs, {\n              concurrency: batchConcurrency,\n              beforePhaseHooks: global.sri4node_configuration.beforePhase,\n            }),\n          );\n\n          if (\n            results.some(\n              (e) => e instanceof SriError || e?.__proto__?.constructor?.name === \"SriError\",\n            ) &&\n            sriRequest.readOnly === false\n          ) {\n            batchFailed = true;\n          }\n\n          await pEachSeries(results, async (res: any, idx) => {\n            const [_tx, innerSriRequest, mapping, internalUtils]: [\n              IDatabase<unknown>,\n              TSriRequest,\n              TResourceDefinition,\n              TSriInternalUtils,\n            ] = batchJobs[idx][1];\n            if (!(res instanceof SriError || res?.__proto__?.constructor?.name === \"SriError\")) {\n              await applyHooks(\"transform response\", mapping.transformResponse || [], (f) =>\n                f(tx, innerSriRequest, res, internalUtils),\n              );\n            }\n          });\n          return results.map((res, idx) => {\n            const [_tx, innerSriRequest, _mapping] = batchJobs[idx][1];\n            res.href = innerSriRequest.originalUrl;\n            res.verb = innerSriRequest.httpMethod;\n            delete res.sriRequestID;\n            return res;\n          });\n        }\n        // TODO: generate correct error json with refering element in it!\n        return batch.map(\n          (_e) =>\n            new SriError({\n              status: 202,\n              errors: [\n                {\n                  code: \"cancelled\",\n                  msg: \"Request cancelled due to failure in accompanying request in batch.\",\n                },\n              ],\n            }),\n        );\n      }\n      batchFailed = true;\n      throw new SriError({\n        status: 400,\n        errors: [\n          {\n            code: \"batch.invalid.type.mix\",\n            msg: \"A batch array should contain either all objects or all (sub)arrays.\",\n          },\n        ],\n      });\n    };\n\n    const batchResults: any[] = _.flatten(\n      await handleBatchInBatchOperation(reqBody, sriRequest.dbT),\n    );\n\n    // spec: The HTTP status code of the response must be the highest values of the responses\n    // of the operations inside of the original batch, unless at least one 403 Forbidden response\n    // is present in the batch response, then the server MUST respond with 403 Forbidden.\n    const status = batchResults.some((e) => e.status === 403)\n      ? 403\n      : Math.max(200, ...batchResults.map((e) => e.status));\n\n    return { status, body: batchResults };\n  } finally {\n    global.overloadProtection.endPipeline(batchConcurrency);\n  }\n};\n\n/**\n * It will return an object only containing status and no body, because the body is being streamed.\n */\nconst batchOperationStreaming: TSriRequestHandlerForBatch = async (\n  sriRequest,\n  internalUtils,\n): Promise<TSriResult> => {\n  let keepAliveTimer: NodeJS.Timer | null = null;\n  const reqBody = sriRequest.body;\n  const batchConcurrency = global.overloadProtection.startPipeline(\n    Math.min(maxSubListLen(reqBody), global.sri4node_configuration.batchConcurrency),\n  );\n  try {\n    let batchFailed = false;\n\n    const handleBatchStreaming = async (batch: TSriBatchArray, tx: IDatabase<unknown>) => {\n      if (batch.every((element) => Array.isArray(element))) {\n        debug(\n          \"batch\",\n          \"\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n        );\n        debug(\"batch\", \"| Handling batch list\");\n        debug(\n          \"batch\",\n          \"\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n        );\n        return pMap(\n          batch,\n          async (element) => {\n            const result = await handleBatchStreaming(element as Array<TSriBatchElement>, tx);\n            return result;\n          },\n          { concurrency: 1 },\n        );\n      }\n      if (batch.every((element) => typeof element === \"object\" && !Array.isArray(element))) {\n        if (!batchFailed) {\n          const batchJobs: Array<\n            [\n              TSriRequestHandlerForPhaseSyncer,\n              [IDatabase<unknown>, TSriRequest, TResourceDefinition, TSriInternalUtils],\n            ]\n          > = await pMap(\n            batch,\n            async (batchElement: TSriBatchElement) => {\n              if (!batchElement.verb) {\n                throw new SriError({\n                  status: 400,\n                  errors: [{ code: \"verb.missing\", msg: \"VERB is not specified.\" }],\n                });\n              }\n              debug(\n                \"batch\",\n                \"\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n              );\n              debug(\n                \"batch\",\n                `| Executing /batch section ${batchElement.verb} - ${batchElement.href} `,\n              );\n              debug(\n                \"batch\",\n                \"\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\",\n              );\n\n              const { match } = batchElement;\n\n              if (match) {\n                const innerSriRequest: TSriRequest = {\n                  ...sriRequest,\n                  parentSriRequest: sriRequest,\n                  path: match.path || \"\",\n                  originalUrl: batchElement.href,\n                  query: match.queryParams,\n                  params: match.routeParams,\n                  httpMethod: batchElement.verb,\n                  body: batchElement.body,\n                  // element.body === undefined || _.isObject(element.body)\n                  //   ? element.body\n                  //   : JSON.parse(element.body),\n                  sriType: match.handler.mapping.type,\n                  isBatchPart: true,\n                  // context,\n                };\n                // const innerSriRequest:TSriRequest = generateSriRequest(\n                //   undefined, undefined, undefined, match, sriRequest, batchElement,\n                // );\n                if (!match?.handler?.func) throw new Error(\"match.handler.func is undefined\");\n                // WARNING: using \"as TSriRequestHandlerForPhaseSyncer\" assumes that they will be correct without proper type checking!\n                return [\n                  match.handler.func as TSriRequestHandlerForPhaseSyncer,\n                  [tx, innerSriRequest, match.handler.mapping, internalUtils],\n                ];\n              } else {\n                // should not occur\n                throw new SriError({\n                  status: 500,\n                  errors: [{ code: \"batch.missing.match\", msg: \"\" }],\n                });\n              }\n            },\n            { concurrency: 1 },\n          );\n\n          const results = settleResultsToSriResults(\n            await phaseSyncedSettle(batchJobs, {\n              concurrency: batchConcurrency,\n              beforePhaseHooks: global.sri4node_configuration.beforePhase,\n            }),\n          );\n\n          if (\n            results.some(\n              (e) => e instanceof SriError || e?.__proto__?.constructor?.name === \"SriError\",\n            )\n          ) {\n            batchFailed = true;\n          }\n\n          await pEachSeries(results, async (res: any, idx) => {\n            const [_tx, innerSriRequest, mapping] = batchJobs[idx][1];\n            if (!(res instanceof SriError || res?.__proto__?.constructor?.name === \"SriError\")) {\n              await applyHooks(\"transform response\", mapping.transformResponse || [], (f) =>\n                f(tx, innerSriRequest, res),\n              );\n            }\n          });\n          return results.map((res, idx) => {\n            const [_tx, innerSriRequest, _mapping] = batchJobs[idx][1];\n            res.href = innerSriRequest.originalUrl;\n            res.verb = innerSriRequest.httpMethod;\n            delete res.sriRequestID;\n            stream2.push(res);\n            return res.status;\n          });\n        }\n        //   const l = batch.map( e =>  new SriError({ status: 202, errors: [{ code: 'cancelled', msg: 'Request cancelled due to failure in accompanying request in batch.' }] })  );\n        // TODO: generate correct error json with refering element in it!\n        batch.forEach((_e) =>\n          stream2.push({\n            status: 202,\n            errors: [\n              {\n                code: \"cancelled\",\n                msg: \"Request cancelled due to failure in accompanying request in batch.\",\n              },\n            ],\n          }),\n        );\n        return 202;\n      }\n      batchFailed = true;\n      throw new SriError({\n        status: 400,\n        errors: [\n          {\n            code: \"batch.invalid.type.mix\",\n            msg: \"A batch array should contain either all objects or all (sub)arrays.\",\n          },\n        ],\n      });\n    };\n\n    if (sriRequest.setHeader) {\n      const reqId = httpContext.get(\"reqId\");\n      if (reqId !== undefined) {\n        sriRequest.setHeader(\"vsko-req-id\", reqId);\n      }\n      if (sriRequest.headers[\"request-server-timing\"]) {\n        sriRequest.setHeader(\"Trailer\", \"Server-Timing\");\n      }\n      sriRequest.setHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n    const stream2 = createReadableStream(true);\n    stream2.pipe(JSONStream.stringify()).pipe(sriRequest.outStream, { end: false });\n    keepAliveTimer = setInterval(() => {\n      sriRequest.outStream.write(\"\");\n    }, 15000);\n\n    const streamEndEmitter = new EventEmitter();\n    const streamDonePromise = pEvent(streamEndEmitter, \"done\");\n\n    stream2.on(\"end\", () => streamEndEmitter.emit(\"done\"));\n\n    sriRequest.outStream.write(\"{\");\n    sriRequest.outStream.write('\"results\":');\n\n    if (!sriRequest.dbT) throw new Error(\"sriRequest containsno db transaction to work on\");\n    const batchResults = _.flatten(\n      await handleBatchStreaming(reqBody as TSriBatchArray, sriRequest.dbT),\n    );\n\n    // spec: The HTTP status code of the response must be the highest values of the responses of the operations inside\n    // of the original batch, unless at least one 403 Forbidden response is present in the batch response, then the\n    // server MUST respond with 403 Forbidden.\n    const status = batchResults.some((e) => e === 403) ? 403 : Math.max(200, ...batchResults);\n\n    // signal end to JSON stream\n    stream2.push(null);\n    // Removed stream2.destroy() here. It was not needed and there was a potentially very bad interaction between\n    // stream2.push(null) and stream2.destroy(): in case enough data has been written on the stream, the destroy()\n    // call destroyed the stream before all data could have been consumed. In that case the 'end' event was never\n    // emitted (from the nodejs docs:\n    //      The 'end' event is emitted when there is no more data to be consumed from the stream.\n    //      The 'end' event will not be emitted unless the data is completely consumed.\n    // ) and so 'await streamDonePromise' was hanging forever.\n    //\n    // The newly added test case \"'big' batch_streaming\" seemed to generate enough response data to always\n    // trigger the bad interaction between push(null) and destroy().\n\n    // wait until JSON stream is ended\n    await streamDonePromise;\n\n    sriRequest.outStream.write(`, \"status\": ${status}`);\n    sriRequest.outStream.write(\"}\\n\");\n\n    return { status };\n  } finally {\n    if (keepAliveTimer !== null) {\n      clearInterval(keepAliveTimer);\n    }\n    global.overloadProtection.endPipeline(batchConcurrency);\n  }\n};\n\nexport { matchHref, matchBatch, batchOperation, batchOperationStreaming };\n", "import pMap from \"p-map\";\nimport { errorAsCode, debug, stringifyError, setServerTimingHdr } from \"./common\";\nimport { SriError, TSriRequest } from \"./typeDefinitions\";\n\nasync function applyHooks(\n  type: string,\n  functions: Array<(...any) => any> | undefined,\n  // Array<(expressRequest:Request, sriReq:TSriRequest, dbT:unknown) => void>\n  // | (sriRequest:TSriRequest) => void,\n  // applyFun: (fun:(dbT:any, sriReq:TSriRequest, result:any) => any) => any,\n  applyFun: (fun: (...any) => any) => any,\n  sriRequest?: TSriRequest,\n) {\n  if (functions && functions.length > 0) {\n    try {\n      debug(\"hooks\", `applyHooks-${type}: going to apply ${functions.length} functions`);\n      await pMap(\n        functions,\n        async (fun: any) => {\n          const hrstart = process.hrtime();\n          const funName =\n            fun.name !== \"\"\n              ? fun.name.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`)\n              : \"anonymous-fun\";\n          const stHookName = `${type.replace(/ - /g, \"-\").replace(/ /g, \"-\")}-${funName}`;\n          try {\n            await applyFun(fun);\n            const hrend = process.hrtime(hrstart);\n            const duration = hrend[0] * 1000 + hrend[1] / 1000000;\n            debug(\"hooks\", `applyHooks-${type}: all functions resolved (took ${duration}ms).`);\n            if (sriRequest) {\n              setServerTimingHdr(sriRequest, stHookName, duration);\n            }\n          } catch (err) {\n            const hrend = process.hrtime(hrstart);\n            const duration = hrend[0] * 1000 + hrend[1] / 1000000;\n            debug(\"hooks\", `applyHooks-${type}: function ${fun.name} failed (took ${duration}ms).`);\n            if (sriRequest) {\n              setServerTimingHdr(sriRequest, stHookName, duration);\n            }\n            throw err;\n          }\n        },\n        { concurrency: 1 },\n      );\n    } catch (err) {\n      if (err instanceof SriError || err?.__proto__?.constructor?.name === \"SriError\") {\n        throw err;\n      } else {\n        console.log(\n          \"_______________________ H O O K S - E R R O R _____________________________________________\",\n        );\n        console.log(err);\n        console.log(err.stack);\n        console.log(Object.prototype.toString.call(err));\n        console.log(\n          \"___________________________________________________________________________________________\",\n        );\n        throw new SriError({\n          status: 500,\n          errors: [{ code: errorAsCode(`${type} failed`), msg: stringifyError(err) }],\n        });\n      }\n    }\n  } else {\n    debug(\"hooks\", `applyHooks-${type}: no ${type} functions registered.`);\n  }\n}\n\nexport { applyHooks };\n", "import pSettle from \"p-settle\";\nimport pEvent from \"p-event\";\nimport pMap from \"p-map\";\nimport queue from \"emitter-queue\";\nimport Emitter from \"events\";\nimport {\n  SriError,\n  TSriRequestHandlerForPhaseSyncer,\n  TSriRequest,\n  TResourceDefinition,\n  TSriInternalUtils,\n} from \"./typeDefinitions\";\nimport { debug, error, getParentSriRequestFromRequestMap } from \"./common\";\nimport { IDatabase } from \"pg-promise\";\nimport { IClient } from \"pg-promise/typescript/pg-subset\";\nimport { applyHooks } from \"./hooks\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst debug_log = (id, msg) => {\n  debug(\"phaseSyncer\", `PS -${id}- ${msg}`);\n};\n\n/**\n * \"Phase syncing\" is a way to control synchronization between multiple requests handlers (multiple items\n * of batch request). Jobs (sri request handlers) are divided into 'phases' (steps, subtasks) and jobs are\n * only allowed to go the next phase when all other handlers have also finished their current phase.\n *\n * This mechanism is used for handling parallel batch requests to be able to implements things like:\n *  - run all before before-* hooks before database changes\n *  - run all after-* hooks after all database changes\n *  - gathering data from all requests before handling this data in one sql command\n *  ...\n */\nclass PhaseSyncer {\n  /**\n   * unique identifier of each PhaseSyncer instance\n   */\n  id: string;\n\n  /**\n   * indicates the number of the phase this PhaseSyncer instance is executing\n   */\n  phaseCntr: number;\n\n  /**\n   * channel for communication from the PhaseSyncer instance towards the controlling process\n   */\n  ctrlEmitter: any;\n\n  /**\n   * channel for communication from the controlling process towards the PhaseSyncer instance\n   */\n  jobEmitter: queue;\n\n  /**\n   * promise of the jobWrapperFun which runs the sri request handler\n   */\n  jobPromise: Promise<any>;\n\n  /**\n   * SriRequest associated with the PhaseSyncer instance\n   */\n  #sriRequest: TSriRequest;\n\n  constructor(\n    fun: TSriRequestHandlerForPhaseSyncer,\n    args: readonly [IDatabase<unknown>, TSriRequest, TResourceDefinition | null, TSriInternalUtils],\n    ctrlEmitter: Emitter,\n  ) {\n    this.ctrlEmitter = ctrlEmitter;\n    this.id = uuidv4();\n    this.phaseCntr = 0;\n    this.jobEmitter = queue(new Emitter());\n    this.#sriRequest = args[1];\n\n    /**\n     * A wrapper around the sri request handler dealing with sending synchronisation events.\n     * @returns result of the sri request handler\n     */\n    const jobWrapperFun = async () => {\n      try {\n        const res = await fun(this, ...args);\n        this.ctrlEmitter.queue(\"jobDone\", this.id);\n        this.sriRequest.ended = true;\n        return res;\n      } catch (err) {\n        this.ctrlEmitter.queue(\"jobFailed\", this.id);\n        this.sriRequest.ended = true;\n        throw err;\n      }\n    };\n    this.jobPromise = jobWrapperFun();\n    debug_log(this.id, \"PhaseSyncer constructed.\");\n  }\n\n  /**\n   * This function needs to be called by the sri request handler at the end of each phase\n   * (i.e. at each synchronisation point).\n   */\n  async phase() {\n    debug_log(this.id, `STEP ${this.phaseCntr}`);\n    if (this.phaseCntr > 0) {\n      this.ctrlEmitter.queue(\"stepDone\", this.id, this.phaseCntr);\n    }\n    this.phaseCntr += 1;\n\n    const result: any = await pEvent(this.jobEmitter, [\"sriError\", \"ready\"]);\n    if (result instanceof SriError || result?.__proto__?.constructor?.name === \"SriError\") {\n      throw result;\n    }\n  }\n\n  get sriRequest() {\n    return this.#sriRequest;\n  }\n}\n\nconst splitListAt = (list, index) => [list.slice(0, index), list.slice(index)];\n\n/**\n * This function will create a new bunch of PhaseSyncer instances:\n * one for each job from the jobList (i.e. one for each item of a parallel batch[part]).\n *\n * It will then control the effective synchronisation between the PhaseSyncer instances (by keeping\n * track of state and passing events based on state).\n *\n * @param jobList\n * @param {Object} parameters - object containing optional parameters\n * @param {string} parameters.concurrency - the number of jobs which is allowed to run concurrent\n * @param {string} parameters.beforePhaseHooks - hooks which will be called before starting each new phase\n * @returns\n */\nasync function phaseSyncedSettle(\n  jobList: Array<\n    readonly [\n      TSriRequestHandlerForPhaseSyncer,\n      readonly [\n        IDatabase<unknown, IClient>,\n        TSriRequest,\n        TResourceDefinition | null,\n        TSriInternalUtils,\n      ],\n    ]\n  >,\n  { concurrency, beforePhaseHooks }: { concurrency?: number; beforePhaseHooks?: any[] } = {},\n) {\n  /**\n   * channel used to communicate between the controller process (this function) and the PhaseSyncer instances.\n   */\n  const ctrlEmitter = queue(new Emitter());\n\n  /**\n   * With jobMap, PhaseSyncer instances can be retrieved by their PhaseSyncer IDs.\n   */\n  const jobMap: Map<string, PhaseSyncer> = new Map(\n    jobList\n      .map(([fun, args]) => new PhaseSyncer(fun, args, ctrlEmitter))\n      .map((phaseSyncer: PhaseSyncer) => [phaseSyncer.id, phaseSyncer]),\n  );\n\n  /**\n   * The Set pendingJobs keep track of which jobs are still in progress (jobs which are terminated by\n   *  error or which are finished are removed from this set).\n   */\n  const pendingJobs = new Set(jobMap.keys());\n\n  /**\n   * With sriRequestMap, sriRequest objects can be retrieved by the ID of the PhaseSyncer instance\n   * associated with the sriRequest.\n   */\n  const sriRequestMap = new Map(\n    [...jobMap.entries()].map(([id, phaseSyncer]: [string, PhaseSyncer]) => [\n      id,\n      phaseSyncer.sriRequest,\n    ]),\n  );\n\n  /**\n   * With sriRequestIDToPhaseSyncerMap, PhaseSyncer instances can be retrieved by the ID of the sriRequest\n   * associated with the PhaseSyncer instance.\n   */\n  const sriRequestIDToPhaseSyncerMap = new Map(\n    [...jobMap.entries()].map(([_id, phaseSyncer]: [string, PhaseSyncer]) => [\n      phaseSyncer.sriRequest.id,\n      phaseSyncer,\n    ]),\n  );\n\n  /**\n   * queuedJobs keeps tracks of ID's of jobs waiting to be started their phase. This is nescessary in case\n   * a batch contains more jobs then the 'concurrency' allows to be running at the same time.\n   * When a job finishes its phase, one from the queue will be started.\n   */\n  let queuedJobs: Set<string>;\n\n  /**\n   * The set phasePendingJobs keeps track of the jobs which did not yet complete the current phase. When a\n   * job finishes his phase, it is removed from the set. When a new phase is started, phasePendingJobs is\n   * set to the content of pendingJobs.\n   */\n  let phasePendingJobs: Set<string>;\n\n  /**\n   * In case of batches which consist not only of read items, it makes no sense to continue after failure of\n   * an item  (as the transaction will be rolled back). In such case, the other items of the batch will be\n   * when an error has encoutered. The boolean failureHasBeenBroadcasted is used to indicate wether the\n   * notification is already happened or not.\n   */\n  let failureHasBeenBroadcasted = false;\n\n  try {\n    /**\n     * This function will start a new phase, this means notifying all jobs they can start exectuting their\n     * phase in case there are less jobs then concurrency allows. In case there are more jobs then allowed\n     * to run concurrently, only notify as many as are allowed to run concurrently and put the remainder in\n     * the jobQueue.\n     */\n    const startNewPhase = async () => {\n      const pendingJobList = [...pendingJobs.values()];\n      const [jobsToWake, jobsToQueue] = splitListAt(pendingJobList, concurrency || 1);\n\n      queuedJobs = new Set(jobsToQueue);\n      phasePendingJobs = new Set(pendingJobs);\n\n      if (jobsToWake.length > 0) {\n        // Only handle beforePhaseHooks when there are jobs to wake - otherwise the phaseSyncer\n        // will be terminated\n        await applyHooks(\n          \"ps\",\n          beforePhaseHooks || [],\n          (f) => f(sriRequestMap, jobMap, pendingJobs),\n          getParentSriRequestFromRequestMap(sriRequestMap),\n        );\n      }\n\n      jobsToWake.forEach((id) => {\n        const job = jobMap.get(id);\n        if (job) {\n          job.jobEmitter.queue(\"ready\");\n        } else {\n          error(\"PhaseSyncer: job not found in jobMap\");\n          throw new Error(\"PhaseSyncer: job not found in jobMap\");\n        }\n      });\n    };\n\n    /**\n     * This function will notify next job in queue it can start with execution of his current phase\n     * and remove the job from the queue.\n     */\n    const startQueuedJob = () => {\n      if (phasePendingJobs.size - queuedJobs.size > (concurrency || 1)) {\n        error(\n          \"ERROR: PhaseSyncer: unexpected startQueuedJob() call while max number of concurrent jobs is still running ! -> NOT starting queued job\",\n        );\n      } else {\n        if (queuedJobs.size > 0) {\n          const id: string = queuedJobs.values().next().value;\n          const job = jobMap.get(id);\n          if (job) {\n            job.jobEmitter.queue(\"ready\");\n          } else {\n            error(\"PhaseSyncer: job not found in jobMap\");\n            throw new Error(\"PhaseSyncer: job not found in jobMap\");\n          }\n          queuedJobs.delete(id);\n        }\n      }\n    };\n\n    /**\n     * A wrapper for around the functions handling events, as they all needs the same error handling.\n     * @param fun function to wrap with error handling\n     */\n    const errorHandlingWrapper = (fun) => async (id: string, args) => {\n      try {\n        await fun(id, args);\n      } catch (err) {\n        if (err instanceof SriError || err?.__proto__?.constructor?.name === \"SriError\") {\n          // If the SriError is generated in a beforePhaseHook (which is ran at 'global' level for all batch)\n          // we receive the id of the phaseSyncer who executed 'phase()' first, this is random and probably\n          // not the one which corresponds to the error.\n          // In such cases an id of the relevant (sub)sriRequest of the batch can be passed with the error, so\n          // we can retrieve the phaseSyncer of the relevant (sub)sriRequest.\n          if (err.sriRequestID && sriRequestIDToPhaseSyncerMap.get(err.sriRequestID)) {\n            sriRequestIDToPhaseSyncerMap.get(err.sriRequestID)?.jobEmitter.queue(\"sriError\", err);\n            return;\n          }\n          if (jobMap.get(id)) {\n            jobMap.get(id)?.jobEmitter.queue(\"sriError\", err);\n            return;\n          }\n        }\n        console.error(`\\nERROR: ${err} - ${JSON.stringify(err)}\\n`);\n      }\n    };\n\n    ctrlEmitter.on(\n      \"stepDone\",\n      errorHandlingWrapper(async (id: string, stepnr) => {\n        debug_log(id, `*step ${stepnr}* done.`);\n        phasePendingJobs.delete(id);\n\n        if (getParentSriRequestFromRequestMap(sriRequestMap).reqCancelled) {\n          throw new SriError({\n            status: 0,\n            errors: [{ code: \"cancelled\", msg: \"Request cancelled by client.\" }],\n          });\n        }\n\n        if (phasePendingJobs.size === 0) {\n          debug_log(id, \" Starting new phase.\");\n          await startNewPhase();\n        } else {\n          debug_log(id, \" Starting queued job.\");\n          startQueuedJob();\n        }\n      }),\n    );\n\n    ctrlEmitter.on(\n      \"jobDone\",\n      errorHandlingWrapper(async (id: string) => {\n        debug_log(id, \"*JOB* done.\");\n\n        pendingJobs.delete(id);\n        queuedJobs.delete(id);\n        phasePendingJobs.delete(id);\n\n        if (phasePendingJobs.size === 0) {\n          await startNewPhase();\n        } else {\n          startQueuedJob();\n        }\n      }),\n    );\n\n    ctrlEmitter.on(\n      \"jobFailed\",\n      errorHandlingWrapper(async (id: string) => {\n        debug_log(id, \"*JOB* failed.\");\n\n        pendingJobs.delete(id);\n        queuedJobs.delete(id);\n        phasePendingJobs.delete(id);\n\n        if (getParentSriRequestFromRequestMap(sriRequestMap).readOnly === true) {\n          if (phasePendingJobs.size === 0) {\n            await startNewPhase();\n          } else {\n            startQueuedJob();\n          }\n        } else if (!failureHasBeenBroadcasted) {\n          const parent = getParentSriRequestFromRequestMap(sriRequestMap);\n          failureHasBeenBroadcasted = true;\n          // failure of one job in batch leads to failure of the complete batch\n          //  --> notify the other jobs of the failure (only if they are not part\n          //      of a failed multi* operation)\n          await pMap(pendingJobs, async (id) => {\n            const job = jobMap.get(id);\n\n            if (job === undefined) {\n              throw new Error(\"[jobFailed] Job is undefined, which is unexpected...\");\n            } else if (\n              job.sriRequest === undefined ||\n              (!(\n                parent.multiInsertFailed && parent.putRowsToInsertIDs?.includes(job?.sriRequest.id)\n              ) &&\n                !(\n                  parent.multiUpdateFailed &&\n                  parent.putRowsToUpdateIDs?.includes(job?.sriRequest.id)\n                ) &&\n                !(parent.multiDeleteFailed && parent.rowsToDeleteIDs?.includes(job?.sriRequest.id)))\n            ) {\n              job?.jobEmitter.queue(\n                \"sriError\",\n                new SriError({\n                  status: 202,\n                  errors: [\n                    {\n                      code: \"cancelled\",\n                      msg: \"Request cancelled due to failure in accompanying request in batch.\",\n                    },\n                  ],\n                }),\n              );\n            }\n          });\n        }\n        if (phasePendingJobs.size === 0) {\n          await startNewPhase();\n        } else {\n          await startQueuedJob();\n        }\n      }),\n    );\n\n    await startNewPhase();\n    return pSettle([...jobMap.values()].map((phaseSyncer) => phaseSyncer.jobPromise));\n  } catch (err) {\n    console.warn(\"WARN: error in phase syncer\");\n    console.warn(err);\n    console.warn(JSON.stringify(err));\n    let sriError;\n    if (err instanceof SriError || err?.__proto__?.constructor?.name === \"SriError\") {\n      sriError = err;\n    } else {\n      sriError = new SriError({\n        status: 500,\n        errors: [{ code: \"phase.synced.settle.failed\", err: err.toString() }],\n      });\n    }\n    pendingJobs.forEach((id) => {\n      jobMap.get(id)?.jobEmitter.queue(\n        \"sriError\",\n        new SriError({\n          status: 202,\n          errors: [\n            {\n              code: \"cancelled\",\n              msg: \"Request cancelled due to failure in accompanying request in batch.\",\n            },\n          ],\n        }),\n      );\n    });\n    await pSettle([...jobMap.values()].map((phaseSyncer) => phaseSyncer.jobPromise));\n    return [...jobMap.values()].map((_phaseSyncer) => ({ isFulfilled: false, reason: sriError }));\n  }\n}\n\nexport { phaseSyncedSettle };\n\nexport type { PhaseSyncer };\n", "import { error } from \"./common\";\nimport { TPreparedSql } from \"./typeDefinitions\";\n/*\nA query object used to allow multiple functions to annotate a common piece for SQL\nindependently from each other. For example : all 'query' functions in an sri4node\nconfiguration can add pieces to the WHERE clause of a list resource.\nThey can all add CTEs as well, without affecting one another.\n*/\n\nconst parameterPattern = \"$?$?\";\n\nfunction prepareSQL(name?: string): TPreparedSql {\n  return {\n    name,\n    text: \"\",\n    params: [] as Array<string | number | boolean>,\n    param(x, noQuotes = false) {\n      // Convenience function for adding a parameter to the text, it\n      // automatically adds $x to the SQL text, and adds the supplied value\n      // to the 'value'-array.\n      this.params.push(x);\n      this.text += parameterPattern;\n      if (noQuotes) {\n        this.text += \":value\";\n      }\n\n      return this;\n    },\n    sql(x: string) {\n      // Convenience function for adding a parameter to the SQL statement.\n      this.text += x;\n\n      return this;\n    },\n    array(x: Array<string | number | boolean>) {\n      // Convenience function for adding an array of values to a SQL statement.\n      // The values are added comma-separated.\n      if (Array.isArray(x)) {\n        for (let i = 0; i < x.length; i++) {\n          this.param(x[i]);\n          if (i < x.length - 1) {\n            this.text += \",\";\n          }\n        }\n      }\n\n      return this;\n    },\n    /**\n     * Adds an array of tuples to the SQL statement.\n     * @example\n     * ```\n     * prepareSQL()\n     *  .sql('select name from mytable where (name, code) in('))\n     *  .arrayOfTuples([['a', 1], ['b', 2], ['c', 3]])\n     *  .sql(')');\n     *\n     * prepareSQL()\n     *  .sql('select name from mytable where exists name, code in('))\n     *  .arrayOfTuples([['a', 1], ['b', 2], ['c', 3]])\n     *  .sql(')');\n     * ```\n     */\n    arrayOfTuples(tuples: Array<Array<string | number | boolean>>, cast?: Array<string>) {\n      tuples.forEach((tuple, i) => {\n        this.text += \"(\";\n        tuple.forEach((el, j) => {\n          this.param(el);\n          if (i === 0 && cast && cast[j]) {\n            this.text += `::${cast[j]}`;\n          }\n          if (j < tuple.length - 1) {\n            this.text += \",\";\n          }\n        });\n        this.text += \")\";\n        if (i < tuples.length - 1) {\n          this.text += \",\";\n        }\n      });\n      return this;\n    },\n    valueIn(valueRef: string, values: Array<string | number | boolean | Date>, cast?: string) {\n      this.text += ` EXISTS (SELECT 1 FROM (VALUES `;\n      this.arrayOfTuples(\n        values.map((v) => [v]),\n        [cast],\n      );\n      this.text += `) AS t(v) WHERE t.v = ${valueRef})`;\n      return this;\n    },\n    /**\n     * @todo IMPLEMENT\n     *\n     * @param tupleRef\n     * @param values\n     * @returns\n     */\n    tupleIn(\n      tupleRef: string,\n      values: Array<Array<string | number | boolean | Date>>,\n      cast?: Array<string>,\n    ) {\n      throw new Error(\"Not implemented\");\n      return this;\n    },\n    keys(o) {\n      // Convenience function for adding all keys in an object (comma-separated)\n      const columnNames: string[] = [];\n      let key;\n      let j;\n\n      for (key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          columnNames.push(key);\n        }\n      }\n      let sqlColumnNames = \"\";\n      for (j = 0; j < columnNames.length; j++) {\n        sqlColumnNames += `\"${columnNames[j]}\"`;\n        if (j < columnNames.length - 1) {\n          sqlColumnNames += \",\";\n        }\n      }\n      this.text += sqlColumnNames;\n\n      return this;\n    },\n    values(o) {\n      // Convenience function for adding all values of an object as parameters.\n      // Same iteration order as 'columns'.\n      let key;\n\n      let firstcolumn = true;\n      for (key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (!firstcolumn) {\n            this.text += \",\";\n          } else {\n            firstcolumn = false;\n          }\n          this.param(o[key]);\n        }\n      }\n\n      return this;\n    },\n    with(nonrecursivequery, unionclause, recursivequery, virtualtablename) {\n      // Form : select.with(nonrecursiveterm,virtualtablename)\n      let tablename;\n      let cte;\n      let countParamsInCurrentCtes = 0;\n\n      if (nonrecursivequery && unionclause && !recursivequery && !virtualtablename) {\n        tablename = unionclause;\n        if (this.text.indexOf(\"WITH RECURSIVE\") === -1) {\n          this.text = `WITH RECURSIVE ${tablename} AS (${nonrecursivequery.text}) /*LASTCTE*/ ${this.text}`;\n        } else {\n          cte = `, ${tablename} AS (${nonrecursivequery.text}) /*LASTCTE*/ `;\n          // Do not use text.replace() as this function special uses replacement patterns which can\n          // interfere with our $$meta fields.\n          // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n          const textSplitted = this.text.split(\"/*LASTCTE*/\");\n          countParamsInCurrentCtes = (textSplitted[0].match(/\\$\\?\\$\\?/g) || []).length;\n          this.text = textSplitted.join(cte);\n        }\n        this.params.splice(countParamsInCurrentCtes, 0, ...nonrecursivequery.params);\n      }\n      // Format : select.with(nonrecursiveterm, 'UNION' or 'UNION ALL', recursiveterm, virtualtablename)\n      else if (nonrecursivequery && unionclause && nonrecursivequery && virtualtablename) {\n        unionclause = unionclause.toLowerCase().trim();\n        if (unionclause === \"union\" || unionclause === \"union all\") {\n          if (this.text.indexOf(\"WITH RECURSIVE\") === -1) {\n            this.text = `WITH RECURSIVE ${virtualtablename} AS (${nonrecursivequery.text} ${unionclause} ${recursivequery.text}) /*LASTCTE*/ ${this.text}`;\n          } else {\n            cte = `, ${virtualtablename} AS (${nonrecursivequery.text} ${unionclause} ${recursivequery.text}) /*LASTCTE*/ `;\n            // Do not use text.replace() as this function special uses replacement patterns which\n            // can interfere with our $$meta fields.\n            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n            const textSplitted = this.text.split(\"/*LASTCTE*/\");\n            countParamsInCurrentCtes = (textSplitted[0].match(/\\$\\?\\$\\?/g) || []).length;\n            this.text = textSplitted.join(cte);\n          }\n          this.params.splice(\n            countParamsInCurrentCtes,\n            0,\n            ...nonrecursivequery.params.concat(recursivequery.params),\n          );\n        } else {\n          throw new Error(\"Must use UNION or UNION ALL as union-clause\");\n        }\n        tablename = virtualtablename;\n      } else {\n        throw new Error(\"Parameter combination not supported...\");\n      }\n\n      return this;\n    },\n    toParameterizedSql(): { sql: string; values: Array<any> } {\n      let { text } = this;\n      const values = this.params;\n      let paramCount = 1;\n      if (values && values.length > 0) {\n        for (let i = 0; i < values.length; i++) {\n          const index = text.indexOf(parameterPattern);\n          if (index === -1) {\n            const msg =\n              \"Parameter count in query does not add up. Too few parameters in the query string\";\n            error(`** ${msg}`);\n            throw new Error(msg);\n          } else {\n            const prefix = text.substring(0, index);\n            const postfix = text.substring(index + parameterPattern.length, text.length);\n            text = `${prefix}$${paramCount}${postfix}`;\n            paramCount += 1;\n          }\n        }\n        const index = text.indexOf(parameterPattern);\n        if (index !== -1) {\n          const msg =\n            \"Parameter count in query does not add up. Extra parameters in the query string.\";\n          error(`** ${msg}`);\n          throw new Error(msg);\n        }\n      }\n      return { sql: text, values };\n    },\n    appendQueryObject(queryObject2) {\n      this.text += queryObject2.text;\n      this.params.push(...queryObject2.params);\n\n      return this;\n    },\n  };\n}\n\nexport { prepareSQL };\n", "/* External query utilities. use in the 'query' section of your sri4node configuration */\nimport { tableFromMapping } from \"./common\";\nimport { SriError, TPreparedSql, TResourceDefinition } from \"./typeDefinitions\";\nimport { defaultFilter } from \"./defaultFilter\";\nimport { IDatabase } from \"pg-promise\";\nimport { IClient } from \"pg-promise/typescript/pg-subset\";\nimport { ParsedUrlQuery } from \"querystring\";\n\n/**\n *\n * @param href\n * @param query\n * @param parameter\n * @param mapping\n */\nfunction filterHrefs(\n  href: string,\n  query: TPreparedSql,\n  _parameter: string,\n  _tx: IDatabase<unknown, IClient>,\n  _doCount: boolean,\n  mapping: TResourceDefinition,\n  _urlParameters: ParsedUrlQuery,\n) {\n  const table = tableFromMapping(mapping);\n\n  if (href) {\n    const permalinks = href.split(\",\");\n    const keys: string[] = [];\n    permalinks.forEach((permalink) => {\n      const key = permalink.split(\"/\")[permalink.split(\"/\").length - 1];\n      keys.push(key);\n      // use the schema to check on the format of the key because there can be resources that do not have a uuid as primarey key. Checking on length is weak anyway, do regex check on uuid, which you can get from the schema if you want to do it right.\n      /* if (key.length === 36) {\n          keys.push(key);\n        } else {\n          throw new SriError({status: 400, errors: [{ code: 'parameter.hrefs.invalid.key.length',\n                                     msg: `Parameter 'href' has invalid key length for key [${key}].`,\n                                     parameter: \"href\",\n                                     value: key\n                                   }]})\n        } */\n    });\n\n    query.sql(` and ${table}.key in (`).array(keys).sql(\") \");\n  }\n}\n\nfunction filterReferencedType(resourcetype: string, columnname: string) {\n  return function (value, query) {\n    if (value) {\n      const permalinks = value.split(\",\");\n      const keys = permalinks.map((permalink) => {\n        if (permalink.indexOf(`${resourcetype}/`) !== 0) {\n          throw new SriError({\n            status: 400,\n            errors: [\n              {\n                code: \"parameter.referenced.type.invalid.value\",\n                msg: `Parameter '${columnname}' should start with '${`${resourcetype}/`}'.`,\n                parameter: columnname,\n                value: permalink,\n              },\n            ],\n          });\n        }\n        const key = permalink.split(\"/\")[permalink.split(\"/\").length - 1];\n        // use the schema to check on the format of the key because there can be resources that do not have a uuid as primarey key. Checking on length is weak anyway, do regex check on uuid, which you can get from the schema if you want to do it right.\n        /* if (key.length !== 36) {\n          throw new SriError({status: 400, errors: [{ code: 'parameter.referenced.type.invalid.key.length',\n                                     msg: `Parameter '${columnname}' contains key with invalid length for key [${key}].`,\n                                     parameter: columnname,\n                                     value: permalink\n                                   }]})\n        } */\n        return key;\n      });\n\n      query.sql(` and \"${columnname}\" in (`).array(keys).sql(\") \");\n    }\n  };\n}\n\nfunction modifiedSince(\n  value: string,\n  query: TPreparedSql,\n  _parameter: string,\n  _tx: IDatabase<unknown, IClient>,\n  _doCount: boolean,\n  mapping: TResourceDefinition,\n  _urlParameters: ParsedUrlQuery,\n) {\n  const table = tableFromMapping(mapping);\n\n  query.sql(` AND ${table}.\"$$meta.modified\" >= `).param(value);\n\n  return query;\n}\n\nexport { filterHrefs, filterReferencedType, modifiedSince, defaultFilter };\n", "import { IDatabase } from \"pg-promise\";\nimport { tableFromMapping } from \"./common\";\nimport {\n  SriError,\n  TInformationSchema,\n  TPreparedSql,\n  TResourceDefinition,\n  TSriConfig,\n} from \"./typeDefinitions\";\nimport { IClient } from \"pg-promise/typescript/pg-subset\";\nimport { ParsedUrlQuery } from \"querystring\";\nimport { integer } from \"./schemaUtils\";\n\ntype TParsedParam = {\n  key: string;\n  operator: string;\n  prefix: string;\n  postfix: string;\n  path: string;\n};\n\n// analyses parameter and return its parts (key, operator, prefix and postfix)\nfunction analyseParameter(parameter: string): TParsedParam {\n  let key = parameter;\n  let operator;\n  let prefix;\n  let postfix;\n  let path;\n  let matches;\n\n  const pattern =\n    /^(.*?)(CaseSensitive)?(Not)?(Greater(OrEqual)?|After|Less(OrEqual)?|Before|In|RegEx|Contains|Overlaps)?$/;\n\n  if ((matches = key.match(pattern)) !== null) {\n    key = matches[1];\n    prefix = matches[2];\n    postfix = matches[3];\n    operator = matches[4];\n  }\n  if (parameter.indexOf(\".\") > -1 && parameter.indexOf(\"$$meta\") == -1) {\n    path = key;\n    key = parameter.split(\".\")[0];\n  }\n\n  return {\n    key,\n    operator,\n    prefix,\n    postfix,\n    path,\n  };\n}\n\n// filter function for text fields\nfunction filterString(\n  select: TPreparedSql,\n  filter: TParsedParam,\n  value: string,\n  mapping: TResourceDefinition,\n  baseType: \"timestamp\" | \"text\" | \"array\" | \"boolean\" | \"numeric\" | \"json\" | null,\n  _field: TInformationSchema[string][string],\n) {\n  let values;\n  const not = filter.postfix === \"Not\";\n  const sensitive = filter.prefix === \"CaseSensitive\";\n  const tablename = tableFromMapping(mapping);\n\n  if (\n    (filter.operator === \"Greater\" && not && sensitive) ||\n    (filter.operator === \"Less\" && !not && sensitive)\n  ) {\n    select.sql(` AND (\"${tablename}\".\"${filter.key}\"::text COLLATE \"C\") < `).param(value);\n  } else if (\n    (filter.operator === \"Greater\" && !not && sensitive) ||\n    (filter.operator === \"Less\" && not && sensitive)\n  ) {\n    select.sql(` AND (\"${tablename}\".\"${filter.key}\"::text COLLATE \"C\") > `).param(value);\n  } else if (\n    (filter.operator === \"Greater\" && not && !sensitive) ||\n    (filter.operator === \"Less\" && !not && !sensitive)\n  ) {\n    select.sql(` AND LOWER(\"${tablename}\".\"${filter.key}\"::text) < LOWER(`).param(value).sql(\")\");\n  } else if (\n    (filter.operator === \"Greater\" && !not && !sensitive) ||\n    (filter.operator === \"Less\" && not && !sensitive)\n  ) {\n    select.sql(` AND LOWER(\"${tablename}\".\"${filter.key}\"::text) > LOWER(`).param(value).sql(\")\");\n  } else if (\n    ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") && not && sensitive) ||\n    ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") && !not && sensitive)\n  ) {\n    select.sql(` AND (\"${tablename}\".\"${filter.key}\"::text COLLATE \"C\") <= `).param(value);\n  } else if (\n    ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") && !not && sensitive) ||\n    ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") && not && sensitive)\n  ) {\n    select.sql(` AND (\"${tablename}\".\"${filter.key}\"::text COLLATE \"C\") >= `).param(value);\n  } else if (\n    ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") && not && !sensitive) ||\n    ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") && !not && !sensitive)\n  ) {\n    select.sql(` AND LOWER(\"${tablename}\".\"${filter.key}\"::text) <= LOWER(`).param(value).sql(\")\");\n  } else if (\n    ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") && !not && !sensitive) ||\n    ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") && not && !sensitive)\n  ) {\n    select.sql(` AND LOWER(\"${tablename}\".\"${filter.key}\"::text) >= LOWER(`).param(value).sql(\")\");\n  } else if (filter.operator === \"In\" && not && sensitive) {\n    values = value.split(\",\");\n    select\n      .sql(` AND ( NOT `)\n      .valueIn(`\"${tablename}\".\"${filter.key}\"::text`, values)\n      .sql(` OR \"${tablename}\".\"${filter.key}\"::text IS NULL )`);\n  } else if (filter.operator === \"In\" && !not && sensitive) {\n    values = value.split(\",\");\n    select.sql(` AND `).valueIn(`\"${tablename}\".\"${filter.key}\"::text`, values);\n  } else if (filter.operator === \"In\" && not && !sensitive) {\n    values = value.split(\",\").map((v) => v.toLowerCase());\n    select\n      .sql(` AND ( NOT `)\n      .valueIn(`LOWER(\"${tablename}\".\"${filter.key}\"::text)`, values)\n      .sql(` OR \"${tablename}\".\"${filter.key}\"::text IS NULL )`);\n  } else if (filter.operator === \"In\" && !not && !sensitive) {\n    values = value.split(\",\").map((v) => v.toLowerCase());\n    select.sql(` AND `).valueIn(`LOWER(\"${tablename}\".\"${filter.key}\"::text)`, values);\n  } else if (filter.operator === \"RegEx\" && not && sensitive) {\n    select.sql(` AND \"${tablename}\".\"${filter.key}\"::text !~ `).param(value);\n  } else if (filter.operator === \"RegEx\" && !not && sensitive) {\n    select.sql(` AND \"${tablename}\".\"${filter.key}\"::text ~ `).param(value);\n  } else if (filter.operator === \"RegEx\" && not && !sensitive) {\n    select.sql(` AND \"${tablename}\".\"${filter.key}\"::text !~* `).param(value);\n  } else if (filter.operator === \"RegEx\" && !not && !sensitive) {\n    select.sql(` AND \"${tablename}\".\"${filter.key}\"::text ~* `).param(value);\n  } else if (filter.operator === \"Contains\" && not && sensitive) {\n    select\n      .sql(` AND (\"${tablename}\".\"${filter.key}\"::text NOT LIKE `)\n      .param(`%${value}%`)\n      .sql(` OR ${filter.key}::text IS NULL)`);\n  } else if (filter.operator === \"Contains\" && !not && sensitive) {\n    select.sql(` AND \"${tablename}\".\"${filter.key}\"::text LIKE `).param(`%${value}%`);\n  } else if (filter.operator === \"Contains\" && not && !sensitive) {\n    select\n      .sql(` AND (\"${tablename}\".\"${filter.key}\"::text NOT ILIKE `)\n      .param(`%${value}%`)\n      .sql(` OR ${filter.key}::text IS NULL)`);\n  } else if (filter.operator === \"Contains\" && !not && !sensitive) {\n    select.sql(` AND \"${tablename}\".\"${filter.key}\"::text ILIKE `).param(`%${value}%`);\n  } else if (not && sensitive) {\n    select\n      .sql(` AND (\"${tablename}\".\"${filter.key}\"::text <> `)\n      .param(value)\n      .sql(` OR ${filter.key}::text IS NULL)`);\n  } else if (!not && sensitive) {\n    select.sql(` AND \"${tablename}\".\"${filter.key}\"::text = `).param(value);\n  } else if (not && !sensitive) {\n    select\n      .sql(` AND (LOWER(\"${tablename}\".\"${filter.key}\"::text) <> `)\n      .param(value.toLowerCase())\n      .sql(` OR ${filter.key}::text IS NULL)`);\n  } else {\n    select.sql(` AND LOWER(\"${tablename}\".\"${filter.key}\"::text) = `).param(value.toLowerCase());\n  }\n}\n\n// filter function for fields of type numeric or timestamp (the logic is the same)\nfunction filterNumericOrTimestamp(\n  select: TPreparedSql,\n  filter: TParsedParam,\n  value: string,\n  _mapping: TResourceDefinition,\n  baseType: \"timestamp\" | \"text\" | \"array\" | \"boolean\" | \"numeric\" | \"json\" | null,\n  _field: TInformationSchema[string][string],\n) {\n  const isTimestamp = baseType === \"timestamp\";\n\n  if (\n    (!filter.postfix && filter.operator === \"Less\") ||\n    (filter.operator === \"Greater\" && filter.postfix === \"Not\")\n  ) {\n    select.sql(` AND \"${filter.key}\" < `).param(value);\n  } else if (\n    (!filter.postfix && (filter.operator === \"LessOrEqual\" || filter.operator === \"Before\")) ||\n    ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") &&\n      filter.postfix === \"Not\")\n  ) {\n    select.sql(` AND \"${filter.key}\" <= `).param(value);\n  } else if (\n    (!filter.postfix && filter.operator === \"Greater\") ||\n    (filter.operator === \"Less\" && filter.postfix === \"Not\")\n  ) {\n    select.sql(` AND \"${filter.key}\" > `).param(value);\n  } else if (\n    (!filter.postfix && (filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\")) ||\n    ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") &&\n      filter.postfix === \"Not\")\n  ) {\n    select.sql(` AND (\"${filter.key}\" >= `).param(value);\n\n    if (isTimestamp) {\n      select.sql(` OR \"${filter.key}\" IS NULL)`);\n    } else {\n      select.sql(\")\");\n    }\n  } else if (filter.operator === \"In\") {\n    const parseFunc = isTimestamp ? (v: string) => v : Number.parseFloat;\n    if (filter.postfix === \"Not\") {\n      select\n        .sql(` AND ( NOT `)\n        .valueIn(\n          isTimestamp ? `${filter.key}::timestamptz` : filter.key,\n          value.split(\",\").map((v) => parseFunc(v)),\n          isTimestamp ? \"timestamptz\" : undefined,\n        )\n        .sql(` OR \"${filter.key}\" IS NULL )`);\n    } else {\n      select.sql(` AND`).valueIn(\n        filter.key,\n        value.split(\",\").map((v) => parseFunc(v)),\n        isTimestamp ? \"timestamptz\" : undefined,\n      );\n    }\n  } else if (filter.postfix === \"Not\") {\n    select.sql(` AND \"${filter.key}\" <> `).param(value);\n  } else {\n    select.sql(` AND \"${filter.key}\" = `).param(value);\n  }\n}\n\n// filter function for arrays. Important: since the schema doesn't specify the type of field of the array\n// we treat each object in a generic way (no string manipulation, only exact matches)\nfunction filterArray(\n  select: TPreparedSql,\n  filter: TParsedParam,\n  value: string,\n  _mapping: TResourceDefinition,\n  _baseType: \"timestamp\" | \"text\" | \"array\" | \"boolean\" | \"numeric\" | \"json\" | null,\n  field: TInformationSchema[string][string],\n) {\n  const values = value.split(\",\");\n\n  if (values.length > 0) {\n    if (filter.postfix === \"Not\") {\n      select.sql(\" AND NOT (\");\n    } else {\n      select.sql(\" AND (\");\n    }\n    if (filter.operator === \"Overlaps\") {\n      select.sql(\"ARRAY[\").array(values).sql(`]::${field.element_type}[] && \"${filter.key}\"`);\n    } else if (filter.operator === \"Contains\" || filter.operator === \"In\") {\n      // Implement 'In' as an alias for 'Contains'; before previous change 'In' was implicitly\n      // (probably unintended) implemented as equal array match, but that did not make much sense.\n      select.sql(\"ARRAY[\").array(values).sql(`]::${field.element_type}[] <@ \"${filter.key}\"`);\n    } else if (filter.operator === undefined) {\n      // plain equal match, NOT taking into account order of the elements\n      select\n        .sql(\"( ARRAY[\")\n        .array(values)\n        .sql(`]::${field.element_type}[] <@ \"${filter.key}\"`)\n        .sql(\"AND ARRAY[\")\n        .array(values)\n        .sql(`]::${field.element_type}[] @> \"${filter.key}\" )`);\n    } else {\n      // Not expected to be here -> throw error\n      throw new SriError({\n        status: 400,\n        errors: [\n          {\n            code: \"invalid.array.filter\",\n            parameter: filter.operator,\n            message: \"Invalid array filter operator.\",\n          },\n        ],\n      });\n    }\n    select.sql(\")\");\n  }\n}\n\n// filter function for boolean fields\nfunction filterBoolean(\n  select: TPreparedSql,\n  filter: TParsedParam,\n  value: string,\n  _mapping: TResourceDefinition,\n  _baseType: \"timestamp\" | \"text\" | \"array\" | \"boolean\" | \"numeric\" | \"json\" | null,\n  _field: TInformationSchema[string][string],\n) {\n  if (value !== \"any\") {\n    if (filter.postfix === \"Not\") {\n      select.sql(\" AND NOT \");\n    } else {\n      select.sql(\" AND \");\n    }\n\n    select.sql(`\"${filter.key}\" = `).param(value);\n  }\n}\n\nfunction filterJson(\n  select: TPreparedSql,\n  filter: TParsedParam,\n  value: string,\n  mapping: TResourceDefinition,\n  _baseType: \"timestamp\" | \"text\" | \"array\" | \"boolean\" | \"numeric\" | \"json\" | null,\n  _field: TInformationSchema[string][string],\n) {\n  const { path } = filter;\n  if (path == null) {\n    throw new SriError({\n      status: 404,\n      errors: [\n        {\n          code: \"invalid.query.property\",\n          parameter: filter.key,\n          message: \"There is no valid path defined, use '.' to define path.\",\n        },\n      ],\n    });\n  } else {\n    let jsonKey = \"\";\n    path.split(\".\").forEach((part) => {\n      if (jsonKey === \"\") {\n        jsonKey = `\"${part}\"`;\n      } else {\n        jsonKey = `(${jsonKey})::json->>'${part}'`;\n      }\n    });\n    jsonKey = `(${jsonKey})`;\n\n    const not = filter.postfix === \"Not\";\n    const sensitive = filter.prefix === \"CaseSensitive\";\n    const tablename = tableFromMapping(mapping);\n\n    if (\n      (filter.operator === \"Greater\" && not && sensitive) ||\n      (filter.operator === \"Less\" && !not && sensitive)\n    ) {\n      select.sql(` AND ${jsonKey}::text < `).param(value);\n    } else if (\n      (filter.operator === \"Greater\" && !not && sensitive) ||\n      (filter.operator === \"Less\" && not && sensitive)\n    ) {\n      select.sql(` AND ${jsonKey}::text > `).param(value);\n    } else if (\n      (filter.operator === \"Greater\" && not && !sensitive) ||\n      (filter.operator === \"Less\" && !not && !sensitive)\n    ) {\n      select.sql(` AND LOWER(${jsonKey}::text) < LOWER(`).param(value).sql(\")\");\n    } else if (\n      (filter.operator === \"Greater\" && !not && !sensitive) ||\n      (filter.operator === \"Less\" && not && !sensitive)\n    ) {\n      select.sql(` AND LOWER(${jsonKey}::text) > LOWER(`).param(value).sql(\")\");\n    } else if (\n      ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") && not && sensitive) ||\n      ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") && !not && sensitive)\n    ) {\n      select.sql(` AND ${jsonKey}::text <= `).param(value);\n    } else if (\n      ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") &&\n        !not &&\n        sensitive) ||\n      ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") && not && sensitive)\n    ) {\n      select.sql(` AND ${jsonKey}::text >= `).param(value);\n    } else if (\n      ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") &&\n        not &&\n        !sensitive) ||\n      ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") && !not && !sensitive)\n    ) {\n      select.sql(` AND LOWER(${jsonKey}::text) <= LOWER(`).param(value).sql(\")\");\n    } else if (\n      ((filter.operator === \"GreaterOrEqual\" || filter.operator === \"After\") &&\n        !not &&\n        !sensitive) ||\n      ((filter.operator === \"LessOrEqual\" || filter.operator === \"Before\") && not && !sensitive)\n    ) {\n      select.sql(` AND LOWER(${jsonKey}::text) >= LOWER(`).param(value).sql(\")\");\n    } else if (filter.operator === \"In\" && not && sensitive) {\n      const values = value.split(\",\");\n      select\n        .sql(` AND ( NOT `)\n        .valueIn(`${jsonKey}::text`, values)\n        .sql(` OR ${filter.key}::text IS NULL )`);\n    } else if (filter.operator === \"In\" && !not && sensitive) {\n      const values = value.split(\",\");\n      select\n        // .sql(` AND EXISTS (SELECT 1 FROM (VALUES `)\n        // .arrayOfTuples(values.map((v) => [v]))\n        // .sql(`) AS tin(v) WHERE tin.v = \"${tablename}\".\"${filter.key}\"::text )`);\n        .sql(` AND `)\n        .valueIn(`${jsonKey}::text`, values);\n    } else if (filter.operator === \"In\" && not && !sensitive) {\n      const values = value.split(\",\").map((v) => v.toLowerCase());\n      select\n        .sql(` AND ( NOT `)\n        .valueIn(`LOWER(${jsonKey}::text)`, values)\n        .sql(` OR ${filter.key}::text IS NULL )`);\n    } else if (filter.operator === \"In\" && !not && !sensitive) {\n      const values = value.split(\",\").map((v) => v.toLowerCase());\n      select.sql(` AND `).valueIn(`LOWER(${jsonKey}::text)`, values);\n    } else if (filter.operator === \"RegEx\" && not && sensitive) {\n      select.sql(` AND ${jsonKey}::text !~ `).param(value);\n    } else if (filter.operator === \"RegEx\" && !not && sensitive) {\n      select.sql(` AND ${jsonKey}::text ~ `).param(value);\n    } else if (filter.operator === \"RegEx\" && not && !sensitive) {\n      select.sql(` AND ${jsonKey}::text !~* `).param(value);\n    } else if (filter.operator === \"RegEx\" && !not && !sensitive) {\n      select.sql(` AND ${jsonKey}::text ~* `).param(value);\n    } else if (filter.operator === \"Contains\" && not && sensitive) {\n      select\n        .sql(` AND (${jsonKey}::text NOT LIKE `)\n        .param(`%${value}%`)\n        .sql(` OR ${filter.key}::text IS NULL)`);\n    } else if (filter.operator === \"Contains\" && !not && sensitive) {\n      select.sql(` AND ${jsonKey}::text LIKE `).param(`%${value}%`);\n    } else if (filter.operator === \"Contains\" && not && !sensitive) {\n      select\n        .sql(` AND (${jsonKey}::text NOT ILIKE `)\n        .param(`%${value}%`)\n        .sql(` OR ${filter.key}::text IS NULL)`);\n    } else if (filter.operator === \"Contains\" && !not && !sensitive) {\n      select.sql(` AND ${jsonKey}::text ILIKE `).param(`%${value}%`);\n    } else if (not && sensitive) {\n      select.sql(` AND (${jsonKey}::text <> `).param(value).sql(` OR ${filter.key}::text IS NULL)`);\n    } else if (!not && sensitive) {\n      select.sql(` AND ${jsonKey}::text = `).param(value);\n    } else if (not && !sensitive) {\n      select\n        .sql(` AND (LOWER(${jsonKey}::text) <> `)\n        .param(value.toLowerCase())\n        .sql(` OR ${filter.key}::text IS NULL)`);\n    } else {\n      select.sql(` AND LOWER(${jsonKey}::text) = `).param(value.toLowerCase());\n    }\n  }\n}\n\n// returns all the fields that are of type text (for the q= filter)\nfunction getTextFieldsFromTable(informationSchema) {\n  const textFields: string[] = [];\n  let field: string;\n  let type: string;\n\n  for (field in informationSchema) {\n    if (Object.prototype.hasOwnProperty.call(informationSchema, field)) {\n      //if (informationSchema.hasOwnProperty(field)) {\n      // if (field in informationSchema) {\n      type = informationSchema[field].type;\n\n      if (\n        type === \"text\" ||\n        type === \"varchar\" ||\n        type === \"character varying\" ||\n        type === \"char\" ||\n        type === \"character\" ||\n        type === \"uuid\"\n      ) {\n        textFields.push(field);\n      }\n    }\n  }\n\n  return textFields;\n}\n\n// filter all the textfields by a value (for the q= filter)\nfunction filterFieldByValues(select, value, textFields) {\n  let i;\n\n  select.sql(\" AND (\");\n  for (i = 0; i < textFields.length; i++) {\n    if (i > 0) {\n      select.sql(\" OR \");\n    }\n    select.sql(`\"${textFields[i]}\"::text ILIKE `).param(`%${value}%`);\n  }\n  select.sql(\")\");\n}\n\n// filter general (q=): filters in all the fields of type text, with multiple values supported\n// i.e. if the filter is q=test+value it will find records with both field AND value in any of the text fields\nfunction filterGeneral(select, value, textFields) {\n  const values = value.split(/[ +]/);\n  let i;\n\n  for (i = 0; i < values.length; i++) {\n    filterFieldByValues(select, values[i], textFields);\n  }\n}\n\nfunction getFieldBaseType(fieldType) {\n  const type = fieldType.trim().toLowerCase();\n\n  if (type.match(/^timestamp/) || type === \"date\") {\n    return \"timestamp\";\n  }\n\n  if (type === \"array\") {\n    return \"array\";\n  }\n\n  if (type === \"boolean\") {\n    return \"boolean\";\n  }\n\n  if (\n    type === \"text\" ||\n    type === \"varchar\" ||\n    type === \"character varying\" ||\n    type === \"char\" ||\n    type === \"character\" ||\n    type === \"uuid\"\n  ) {\n    return \"text\";\n  }\n\n  if (\n    type === \"numeric\" ||\n    type === \"integer\" ||\n    type === \"bigint\" ||\n    type === \"smallint\" ||\n    type === \"decimal\" ||\n    type === \"real\" ||\n    type === \"double precision\" ||\n    type === \"smallserial\" ||\n    type === \"serial\" ||\n    type === \"bigserial\"\n  ) {\n    return \"numeric\";\n  }\n  if (type === \"jsonb\" || type === \"json\") {\n    return \"json\";\n  }\n\n  return null;\n}\n/**\n * The default filter gets multiple arguments in order to analyze\n * how the user wants the result filtered.\n * The second argument is the SQL query 'so far', that will be modified (!)\n * to reflect whatever this filter wants to add to the query.\n *\n * REMARKS !!!\n * The fact that this object can be modified has been abused before to add joins etc\n * by doing string replaces.\n * This feels entirely wrong. Instead, this function should return an object containing\n * * whetever needs to be added to the where clause + the necessary parameters\n * * any joins that need to be done in order to make the where clause work\n * * any CTEs that need to be added to the query\n * * ... (adding fields to the select clause maybe?)\n * And the calling function should be responsible for using that information\n * in order to modify the query it has so far, instead of putting that responsibility here.\n *\n *\n * @param valueEnc: the search param value (after the = sign)\n * @param query: the sqlQuery object that gets modified by this function (mostly adding 'AND ...' to the where clause)!!!\n * @param parameter: the search param name (before the = sign)\n * @param mapping: the matching record from the resources array that describes for the matched path what the resources at this address will look like\n */\nfunction defaultFilter(\n  valueEnc: string,\n  query: TPreparedSql,\n  parameter: string,\n  _tx: IDatabase<unknown, IClient>,\n  _doCount: boolean,\n  mapping: TResourceDefinition,\n  _urlParameters: ParsedUrlQuery,\n) {\n  const value = decodeURIComponent(valueEnc);\n\n  // 1) Analyze parameter for postfixes, and determine the key of the resource mapping.\n  const filter = analyseParameter(parameter);\n\n  // 2) Find data type on database from information schema;\n  const { informationSchema } = global.sri4node_configuration as TSriConfig;\n  const idx = mapping.type;\n  const field: TInformationSchema[string][string] | null =\n    informationSchema?.[idx][filter.key] ?? null;\n\n  // 3) Extend the sql query with the correct WHERE clause.\n  if (field) {\n    const baseType = getFieldBaseType(field.type);\n    let filterFn;\n    if (baseType === \"text\") {\n      filterFn = filterString;\n    } else if (baseType === \"numeric\" || baseType === \"timestamp\") {\n      filterFn = filterNumericOrTimestamp;\n    } else if (baseType === \"array\") {\n      filterFn = filterArray;\n    } else if (baseType === \"boolean\") {\n      filterFn = filterBoolean;\n    } else if (baseType === \"json\") {\n      filterFn = filterJson;\n    }\n\n    if (filterFn) {\n      filterFn(query, filter, value, mapping, baseType, field);\n    }\n  } else if (filter.key === \"q\") {\n    filterGeneral(query, value, getTextFieldsFromTable(informationSchema?.[idx]));\n  } else {\n    throw new SriError({\n      status: 404,\n      errors: [\n        {\n          code: \"invalid.query.parameter\",\n          parameter,\n          possibleParameters: Object.keys(informationSchema?.[idx] ?? {}),\n        },\n      ],\n    });\n  }\n}\n\nexport { defaultFilter };\n", "/*\nExternal utility functions for mapping from/to the postgres database.\nUse in the 'map' section of yout sri4node configuration\n*/\n\nfunction removeifnull(key, e) {\n  if (e[key] == null) {\n    delete e[key];\n  }\n}\n\nfunction remove(key, e) {\n  delete e[key];\n}\n\nfunction now(key, e) {\n  e[key] = new Date().toISOString();\n}\n\nfunction value(value) {\n  return function (key, e) {\n    e[key] = value;\n  };\n}\n\nfunction parse(key, e) {\n  e[key] = JSON.parse(e[key]);\n}\n\nfunction stringify(key, e) {\n  e[key] = JSON.stringify(e[key]);\n}\n\nfunction base64enc(key, e) {\n  if (e[key] !== null) {\n    e[key] = e[key].toString(\"base64\");\n  }\n}\n\nexport { removeifnull, remove, now, value, parse, stringify, base64enc };\n", "/*\nUtility function for reading the information schema\nof the database. Creates a global cache, and assumes\nthe information schema does not change at runtime.\n\nIt returns a 2-dimensional associative array that\ncan be accessed like this :\n\nvar is = require('./informationSchema')(database, configuration, logverbose);\nvar type = is['/communities']['phone'];\nif(type === 'text') {\n  // do something.\n}\n*/\nimport _ from \"lodash\";\n\nimport { prepareSQL } from \"./queryObject\";\nimport * as common from \"./common\";\nimport { TInformationSchema, TSriConfig } from \"./typeDefinitions\";\nimport { IDatabase } from \"pg-promise\";\n\n/**\n * Assumes that sriConfig.databaseConnectionParameters.schema is set to a single string !!!\n *\n */\nasync function informationSchema(\n  db: IDatabase<unknown>,\n  sriConfig: TSriConfig,\n): Promise<TInformationSchema> {\n  const tableNames = _.uniq(sriConfig.resources.map((mapping) => common.tableFromMapping(mapping)));\n  const query = prepareSQL(\"information-schema\");\n  const { schema } = sriConfig.databaseConnectionParameters;\n  let schemaParam = \"public\";\n  if (Array.isArray(schema)) {\n    // eslint-disable-next-line prefer-destructuring\n    schemaParam = schema[0];\n    // prefer-destructuring would make this kind of ugly\n    // ([schemaParam] = schema);\n  } else if (typeof schema === \"function\") {\n    schemaParam = (await schema(db))?.toString() || schemaParam;\n  } else if (schema) {\n    schemaParam = schema;\n  }\n\n  if (tableNames.length === 0) {\n    // avoid useless query (which will fail as well)\n    return {};\n  }\n\n  query\n    .sql(\n      `SELECT c.table_name, c.column_name, c.data_type, e.data_type AS element_type from information_schema.columns c\n          LEFT JOIN information_schema.element_types e\n            ON ((c.table_catalog, c.table_schema, c.table_name, 'TABLE', c.dtd_identifier)\n                      = (e.object_catalog, e.object_schema, e.object_name, e.object_type, e.collection_type_identifier))\n          WHERE table_schema = `,\n    )\n    .param(schemaParam)\n    .sql(` AND`)\n    .valueIn(\"c.table_name\", tableNames);\n\n  const rowsByTable = _.groupBy(await common.pgExec(db, query), (r) => r.table_name);\n\n  return Object.fromEntries(\n    sriConfig.resources\n      .filter((mapping) => !mapping.onlyCustom)\n      .map((mapping) => {\n        return [\n          mapping.type,\n          Object.fromEntries(\n            rowsByTable[common.tableFromMapping(mapping)].map((c) => [\n              c.column_name,\n              { type: c.data_type, element_type: c.element_type },\n            ]),\n          ),\n        ];\n      }),\n  );\n}\n\nexport { informationSchema };\n", "import _ from \"lodash\";\nimport pMap from \"p-map\";\nimport pFilter from \"p-filter\";\nimport url from \"url\";\nimport {\n  debug,\n  sqlColumnNames,\n  getCountResult,\n  transformRowToObject,\n  tableFromMapping,\n  pgExec,\n} from \"./common\";\nimport { TResourceDefinition, SriError, TSriRequest, TPreparedSql } from \"./typeDefinitions\";\nimport { prepareSQL } from \"./queryObject\";\n\nimport { applyHooks } from \"./hooks\";\nimport { executeExpansion } from \"./expand\";\nimport * as queryUtils from \"./queryUtils\";\nimport { IDatabase } from \"pg-promise\";\nimport { ParsedUrlQuery } from \"querystring\";\n\n// Constants\nconst DEFAULT_LIMIT = 30;\nconst MAX_LIMIT = 500;\n\n// apply extra parameters on request URL for a list-resource to a select.\nasync function applyRequestParameters(\n  mapping: TResourceDefinition,\n  query: TPreparedSql,\n  urlparameters: ParsedUrlQuery,\n  tx: IDatabase<unknown>,\n  doCount: boolean,\n) {\n  const standardParameters = [\n    \"orderBy\",\n    \"descending\",\n    \"limit\",\n    \"keyOffset\",\n    \"expand\",\n    \"hrefs\",\n    \"modifiedSince\",\n    \"$$includeCount\",\n    \"offset\",\n  ];\n\n  if (mapping.query) {\n    await pMap(\n      Object.keys(urlparameters),\n      async (key) => {\n        const currentUrlParam = urlparameters[key];\n        const keyAsString =\n          typeof currentUrlParam === \"string\" ? currentUrlParam : (currentUrlParam || []).join(\",\");\n        if (!standardParameters.includes(key)) {\n          if (mapping.query?.[key] || mapping.query?.defaultFilter) {\n            // Execute the configured function that will apply this URL parameter\n            // to the SELECT statement\n            if (!mapping.query[key] && mapping.query.defaultFilter) {\n              await mapping.query.defaultFilter(\n                keyAsString,\n                query,\n                key,\n                tx,\n                doCount,\n                mapping,\n                urlparameters,\n              );\n            } else {\n              await mapping.query[key](\n                keyAsString,\n                query,\n                key,\n                tx,\n                doCount,\n                mapping,\n                urlparameters,\n              );\n            }\n          } else {\n            throw new SriError({\n              status: 404,\n              errors: [{ code: \"unknown.query.parameter\", parameter: key }],\n            }); // this is small API change (previous: errors: [{code: 'invalid.query.parameter', parameter: key}])\n          }\n        } else if (key === \"hrefs\" && urlparameters.hrefs) {\n          // queryUtils.filterHrefs(urlparameters.hrefs, query, key, tx, count, mapping);\n          queryUtils.filterHrefs(keyAsString, query, key, tx, doCount, mapping, urlparameters);\n        } else if (key === \"modifiedSince\") {\n          queryUtils.modifiedSince(keyAsString, query, key, tx, doCount, mapping, urlparameters);\n        }\n      },\n      { concurrency: 1 },\n    );\n  }\n}\n\nasync function getSQLFromListResource(\n  mapping: TResourceDefinition,\n  parameters: ParsedUrlQuery,\n  doCount: boolean,\n  tx: IDatabase<unknown>,\n  query: TPreparedSql,\n) {\n  const table = tableFromMapping(mapping);\n\n  let sql;\n  let columns;\n  if ((parameters.expand as string)?.toLowerCase() === \"none\") {\n    if (parameters.orderBy) {\n      columns = (parameters.orderBy as string)\n        .split(\",\")\n        .map((v) => `\"${v}\"`)\n        .join(\",\");\n    } else {\n      // this should become obsolete when we have a separate query parser that builds a fully deterministic parseTree\n      // because\n      columns = '\"key\",\"$$meta.created\"';\n    }\n    // what if orderby is specified in a list query with expand=NONE?\n  } else {\n    columns = sqlColumnNames(mapping, (parameters.expand as string)?.toLowerCase() === \"summary\");\n  }\n\n  if (doCount) {\n    if (parameters[\"$$meta.deleted\"] === \"true\") {\n      sql = `select count(*) from \"${table}\" where \"${table}\".\"$$meta.deleted\" = true `;\n    } else if (parameters[\"$$meta.deleted\"] === \"any\") {\n      sql = `select count(*) from \"${table}\" where 1=1 `;\n    } else {\n      sql = `select count(*) from \"${table}\" where \"${table}\".\"$$meta.deleted\" = false `;\n    }\n    query.sql(sql);\n  } else {\n    if (parameters[\"$$meta.deleted\"] === \"true\") {\n      sql = `select ${columns} from \"`;\n      sql += `${table}\" where \"${table}\".\"$$meta.deleted\" = true `;\n    } else if (parameters[\"$$meta.deleted\"] === \"any\") {\n      sql = `select ${columns} from \"`;\n      sql += `${table}\" where 1=1 `;\n    } else {\n      sql = `select ${columns} from \"`;\n      sql += `${table}\" where \"${table}\".\"$$meta.deleted\" = false `;\n    }\n    query.sql(sql);\n  }\n\n  debug(\"trace\", \"listResource - applying URL parameters to WHERE clause\");\n  await applyRequestParameters(mapping, query, parameters, tx, doCount);\n}\n\nconst applyOrderAndPagingParameters = (\n  query,\n  queryParams,\n  mapping,\n  queryLimit,\n  maxlimit,\n  keyOffset,\n  offset,\n) => {\n  // All list resources support orderBy, limit and offset.\n\n  // Order parameters\n  const { orderBy, descending } = queryParams;\n\n  let orderKeys = [\"$$meta.created\", \"key\"]; // default\n\n  if (orderBy !== undefined) {\n    orderKeys = orderBy.split(\",\");\n    const invalidOrderByKeys = orderKeys.filter(\n      (k) => k !== \"$$meta.created\" && k !== \"$$meta.modified\" && !mapping.map[k],\n    );\n    if (invalidOrderByKeys.length !== 0) {\n      throw new SriError({\n        status: 400,\n        errors: [\n          {\n            code: \"invalid.orderby.parameter\",\n            message: `Can not order by [${orderBy}]. Unknown properties: ${invalidOrderByKeys.join(\n              \", \",\n            )}.`,\n          },\n        ],\n      });\n    }\n  }\n\n  // add paging to where clause\n\n  if (keyOffset) {\n    const keyValues = keyOffset.split(\",\").map((o) => decodeURIComponent(o));\n    if (keyValues.length !== orderKeys.length) {\n      throw new SriError({\n        status: 400,\n        errors: [\n          {\n            code: \"invalid.keyoffset\",\n            message: `Number of offset key values (${keyValues.length}) does not match number of order keys (${orderKeys.length}).`,\n          },\n        ],\n      });\n    }\n\n    const table = tableFromMapping(mapping);\n    const orderKeyOp = descending === \"true\" ? \"<\" : \">\";\n    query.sql(` AND (${orderKeys.map((k) => `\"${table}\".\"${k}\"`).join()}) ${orderKeyOp} (`);\n\n    orderKeys.forEach((_k, idx) => {\n      if (idx > 0) {\n        query.sql(\",\");\n      }\n      query.param(keyValues[idx]);\n    });\n\n    query.sql(\")\");\n  }\n\n  // add order parameter\n  query.sql(\n    ` order by ${orderKeys\n      .map((k) => `\"${k}\" ${descending === \"true\" ? \"desc\" : \"asc\"}`)\n      .join(\",\")}`,\n  );\n\n  // add limit parameter\n  const isGetAllExpandNone =\n    queryLimit === \"*\" &&\n    queryParams.expand !== undefined &&\n    queryParams.expand.toLowerCase() === \"none\";\n  if (!isGetAllExpandNone) {\n    if (queryLimit > maxlimit || queryLimit === \"*\") {\n      throw new SriError({\n        status: 409,\n        errors: [\n          {\n            code: \"invalid.limit.parameter\",\n            type: \"ERROR\",\n            message: `The maximum allowed limit is ${maxlimit}`,\n          },\n        ],\n      });\n    }\n    // limit condition is always added except special case where the parameter limit=* and expand is NONE (#104)\n    query.sql(\" limit \").param(queryLimit);\n  }\n\n  if (offset) {\n    if (keyOffset) {\n      throw new SriError({\n        status: 409,\n        errors: [\n          {\n            code: \"offset.and.keyoffset.incompatible\",\n            type: \"ERROR\",\n            message: 'The parameters \"offset\" and \"keyOffset\" cannot be used together',\n          },\n        ],\n      });\n    } else {\n      query.sql(\" offset \").param(offset);\n    }\n  }\n\n  return orderKeys;\n};\n\n// sriRequest\nconst handleListQueryResult = (sriRequest, rows, count, mapping, queryLimit, orderKeys) => {\n  const results: any[] = [];\n  const { originalUrl } = sriRequest;\n  const queryParams = sriRequest.query;\n\n  const tableInformation = global.sri4node_configuration.informationSchema[mapping.type];\n\n  // const elements = [];\n  rows.forEach((currentrow) => {\n    const element: any = {\n      href: `${mapping.type}/${currentrow.key}`,\n    };\n\n    // full, or any set of expansion values that must\n    // all start with \"results.href\" or \"results.href.*\" will result in inclusion\n    // of the regular resources in the list resources.\n    if (\n      !queryParams.expand ||\n      queryParams.expand.toLowerCase() === \"full\" ||\n      queryParams.expand.toLowerCase() === \"summary\" ||\n      queryParams.expand.indexOf(\"results\") === 0\n    ) {\n      element.$$expanded = transformRowToObject(currentrow, mapping);\n      element.$$expanded.$$meta.type = mapping.metaType;\n    } else if (queryParams.expand && queryParams.expand.toLowerCase() === \"none\") {\n      // Intentionally left blank.\n    } else if (queryParams.expand) {\n      // Error expand must be either 'full','none' or start with 'href'\n      const msg = `listResource - expand value unknown : ${queryParams.expand}`;\n      debug(\"trace\", msg);\n      throw new SriError({\n        status: 400,\n        errors: [\n          {\n            code: \"parameter.value.unknown\",\n            msg: `Unknown value [${queryParams.expand}] for 'expand' parameter. The possible values are 'NONE', 'SUMMARY' and 'FULL'.`,\n            parameter: \"expand\",\n            value: queryParams.expand,\n            possibleValues: [\"NONE\", \"SUMMARY\", \"FULL\"],\n          },\n        ],\n      });\n    }\n    results.push(element);\n  });\n\n  const output: any = {\n    $$meta: {\n      schema: `${mapping.type}/schema`,\n      docs: `${mapping.type}/docs`,\n    },\n    results,\n  };\n\n  if (count != null) {\n    output.$$meta.count = count;\n  }\n\n  const addOrReplaceParameter = (url, parameter, value) => {\n    if (url.indexOf(parameter) > 0) {\n      return url.replace(\n        new RegExp(`${parameter}[^&]*`),\n        `${parameter}=${encodeURIComponent(value)}`,\n      );\n    }\n    return `${url + (url.indexOf(\"?\") > 0 ? \"&\" : \"?\") + parameter}=${encodeURIComponent(value)}`;\n  };\n\n  if (results.length === parseInt(queryLimit, 10) && results.length > 0) {\n    const lastElement =\n      queryParams.expand && queryParams.expand.toLowerCase() === \"none\"\n        ? rows[queryLimit - 1]\n        : results[queryLimit - 1].$$expanded;\n    const keyOffset = orderKeys\n      .map((k) => {\n        // !!! _.get supports a dotted notation path { 'my.key': 'value' } as well as { my: { key: 'value' } }\n        const o = _.get(lastElement, k);\n        if (tableInformation[k].type === \"timestamp with time zone\") {\n          return encodeURIComponent(o);\n        } else if (o === null) {\n          return null;\n        }\n        return encodeURIComponent(o.toString());\n      })\n      .join(\",\");\n    output.$$meta.next = addOrReplaceParameter(originalUrl, \"keyOffset\", keyOffset);\n  }\n\n  return output;\n};\n\nasync function getListResource(\n  phaseSyncer,\n  tx,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n) {\n  const queryParams = sriRequest.query;\n  const { type } = mapping;\n\n  const defaultlimit = mapping.defaultlimit || DEFAULT_LIMIT;\n  const maxlimit = mapping.maxlimit || MAX_LIMIT;\n  const queryLimit = queryParams.limit || defaultlimit;\n  const keyOffset = queryParams.keyOffset || \"\";\n  const { offset } = queryParams;\n\n  await phaseSyncer.phase(); // step 0\n  await phaseSyncer.phase(); // step 1\n  await phaseSyncer.phase(); // step 2\n\n  await applyHooks(\"before read\", mapping.beforeRead || [], (f) => f(tx, sriRequest), sriRequest);\n\n  await phaseSyncer.phase();\n\n  debug(\"trace\", `listResource - GET list resource starting${type}`);\n\n  let count: any = null;\n  let rows;\n  let orderKeys;\n  try {\n    let includeCount = mapping.listResultDefaultIncludeCount;\n    if (queryParams.$$includeCount !== undefined) {\n      includeCount = queryParams.$$includeCount === \"true\";\n    }\n    if (includeCount) {\n      const countquery = prepareSQL();\n      await getSQLFromListResource(mapping, queryParams, true, tx, countquery);\n      debug(\"trace\", \"listResource - executing SELECT COUNT query on tx\");\n      count = await getCountResult(tx, countquery, sriRequest);\n    }\n\n    const query = prepareSQL();\n    await getSQLFromListResource(mapping, queryParams, false, tx, query);\n    orderKeys = applyOrderAndPagingParameters(\n      query,\n      queryParams,\n      mapping,\n      queryLimit,\n      maxlimit,\n      keyOffset,\n      offset,\n    );\n    debug(\"trace\", \"listResource - executing SELECT query on tx\");\n    rows = await pgExec(tx, query, sriRequest);\n  } catch (error) {\n    if (error.code === \"42703\") {\n      // UNDEFINED COLUMN\n      throw new SriError({ status: 409, errors: [{ code: \"invalid.query.parameter\" }] });\n    } else {\n      throw error;\n    }\n  }\n\n  sriRequest.containsDeleted = rows.some((r) => r[\"$$meta.deleted\"] === true);\n\n  const output = handleListQueryResult(sriRequest, rows, count, mapping, queryLimit, orderKeys);\n\n  await phaseSyncer.phase();\n  await phaseSyncer.phase();\n\n  debug(\"trace\", \"listResource - executing afterRead functions on results\");\n\n  await applyHooks(\n    \"after read\",\n    mapping.afterRead || [],\n    (f) =>\n      f(\n        tx,\n        sriRequest,\n        output.results.map((e) => {\n          if (e.$$expanded) {\n            return {\n              permalink: e.href,\n              incoming: null,\n              stored: e.$$expanded,\n            };\n          }\n          return {\n            permalink: e.href,\n            incoming: null,\n            stored: null,\n          };\n        }),\n      ),\n    sriRequest,\n  );\n\n  await phaseSyncer.phase();\n\n  debug(\"trace\", `listResource - executing expansion : ${queryParams.expand}`);\n  await executeExpansion(tx, sriRequest, output.results, mapping);\n\n  return { status: 200, body: output };\n}\n\n/// ================\n\nconst matchUrl = (url, mapping) => {\n  if (url.match(mapping.listResourceRegex) !== null) {\n    return { type: \"list\" };\n  }\n  const matchResult = url.match(mapping.singleResourceRegex);\n  if (matchResult !== null) {\n    const key = matchResult[1];\n    return { type: \"single\", key };\n  }\n  throw new SriError({ status: 400, errors: [{ code: \"unknown.resource.type\", url }] });\n};\n\n// Check if a given raw url A is a subset of the given raw urls in list B\n\n// POST /[resource]/isPartOf\n// {\n//  \"a\": { \"href\": [urlA] }\n//  \"b\": { \"hrefs\": [ [urlB1], [urlB2], [urlB3] ] }\n// }\n// ==> [ [urlB2] ]  (all raw urls from list B for which url A is a subset)\n\nasync function isPartOf(phaseSyncer, tx, sriRequest, mapping) {\n  await phaseSyncer.phase();\n  await phaseSyncer.phase();\n  await phaseSyncer.phase();\n  await phaseSyncer.phase();\n  await phaseSyncer.phase();\n\n  if (\n    sriRequest.body.a === undefined ||\n    sriRequest.body.a.href === undefined ||\n    sriRequest.body.b === undefined ||\n    sriRequest.body.b.hrefs === undefined\n  ) {\n    throw new SriError({\n      status: 400,\n      errors: [{ code: \"a.href.and.b.hrefs.needs.to.specified\" }],\n    });\n  }\n  if (Array.isArray(sriRequest.body.a.href)) {\n    throw new SriError({ status: 400, errors: [{ code: \"a.href.must.be.single.value\" }] });\n  }\n  if (!Array.isArray(sriRequest.body.b.hrefs)) {\n    throw new SriError({ status: 400, errors: [{ code: \"b.hrefs.must.be.array\" }] });\n  }\n\n  const urlA = sriRequest.body.a.href;\n  const typeA = matchUrl(urlA, mapping);\n\n  const resultList = await pFilter(sriRequest.body.b.hrefs, async (urlB: string) => {\n    const typeB = matchUrl(urlB, mapping);\n\n    if (typeB.type === \"single\") {\n      if (typeA.type === \"single\") {\n        return typeA.key === typeB.key;\n      }\n      return false;\n    }\n    const { query: paramsB } = url.parse(urlB, true);\n    const queryB = prepareSQL();\n    try {\n      await getSQLFromListResource(mapping, paramsB, false, tx, queryB);\n    } catch (err) {\n      throw new SriError({\n        status: 400,\n        errors: [{ code: \"resource.b.raised.error\", url: urlB, err }],\n      });\n    }\n    const sqlB = queryB.text;\n    const valuesB = queryB.params;\n\n    const query = prepareSQL();\n    if (typeA.type === \"single\") {\n      query.sql(\n        `SELECT EXISTS ( SELECT key from (${sqlB}) as temp WHERE key='${typeA.key}' )  as result;`,\n      );\n      query.params.push(...valuesB);\n    } else {\n      const { query: paramsA } = url.parse(urlA, true);\n      const queryA = prepareSQL();\n      try {\n        await getSQLFromListResource(mapping, paramsA, false, tx, queryA);\n      } catch (err) {\n        throw new SriError({\n          status: 400,\n          errors: [{ code: \"resource.a.raised.error\", url: urlA, err }],\n        });\n      }\n      const sqlA = queryA.text;\n      const valuesA = queryA.params;\n\n      query.sql(\n        `SELECT NOT EXISTS ( SELECT key from (${sqlA}) as a WHERE NOT EXISTS (SELECT 1 FROM (${sqlB}) as b WHERE a.key = b.key)) as result;`,\n      );\n      query.params.push(...valuesA);\n      query.params.push(...valuesB);\n    }\n    const [{ result }] = await pgExec(tx, query, sriRequest);\n    return result;\n  });\n  await phaseSyncer.phase();\n  await phaseSyncer.phase();\n  return { status: 200, body: resultList };\n}\n\n//= ================\n\nexport { getListResource, getSQLFromListResource, isPartOf };\n", "/* Handles the ?expand parameter */\nimport _ from \"lodash\";\nimport pMap from \"p-map\";\n// import pMap from 'p-map'; // This module is declared with 'export =', and can only be used with a default import when using the 'esModuleInterop' flag.\nimport {\n  debug,\n  typeToConfig,\n  sqlColumnNames,\n  transformRowToObject,\n  tableFromMapping,\n  pgExec,\n} from \"./common\";\nimport { SriError, TResourceDefinition, TSriRequest } from \"./typeDefinitions\";\nimport { prepareSQL } from \"./queryObject\";\nimport { applyHooks } from \"./hooks\";\n\nconst checkRecurse = (expandpath) => {\n  const parts = expandpath.split(\".\");\n  if (parts.length > 1) {\n    return { expand: _.first(parts), recurse: true, recursepath: _.tail(parts).join(\".\") };\n  }\n  return { expand: expandpath, recurse: false };\n};\n\n/**\n * Expands a single path on an array of elements.\n * Potential improvement : when the expansion would load obejcts that are already\n * in the cluster currently loaded, re-use the loaded element, rather that querying it again.\n * async function executeSingleExpansion(db, elements, mapping, resources, expandpath, me, reqUrl) {\n * @param db\n * @param sriRequest\n * @param elements\n * @param mapping\n * @param resources\n * @param expandpath\n */\nasync function executeSingleExpansion(\n  db,\n  sriRequest: TSriRequest,\n  elements: Array<Record<string, any>>,\n  mapping: TResourceDefinition,\n  resources: Array<TResourceDefinition>,\n  expandpath: string,\n) {\n  // console.log(expandpath)\n  if (elements && elements.length > 0) {\n    const { expand, recurse, recursepath } = checkRecurse(expandpath);\n    if (!mapping.map?.[expand]) {\n      debug(\"trace\", `expand - rejecting expand value [${expand}]`);\n      throw new SriError({\n        status: 404,\n        errors: [\n          { code: \"expansion.failed\", msg: `Cannot expand [${expand}] because it is not mapped.` },\n        ],\n      });\n    } else {\n      const keysToExpand: string[] = elements.reduce<string[]>((acc, element) => {\n        if (element[expand]) {\n          // ignore if undefined or null\n          const targetlink = element[expand].href;\n          const targetkey = _.last(targetlink.split(\"/\"));\n          // Don't add already included and items that are already expanded.\n          if (!acc.includes(targetkey) && !element[expand].$$expanded) {\n            acc.push(targetkey);\n          }\n        }\n        return acc;\n      }, [] as string[]);\n\n      if (keysToExpand.length > 0) {\n        const targetType: any = mapping.map[expand].references;\n        const typeToMapping = typeToConfig(resources);\n        const targetMapping = typeToMapping[targetType];\n        if (targetMapping === undefined) {\n          throw new SriError({\n            status: 400,\n            errors: [\n              {\n                code: \"expand.across.boundary\",\n                msg: \"Only references to resources defined in the same sri4node configuration as the referer can be expanded.\",\n              },\n            ],\n          });\n        }\n        const table = tableFromMapping(targetMapping);\n        const columns = sqlColumnNames(targetMapping);\n\n        const query = prepareSQL();\n        query.sql(`select ${columns} from \"${table}\" where key in (`).array(keysToExpand).sql(\")\");\n        const rows = await pgExec(db, query);\n        debug(\"trace\", \"expand - expansion query done\");\n\n        const expandedElements = rows.map((row) => {\n          const element = transformRowToObject(row, targetMapping);\n          element.$$meta.type = mapping.metaType;\n          return element;\n        });\n        const expandedElementsDict = _.fromPairs(\n          expandedElements.map((obj) => [obj.$$meta.permalink, obj]),\n        );\n\n        debug(\"trace\", \"expand - executing afterRead functions on expanded resources\");\n        await applyHooks(\"after read\", targetMapping.afterRead, (f) =>\n          f(\n            db,\n            sriRequest,\n            expandedElements.map((e) => ({\n              permalink: e.$$meta.permalink,\n              incoming: null,\n              stored: e,\n            })),\n          ),\n        );\n\n        // put expanded elements in place\n        elements.forEach((elem) => {\n          if (elem[expand] !== undefined && elem[expand] !== null) {\n            const permalinkToExpand = elem[expand].href;\n            elem[expand].$$expanded = expandedElementsDict[permalinkToExpand];\n          }\n        });\n\n        if (recurse) {\n          debug(\"trace\", `expand - recursing to next level of expansion : ${recursepath}`);\n          await executeSingleExpansion(\n            db,\n            sriRequest,\n            expandedElements,\n            targetMapping,\n            resources,\n            recursepath,\n          );\n        } else {\n          debug(\"trace\", \"expand - executeSingleExpansion resolving\");\n        }\n      }\n    }\n  }\n}\n\n/**\n * Reduce comma-separated expand parameter to array, in lower case, and remove 'results.href'\n * as prefix.\n * The rest of the processing of expansion does not make a distinction between list resources\n * and regular resources. Also rewrites 'none' and 'full' to the same format.\n * If none appears anywhere in the list, an empty array is returned.\n */\nfunction parseExpand(expand) {\n  const paths = expand.split(\",\");\n\n  let ret;\n  if (paths.map((p) => p.toLowerCase()).includes(\"none\")) {\n    ret = [];\n  } else {\n    ret = paths\n      .filter((p) => ![\"full\", \"summary\", \"results\"].includes(p.toLowerCase())) // 'full', 'results' are already handled\n      .map((p) => p.replace(/^results\\./, \"\"));\n  }\n\n  debug(\"trace\", `expand - parseExpand() results in : ${ret}`);\n\n  return ret;\n}\n\n/**\n Execute expansion on an array of elements.\n Takes into account a comma-separated list of property paths.\n Currently only one level of items on the elements can be expanded.\n\n So for list resources :\n - results.href.person is OK\n - results.href.community is OK\n - results.href.person,results.href.community is OK. (2 expansions - but both 1 level)\n - results.href.person.address is NOT OK - it has 1 expansion of 2 levels. This is not supported.\n\n For regular resources :\n - person is OK\n - community is OK\n - person,community is OK\n - person.address,community is NOT OK - it has 1 expansion of 2 levels. This is not supported.\n */\nasync function executeExpansion(db, sriRequest, elements, mapping) {\n  const { expand } = sriRequest.query;\n\n  const { resources } = global.sri4node_configuration;\n\n  debug(\"trace\", \"expand - executeExpansion()\");\n  if (expand) {\n    const paths = parseExpand(expand);\n    if (paths && paths.length > 0) {\n      const expandedElements = elements.map((element) => element.$$expanded || element);\n      await pMap(paths, (path: string) =>\n        executeSingleExpansion(db, sriRequest, expandedElements, mapping, resources, path),\n      );\n      debug(\"trace\", \"expand - expansion done\");\n    }\n  }\n}\n\nexport { executeExpansion };\n", "import _ from \"lodash\";\nimport Ajv from \"ajv\";\nimport addFormats from \"ajv-formats\";\nimport jsonPatch, { Operation } from \"fast-json-patch\";\nimport pMap from \"p-map\";\nimport { SriError, TSriRequest, TBeforePhase, TResourceDefinition } from \"./typeDefinitions\";\nimport {\n  debug,\n  error,\n  sqlColumnNames,\n  pgExec,\n  pgResult,\n  transformRowToObject,\n  transformObjectToRow,\n  errorAsCode,\n  isEqualSriObject,\n  setServerTimingHdr,\n  getParentSriRequest,\n  getParentSriRequestFromRequestMap,\n  tableFromMapping,\n  typeToMapping,\n  getPgp,\n  findPropertyInJsonSchema,\n} from \"./common\";\nimport { prepareSQL } from \"./queryObject\";\nimport { applyHooks } from \"./hooks\";\n\nimport * as expand from \"./expand\";\n// import { expand } from './expand';\nimport { PhaseSyncer } from \"./phaseSyncedSettle\";\nimport { IDatabase } from \"pg-promise\";\n\nconst ajv = new Ajv({ coerceTypes: true }); // options can be passed, e.g. {allErrors: true}\naddFormats(ajv);\n\nconst makeMultiError = (type) => () =>\n  new SriError({\n    status: 409,\n    errors: [\n      {\n        code: `multi.${type}.failed`,\n        msg:\n          `An error occurred during multi row ${type}. There is no indication which request(s)/row(s) caused the error, ` +\n          `to find out more information retry with individual ${type}s.`,\n      },\n    ],\n  });\n\nconst multiInsertError = makeMultiError(\"insert\");\nconst multiUpdateError = makeMultiError(\"update\");\nconst multiDeleteError = makeMultiError(\"delete\");\n\nfunction queryByKeyRequestKey(sriRequest: TSriRequest, mapping: TResourceDefinition, key: string) {\n  debug(\"trace\", `queryByKeyRequestKey(${key})`);\n  const { type } = mapping;\n  const parentSriRequest = getParentSriRequest(sriRequest);\n\n  if (findPropertyInJsonSchema(mapping.schema, \"key\") && mapping.validateKey) {\n    const validKey = mapping.validateKey(key);\n    if (!validKey) {\n      throw new SriError({\n        status: 400,\n        errors:\n          mapping.validateKey.errors?.map((e) => ({ code: \"key.invalid\", key, err: e })) || [],\n      });\n    }\n  }\n\n  if (parentSriRequest.queryByKeyFetchList === undefined) {\n    parentSriRequest.queryByKeyFetchList = {};\n  }\n  if (parentSriRequest.queryByKeyFetchList[type] === undefined) {\n    parentSriRequest.queryByKeyFetchList[type] = [];\n  }\n\n  parentSriRequest.queryByKeyFetchList[type].push(key);\n}\n\nfunction queryByKeyGetResult(\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n  key: string,\n  wantsDeleted: boolean,\n) {\n  debug(\"trace\", `queryByKeyGetResult(${key})`);\n  const { type } = mapping;\n  const parentSriRequest = getParentSriRequest(sriRequest);\n\n  if (\n    parentSriRequest.queryByKeyResults === undefined ||\n    parentSriRequest.queryByKeyResults[type] === undefined\n  ) {\n    const msg = `The function queryByKey did not produce the expected output for key ${key} and type ${type}`;\n    error(msg);\n    throw new SriError({\n      status: 500,\n      errors: [\n        {\n          code: \"fetching.key.failed\",\n          type,\n          key,\n          msg,\n        },\n      ],\n    });\n  }\n\n  const row = parentSriRequest.queryByKeyResults[type][key];\n  if (row !== undefined) {\n    if (row[\"$$meta.deleted\"] && !wantsDeleted) {\n      return { code: \"resource.gone\" };\n    }\n    return { code: \"found\", object: transformRowToObject(row, mapping) };\n  }\n  return { code: \"not.found\" };\n}\n\nconst beforePhaseQueryByKey: TBeforePhase = async function (sriRequestMap, _jobMap, _pendingJobs) {\n  const sriRequest = getParentSriRequestFromRequestMap(sriRequestMap);\n  if (sriRequest.queryByKeyFetchList !== undefined) {\n    const types = Object.keys(sriRequest.queryByKeyFetchList);\n    const results = await pMap(\n      types,\n      async (type) => {\n        const keys = sriRequest.queryByKeyFetchList[type];\n        const table = tableFromMapping(typeToMapping(type));\n        const columns = sqlColumnNames(typeToMapping(type));\n        const query = prepareSQL(`select-rows-by-key-from-${table}`);\n        const keyDbType = global.sri4node_configuration.informationSchema[type].key.type;\n        query\n          .sql(\n            `SELECT ${columns}\n                       FROM UNNEST(`,\n          )\n          .param(keys).sql(`::${keyDbType}[]) \"key\"\n                       INNER JOIN \"${table}\" USING (\"key\");`);\n\n        const rows = await pgExec(sriRequest.dbT, query); // pass no sriRequest because timing is already registered in beforePhase hook\n\n        return Object.fromEntries(rows.map((r) => [r.key, r]));\n      },\n      { concurrency: 3 },\n    );\n\n    sriRequest.queryByKeyResults = Object.fromEntries(_.zip(types, results));\n    delete sriRequest.queryByKeyFetchList;\n  }\n};\n\nasync function getRegularResource(\n  phaseSyncer: PhaseSyncer,\n  tx: IDatabase<unknown>,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n) {\n  const { key } = sriRequest.params;\n\n  await phaseSyncer.phase();\n  await phaseSyncer.phase();\n  await phaseSyncer.phase();\n\n  await applyHooks(\"before read\", mapping.beforeRead || [], (f) => f(tx, sriRequest), sriRequest);\n\n  await phaseSyncer.phase();\n\n  queryByKeyRequestKey(sriRequest, mapping, key);\n\n  await phaseSyncer.phase();\n\n  const result = queryByKeyGetResult(\n    sriRequest,\n    mapping,\n    key,\n    sriRequest.query[\"$$meta.deleted\"] === \"true\" || sriRequest.query[\"$$meta.deleted\"] === \"any\",\n  );\n\n  if (result.code == \"resource.gone\") {\n    throw new SriError({\n      status: 410,\n      errors: [{ code: \"resource.gone\", msg: \"Resource is gone\" }],\n    });\n  } else if (result.code == \"not.found\") {\n    throw new SriError({ status: 404, errors: [{ code: \"not.found\", msg: \"Not Found\" }] });\n  }\n\n  const element = result.object;\n\n  sriRequest.containsDeleted = element.$$meta.deleted;\n\n  element.$$meta.type = mapping.metaType;\n\n  debug(\"trace\", \"* executing expansion\");\n  await expand.executeExpansion(tx, sriRequest, [element], mapping);\n\n  await phaseSyncer.phase();\n\n  debug(\"trace\", \"* executing afterRead functions on results\");\n  await applyHooks(\n    \"after read\",\n    mapping.afterRead || [],\n    (f) =>\n      f(tx, sriRequest, [\n        {\n          permalink: element.$$meta.permalink,\n          incoming: null,\n          stored: element,\n        },\n      ]),\n    sriRequest,\n  );\n\n  await phaseSyncer.phase();\n\n  return { status: 200, body: element };\n}\n\nfunction getSchemaValidationErrors(json, schema, validateSchema) {\n  const valid = validateSchema(json);\n  if (!valid) {\n    console.log(\"Schema validation revealed errors.\");\n    console.log(validateSchema.errors);\n    console.log(\"JSON schema was : \");\n    console.log(JSON.stringify(schema, null, 2));\n    console.log(\"Document was : \");\n    console.log(JSON.stringify(json, null, 2));\n    return (validateSchema.errors || []).map((e) => ({\n      code: errorAsCode(e.message || \"\"),\n      err: e,\n    }));\n  }\n  return null;\n}\n\n/**\n * Will fetch the previous version from DB, patch it, then continue as if it were a regular PUT\n *\n * @param {PhaseSyncer} phaseSyncer\n * @param {IDatabase} tx\n * @param {TSriRequest} sriRequest\n * @param {TResourceDefinition} mapping\n * @param {*} previousQueriedByKey\n */\nasync function preparePatchInsideTransaction(\n  phaseSyncer: PhaseSyncer,\n  tx: IDatabase<unknown>,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n) {\n  const { key } = sriRequest.params;\n  const patch = (sriRequest.body || []) as Operation[];\n  // const patch:Operation[] = sriRequest.body?.map((b) => b.body as unknown as Operation) || [];\n\n  debug(\"trace\", `PATCH processing starting key ${key}`);\n\n  queryByKeyRequestKey(sriRequest, mapping, key);\n  await phaseSyncer.phase();\n  const result = queryByKeyGetResult(sriRequest, mapping, key, false);\n\n  if (result.code !== \"found\") {\n    // it wouldn't make sense to PATCH a deleted resource I guess?\n    throw new SriError({\n      status: 410,\n      errors: [{ code: \"resource.gone\", msg: \"Resource is gone\" }],\n    });\n  }\n\n  // overwrite the body with the patched previous record\n  try {\n    // RFC6902 (with 'op' and 'path'), RFC7396 (just a sparse object) NOT currently supported\n    sriRequest.body = jsonPatch.applyPatch(result.object, patch, true, false).newDocument;\n    debug(\"trace\", `Patched resource looks like this: ${JSON.stringify(sriRequest.body, null, 2)}`);\n  } catch (e) {\n    throw new SriError({\n      status: 400,\n      errors: [{ code: \"patch.invalid\", msg: \"The patch could not be applied.\", error: e }],\n    });\n  }\n\n  // from now on behave like a PUT of the patched object\n  return preparePutInsideTransaction(phaseSyncer, tx, sriRequest, mapping, result);\n}\n\n/**\n *\n * @param {*} phaseSyncer\n * @param {*} tx\n * @param {*} sriRequest\n * @param {*} mapping\n * @param {*} previousQueriedByKey if we've already queried the database for the object with the key\n * (result of queryByKey(tx, mapping, key, true)) then we can give to this function so it shouldn't\n * run the same query again. Useful for implementing a PATCH which will simply behave as if it were\n * a PUT after patching.\n */\nasync function preparePutInsideTransaction(\n  phaseSyncer: PhaseSyncer,\n  tx: any,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n  previousQueriedByKey: any = undefined,\n) {\n  const key = sriRequest.params.key;\n  const obj = sriRequest.body;\n  const table = tableFromMapping(mapping);\n\n  debug(\"trace\", `PUT processing starting for key ${key}`);\n\n  if (obj.key !== undefined && obj.key.toString() !== key) {\n    throw new SriError({\n      status: 400,\n      errors: [\n        { code: \"key.mismatch\", msg: \"Key in the request url does not match the key in the body.\" },\n      ],\n    });\n  }\n\n  // Treat fields with explicit null values the same as missing fields.\n  // We remove them now, before validation (otherwise validation will fail). They will be set\n  // to null again in 'transformObjectToRow' (just as fields missing in the original request).\n  // ^^^^^ this sounds like a bad idea... jsonschema allows you to define null as a valid option.\n  Object.keys(obj).forEach((k) => {\n    if (obj[k] === null) {\n      delete obj[k];\n    }\n  });\n\n  debug(\"trace\", \"Validating schema.\");\n  if (mapping.schema) {\n    // if (!mapping.schemaWithoutAdditionalProperties) {\n    //   mapping.schemaWithoutAdditionalProperties = schemaUtils.patchSchemaToDisallowAdditionalProperties(mapping.schema)\n    // }\n\n    const hrstart = process.hrtime();\n    const validationErrors = getSchemaValidationErrors(obj, mapping.schema, mapping.validateSchema);\n    if (validationErrors !== null) {\n      const errors = { validationErrors };\n      const schemaUrl = `https://${sriRequest.headers[\"host\"]}${mapping.type}/schema`;\n      throw new SriError({\n        status: 409,\n        errors: [{ code: \"validation.errors\", msg: \"Validation error(s)\", errors, schemaUrl }],\n      });\n    } else {\n      debug(\"trace\", \"Schema validation passed.\");\n    }\n    const hrend = process.hrtime(hrstart);\n    setServerTimingHdr(sriRequest, \"schema-validation\", hrend[0] * 1000 + hrend[1] / 1000000);\n  }\n\n  const permalink = mapping.type + \"/\" + key;\n\n  let result;\n  if (previousQueriedByKey !== undefined) {\n    // In this case no 'await phaseSyncer.phase()' is necessary because this happens in case of patch\n    // and preparePatchInsideTransaction() has already done an 'await phaseSyncer.phase()' while querying\n    // the resource.\n    result = previousQueriedByKey;\n  } else {\n    queryByKeyRequestKey(sriRequest, mapping, key);\n    await phaseSyncer.phase();\n    result = queryByKeyGetResult(sriRequest, mapping, key, false);\n  }\n\n  if (result.code == \"resource.gone\") {\n    // we are dealing with a PUT on a deleted resource\n    //  -> treat this as a new CREATE\n    //  -> remove old resource from DATABASE and then continue the \"insert\" code path\n\n    const deleteQ = prepareSQL(\"delete-\" + table);\n    deleteQ.sql(`delete from \"${table}\" where \"key\" = `).param(key);\n\n    const deleteRes = await pgResult(tx, deleteQ, sriRequest);\n\n    if (deleteRes.rowCount !== 1) {\n      debug(\"trace\", \"Removal of soft deleted resource failed ?!\");\n      debug(\"trace\", JSON.stringify(deleteRes));\n      throw new SriError({\n        status: 500,\n        errors: [{ code: \"delete.failed\", msg: \"Removal of soft deleted resource failed.\" }],\n      });\n    }\n  }\n\n  sriRequest.containsDeleted = false;\n  await phaseSyncer.phase();\n\n  if (result.code != \"found\") {\n    // insert new element\n\n    await applyHooks(\n      \"before insert\",\n      mapping.beforeInsert || [],\n      (f) => f(tx, sriRequest, [{ permalink: permalink, incoming: obj, stored: null }]),\n      sriRequest,\n    );\n\n    await phaseSyncer.phase();\n\n    const newRow: any = transformObjectToRow(obj, mapping, true);\n    newRow.key = key;\n\n    const type = mapping.type;\n    const parentSriRequest = getParentSriRequest(sriRequest);\n    if (parentSriRequest.putRowsToInsert === undefined) {\n      parentSriRequest.putRowsToInsert = {};\n    }\n    if (parentSriRequest.putRowsToInsert[type] === undefined) {\n      parentSriRequest.putRowsToInsert[type] = [];\n    }\n    if (parentSriRequest.putRowsToInsertIDs === undefined) {\n      parentSriRequest.putRowsToInsertIDs = [];\n    }\n    parentSriRequest.putRowsToInsert[type].push(newRow);\n    parentSriRequest.putRowsToInsertIDs.push(sriRequest.id);\n\n    return { opType: \"insert\", obj, permalink };\n  } else {\n    // update existing element\n    const prevObj = result.object;\n\n    await applyHooks(\n      \"before update\",\n      mapping.beforeUpdate || [],\n      (f) => f(tx, sriRequest, [{ permalink: permalink, incoming: obj, stored: prevObj }]),\n      sriRequest,\n    );\n\n    await phaseSyncer.phase();\n\n    // If new resource is the same as the one in the database => don't update the resource. Otherwise meta\n    // data fields 'modified date' and 'version' are updated. PUT should be idempotent.\n    if (isEqualSriObject(prevObj, obj, mapping)) {\n      debug(\"trace\", \"Putted resource does NOT contain changes -> ignore PUT.\");\n      await phaseSyncer.phase();\n      await phaseSyncer.phase();\n      await phaseSyncer.phase();\n      return { retVal: { status: 200 } };\n    }\n\n    const updateRow = transformObjectToRow(obj, mapping, false);\n    updateRow[\"$$meta.modified\"] = new Date();\n\n    const type = mapping.type;\n    const parentSriRequest = getParentSriRequest(sriRequest);\n    if (parentSriRequest.putRowsToUpdate === undefined) {\n      parentSriRequest.putRowsToUpdate = {};\n    }\n    if (parentSriRequest.putRowsToUpdate[type] === undefined) {\n      parentSriRequest.putRowsToUpdate[type] = [];\n    }\n    if (parentSriRequest.putRowsToUpdateIDs === undefined) {\n      parentSriRequest.putRowsToUpdateIDs = [];\n    }\n    parentSriRequest.putRowsToUpdate[type].push(updateRow);\n    parentSriRequest.putRowsToUpdateIDs.push(sriRequest.id);\n\n    return { opType: \"update\", obj, prevObj, permalink };\n  }\n}\n\nasync function beforePhaseInsertUpdateDelete(sriRequestMap, _jobMap, _pendingJobs) {\n  const sriRequest: TSriRequest = getParentSriRequestFromRequestMap(sriRequestMap);\n\n  const throwIfDbTUndefined = (sriReq: TSriRequest): void => {\n    if (sriReq?.dbT === undefined) {\n      throw new Error(\"[beforePhaseInsertUpdateDelete] Expected sriRequest.dbT to be defined\");\n    }\n  };\n  throwIfDbTUndefined(sriRequest);\n\n  const pgp = getPgp();\n\n  delete sriRequest.multiInsertFailed;\n  delete sriRequest.multiUpdateFailed;\n  delete sriRequest.multiDeleteFailed;\n\n  // INSERT\n  const putRowsToInsert = sriRequest.putRowsToInsert;\n  if (putRowsToInsert !== undefined) {\n    const types = Object.keys(putRowsToInsert);\n    await pMap(types, async (type) => {\n      const rows = putRowsToInsert[type];\n      const table = tableFromMapping(typeToMapping(type));\n      const cs = global.sri4node_configuration.pgColumns[table].insert;\n\n      // generating a multi-row insert query:\n      const query = pgp.helpers.insert(rows, cs);\n      try {\n        await sriRequest.dbT?.none(query);\n      } catch (err) {\n        sriRequest.multiInsertFailed = true;\n        if (err.code === \"25P02\") {\n          // postgres transaction aborted error -> caused by earlier error\n          sriRequest.multiDeleteError = err;\n        }\n        if (rows.length === 1) {\n          sriRequest.multiInsertError = err;\n        }\n      }\n    });\n  }\n  sriRequest.putRowsToInsert = undefined;\n\n  // UPDATE\n  const putRowsToUpdate = sriRequest.putRowsToUpdate;\n  if (putRowsToUpdate !== undefined) {\n    const types = Object.keys(putRowsToUpdate);\n    await pMap(types, async (type) => {\n      const rows = putRowsToUpdate[type];\n\n      const table = tableFromMapping(typeToMapping(type));\n      const cs = global.sri4node_configuration.pgColumns[table].update;\n      const keyDbType = global.sri4node_configuration.informationSchema[type].key.type;\n      const update = `${pgp.helpers.update(rows, cs)} WHERE \"$$meta.deleted\" = false AND v.key::${keyDbType} = t.key::${keyDbType}`;\n\n      try {\n        await sriRequest.dbT?.none(update);\n      } catch (err) {\n        sriRequest.multiUpdateFailed = true;\n        if (err.code === \"25P02\") {\n          // postgres transaction aborted error -> caused by earlier error\n          sriRequest.multiDeleteError = err;\n        }\n        if (rows.length === 1) {\n          sriRequest.multiUpdateError = err;\n        }\n      }\n    });\n  }\n  sriRequest.putRowsToUpdate = undefined;\n\n  // DELETE\n  const rowsToDelete = sriRequest.rowsToDelete;\n  if (rowsToDelete !== undefined) {\n    const types = Object.keys(rowsToDelete);\n    await pMap(types, async (type) => {\n      const rows = rowsToDelete[type];\n\n      const table = tableFromMapping(typeToMapping(type));\n      const cs = global.sri4node_configuration.pgColumns[table].delete;\n      const keyDbType = global.sri4node_configuration.informationSchema[type].key.type;\n      const update = `${pgp.helpers.update(rows, cs)} WHERE t.\"$$meta.deleted\" = false AND v.key::${keyDbType} = t.key::${keyDbType}`;\n\n      try {\n        await sriRequest.dbT?.none(update);\n      } catch (err) {\n        sriRequest.multiDeleteFailed = true;\n        if (err.code === \"25P02\") {\n          // postgres transaction aborted error -> caused by earlier error\n          sriRequest.multiDeleteError = err;\n        }\n        if (rows.length === 1) {\n          sriRequest.multiDeleteError = err;\n        }\n      }\n    });\n  }\n  sriRequest.rowsToDelete = undefined;\n}\n\nasync function handlePutResult(\n  phaseSyncer: PhaseSyncer,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n  state,\n) {\n  const parentSriRequest = getParentSriRequest(sriRequest);\n  if (state.opType === \"insert\") {\n    if (parentSriRequest.multiInsertFailed) {\n      if (parentSriRequest.multiInsertError !== undefined) {\n        const err = parentSriRequest.multiInsertError;\n        throw err;\n      } else {\n        throw multiInsertError();\n      }\n    }\n\n    await phaseSyncer.phase();\n\n    await applyHooks(\n      \"after insert\",\n      mapping.afterInsert,\n      (f) =>\n        f(sriRequest.dbT, sriRequest, [\n          { permalink: state.permalink, incoming: state.obj, stored: null },\n        ]),\n      sriRequest,\n    );\n\n    await phaseSyncer.phase();\n\n    return { status: 201 };\n  }\n  if (parentSriRequest.multiUpdateFailed) {\n    if (parentSriRequest.multiUpdateError !== undefined) {\n      const err = parentSriRequest.multiUpdateError;\n      throw err;\n    } else {\n      throw multiUpdateError();\n    }\n  }\n\n  await phaseSyncer.phase();\n\n  await applyHooks(\n    \"after update\",\n    mapping.afterUpdate || [],\n    (f) =>\n      f(sriRequest.dbT, sriRequest, [\n        { permalink: state.permalink, incoming: state.obj, stored: state.prevObj },\n      ]),\n    sriRequest,\n  );\n\n  await phaseSyncer.phase();\n\n  return { status: 200 };\n}\n\nasync function createOrUpdateRegularResource(\n  phaseSyncer: PhaseSyncer,\n  tx: IDatabase<unknown>,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n) {\n  await phaseSyncer.phase();\n  debug(\"trace\", \"* sri4node PUT processing invoked.\");\n  try {\n    const state = await preparePutInsideTransaction(phaseSyncer, tx, sriRequest, mapping);\n    if (state.retVal !== undefined) {\n      return state.retVal;\n    }\n    await phaseSyncer.phase();\n    const retVal = await handlePutResult(phaseSyncer, sriRequest, mapping, state);\n    return retVal;\n  } catch (err) {\n    // intercept db constraint violation errors and return 409 error\n    if (err.constraint !== undefined) {\n      throw new SriError({\n        status: 409,\n        errors: [{ code: \"db.constraint.violation\", msg: err.detail }],\n      });\n    } else {\n      if (!(err instanceof SriError || err?.__proto__?.constructor?.name)) {\n        throw new SriError({ status: 500, errors: [{ code: \"sql.error\", msg: err.message, err }] });\n      }\n      throw err;\n    }\n  }\n}\n\nasync function patchRegularResource(\n  phaseSyncer: PhaseSyncer,\n  tx: IDatabase<unknown>,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n) {\n  await phaseSyncer.phase();\n  debug(\"trace\", \"* sri4node PATCH processing invoked.\");\n  try {\n    const state = await preparePatchInsideTransaction(phaseSyncer, tx, sriRequest, mapping);\n    if (state.retVal !== undefined) {\n      return state.retVal;\n    }\n    await phaseSyncer.phase();\n    const retVal = await handlePutResult(phaseSyncer, sriRequest, mapping, state);\n    return retVal;\n  } catch (err) {\n    // intercept db constraint violation errors and return 409 error\n    if (err.constraint !== undefined) {\n      console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\n      console.log(err);\n      console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\n      throw new SriError({\n        status: 409,\n        errors: [{ code: \"db.constraint.violation\", msg: err.detail }],\n      });\n    } else {\n      throw err;\n    }\n  }\n}\n\nasync function deleteRegularResource(\n  phaseSyncer: PhaseSyncer,\n  tx: IDatabase<unknown>,\n  sriRequest: TSriRequest,\n  mapping: TResourceDefinition,\n) {\n  try {\n    await phaseSyncer.phase();\n\n    debug(\"trace\", \"sri4node DELETE invoked\");\n    const { key } = sriRequest.params;\n\n    queryByKeyRequestKey(sriRequest, mapping, key);\n\n    await phaseSyncer.phase();\n\n    const result = queryByKeyGetResult(\n      sriRequest,\n      mapping,\n      key,\n      sriRequest.query[\"$$meta.deleted\"] === \"true\" || sriRequest.query[\"$$meta.deleted\"] === \"any\",\n    );\n\n    if (result.code != \"found\") {\n      debug(\"trace\", \"No row affected - the resource is already gone\");\n      await phaseSyncer.phase();\n      await phaseSyncer.phase();\n      await phaseSyncer.phase();\n      await phaseSyncer.phase();\n    } else {\n      sriRequest.containsDeleted = false;\n\n      await phaseSyncer.phase();\n\n      const prevObj = result.object;\n      await applyHooks(\n        \"before delete\",\n        mapping.beforeDelete || [],\n        (f) => f(tx, sriRequest, [{ permalink: sriRequest.path, incoming: null, stored: prevObj }]),\n        sriRequest,\n      );\n\n      await phaseSyncer.phase();\n\n      const deleteRow = {\n        key,\n        \"$$meta.modified\": new Date(),\n        \"$$meta.deleted\": true,\n      };\n\n      const { type } = mapping;\n      const parentSriRequest = getParentSriRequest(sriRequest);\n      if (parentSriRequest.rowsToDelete === undefined) {\n        parentSriRequest.rowsToDelete = {};\n      }\n      if (parentSriRequest.rowsToDelete[type] === undefined) {\n        parentSriRequest.rowsToDelete[type] = [];\n      }\n      if (parentSriRequest.rowsToDeleteIDs === undefined) {\n        parentSriRequest.rowsToDeleteIDs = [];\n      }\n      parentSriRequest.rowsToDelete[type].push(deleteRow);\n      parentSriRequest.rowsToDeleteIDs.push(sriRequest.id);\n\n      await phaseSyncer.phase(); // at beginning of this phase deletes will be executed in one request for all concurrent batch deletes\n\n      if (parentSriRequest.multiDeleteFailed) {\n        if (parentSriRequest.multiDeleteError !== undefined) {\n          if (parentSriRequest.multiDeleteError.code === \"25P02\") {\n            // postgres transaction aborted error -> caused by earlier error\n            throw new SriError({\n              status: 202,\n              errors: [\n                {\n                  code: \"transaction.failed\",\n                  msg: \"Request cancelled due to database error generated by accompanying request in batch.\",\n                },\n              ],\n            });\n          }\n          const err = parentSriRequest.multiDeleteError;\n          throw err;\n        } else {\n          throw multiDeleteError();\n        }\n      }\n\n      await phaseSyncer.phase();\n\n      await applyHooks(\n        \"after delete\",\n        mapping.afterDelete || [],\n        (f) => f(tx, sriRequest, [{ permalink: sriRequest.path, incoming: null, stored: prevObj }]),\n        sriRequest,\n      );\n    }\n    await phaseSyncer.phase();\n    return { status: 200 };\n  } catch (err) {\n    // intercept db constraint violation errors and return 409 error\n    if (err.constraint !== undefined) {\n      throw new SriError({\n        status: 409,\n        errors: [{ code: \"db.constraint.violation\", msg: err.detail }],\n      });\n    } else {\n      throw err;\n    }\n  }\n}\n\nexport {\n  getRegularResource,\n  createOrUpdateRegularResource,\n  patchRegularResource,\n  deleteRegularResource,\n  beforePhaseQueryByKey,\n  beforePhaseInsertUpdateDelete,\n};\n", "import pMap from \"p-map\";\nimport { typeToConfig, pgExec, transformRowToObject } from \"./common\";\nimport { SriError, TSriRequest } from \"./typeDefinitions\";\nimport { prepareSQL } from \"./queryObject\";\n\n/*\n  Add references from a different resource to this resource.\n  * type : the resource type that has a reference to the retrieved elements.\n  * column : the database column that contains the foreign key.\n  * key : the name of the key to add to the retrieved elements.\n  */\n// TODO: refactor in v2.1 together with the whole expand story\nfunction addReferencingResources(\n  type: string,\n  column: any,\n  targetkey: string | number,\n  excludeOnExpand: string | string[],\n) {\n  return async function (tx: any, sriRequest: TSriRequest, elements: { stored: any }[]) {\n    const { resources } = global.sri4node_configuration;\n    const typeToMapping = typeToConfig(resources);\n    const mapping = typeToMapping[type];\n\n    if (Array.isArray(sriRequest.query.expand)) {\n      throw new SriError({\n        status: 500,\n        errors: [\n          {\n            code: \"multiple.expand.query.parameters.not.allowed\",\n            msg: 'Only one \"expand\" query parameter value can be specified.',\n          },\n        ],\n      });\n    }\n\n    const expand = sriRequest.query.expand ? sriRequest.query.expand.toLowerCase() : \"full\";\n\n    if (\n      elements &&\n      elements.length &&\n      elements.length > 0 &&\n      expand !== \"none\" &&\n      ((Array.isArray(excludeOnExpand) && !excludeOnExpand.includes(expand)) ||\n        !Array.isArray(excludeOnExpand))\n    ) {\n      const tablename = type.split(\"/\")[type.split(\"/\").length - 1];\n      const query = prepareSQL();\n      const elementKeys: string[] = [];\n      const elementKeysToElement = {};\n      elements.forEach(({ stored: element }) => {\n        const { permalink } = element.$$meta;\n        const elementKey = permalink.split(\"/\")[2];\n        elementKeys.push(elementKey);\n        elementKeysToElement[elementKey] = element;\n        element[targetkey] = [];\n      });\n\n      query\n        .sql(`select *, \"${column}\" as fkey from ${tablename} where \"${column}\" in (`)\n        .array(elementKeys)\n        .sql(') and \"$$meta.deleted\" = false');\n      const rows = await pgExec(tx, query);\n      await pMap(rows, async (row: Record<string, any>) => {\n        const element = elementKeysToElement[row.fkey];\n        const target: any = { href: `${type}/${row.key}` };\n\n        target.$$expanded = await transformRowToObject(row, mapping);\n        element[targetkey].push(target);\n      });\n    }\n  };\n}\n\nexport { addReferencingResources };\n", "import * as common from \"./common\";\nimport { TOverloadProtection } from \"./typeDefinitions\";\n\nfunction overloadProtectionFactory(config: TOverloadProtection | undefined) {\n  let usedPipelines = 0;\n  let extraDrop = 0;\n  return {\n    canAccept: () => {\n      if (config !== undefined) {\n        common.debug(\n          \"overloadProtection\",\n          `overloadProtection - canAccept ${extraDrop} - ${usedPipelines} - ${config.maxPipelines}`,\n        );\n        if (extraDrop === 0) {\n          return usedPipelines < config.maxPipelines;\n        }\n        extraDrop -= 1;\n        return false;\n      }\n      return true;\n    },\n    startPipeline: (nr = 1) => {\n      if (config !== undefined) {\n        const remainingCap = Math.max(config.maxPipelines - usedPipelines, 1);\n        const nrServed = Math.min(nr, remainingCap);\n        usedPipelines += nrServed;\n        common.debug(\n          \"overloadProtection\",\n          `overloadProtection - startPipeline(${nr}) => ${usedPipelines}/${config.maxPipelines}`,\n        );\n        return nrServed;\n      }\n      return null;\n    },\n    endPipeline: (nr = 1) => {\n      if (config !== undefined) {\n        usedPipelines -= nr;\n        common.debug(\n          \"overloadProtection\",\n          `overloadProtection - endPipeline(${nr}) => ${usedPipelines}/${config.maxPipelines}`,\n        );\n      }\n    },\n    addExtraDrops: (nr = 1) => {\n      if (config !== undefined) {\n        extraDrop += nr;\n      }\n    },\n  };\n}\n\nexport { overloadProtectionFactory };\n", "import _ from \"lodash\";\nimport { IDatabase } from \"pg-promise\";\nimport * as common from \"./common\";\nimport { TPreparedSql, TResourceDefinition } from \"./typeDefinitions\";\nimport { ParsedUrlQuery } from \"querystring\";\n\nfunction fromTypesFilter(\n  value: string,\n  select: TPreparedSql,\n  _key: string,\n  _database: IDatabase<unknown>,\n  _doCount: boolean,\n  mapping: TResourceDefinition,\n  _urlParameters: ParsedUrlQuery,\n) {\n  let sql;\n  let fromCondition;\n  let whereCondition;\n  let fromTable;\n  let types;\n\n  if (value && mapping.map?.from?.references) {\n    fromCondition = select.text.split(\" from\")[1];\n    whereCondition = fromCondition.split(\"where\")[1];\n    fromCondition = fromCondition.split(\"where\")[0];\n\n    const table = common.tableFromMapping(mapping);\n    types = value.split(\",\").join(\"','\");\n    fromTable =\n      mapping.map.from.references.split(\"/\")[mapping.map.from.references.split(\"/\").length - 1];\n\n    sql =\n      select.text.indexOf(\"count\") !== -1\n        ? `select count(distinct ${table}.*)`\n        : `select distinct ${table}.*`;\n    sql += ` from ${fromCondition} JOIN ${fromTable} c on c.key = ${table}.from `;\n    sql += ` where ${whereCondition}`;\n    sql += ` AND c.type in ('${types}') AND c.\"$$meta.deleted\" = false `;\n\n    select.text = sql;\n  }\n}\n\nfunction toTypesFilter(\n  value: string,\n  select: TPreparedSql,\n  _key: string,\n  _database: IDatabase<unknown>,\n  _doCount: boolean,\n  mapping: TResourceDefinition,\n  _urlParameters: ParsedUrlQuery,\n) {\n  let sql;\n  let fromCondition;\n  let whereCondition;\n  let toTable: string;\n  let types: string;\n\n  if (value && mapping.map?.to?.references) {\n    fromCondition = select.text.split(\" from\")[1];\n    whereCondition = fromCondition.split(\"where\")[1];\n    fromCondition = fromCondition.split(\"where\")[0];\n\n    const table = common.tableFromMapping(mapping);\n    types = value.split(\",\").join(\"','\");\n    toTable = mapping.map.to.references.split(\"/\")[mapping.map.to.references.split(\"/\").length - 1];\n\n    sql =\n      select.text.indexOf(\"count\") !== -1\n        ? `select count(distinct ${table}.*)`\n        : `select distinct ${table}.*`;\n    sql += ` FROM ${fromCondition} JOIN ${toTable} c2 on c2.key = ${table}.to `;\n    sql += ` where ${whereCondition}`;\n    sql += ` AND c2.type in ('${types}') AND c2.\"$$meta.deleted\" = false `;\n\n    select.text = sql;\n  }\n}\n\nfunction fromsFilter(\n  value: string,\n  select: TPreparedSql,\n  _key: string,\n  _database: IDatabase<unknown>,\n  _doCount: boolean,\n  mapping: TResourceDefinition,\n  _urlParameters: ParsedUrlQuery,\n) {\n  if (value) {\n    const table = common.tableFromMapping(mapping);\n\n    const froms = value.split(\",\").map((val) => val.split(\"/\")[val.split(\"/\").length - 1]);\n\n    select.sql(` AND ${table}.from in (`).array(froms).sql(\")\");\n  }\n}\n\nfunction tosFilter(\n  value: string,\n  select: TPreparedSql,\n  _key: string,\n  _database: IDatabase<unknown>,\n  _doCount: boolean,\n  mapping: TResourceDefinition,\n  _urlParameters: ParsedUrlQuery,\n) {\n  if (value) {\n    const table = common.tableFromMapping(mapping);\n\n    const tos = value.split(\",\").map((val) => val.split(\"/\")[val.split(\"/\").length - 1]);\n\n    select.sql(` AND ${table}.to in (`).array(tos).sql(\")\");\n  }\n}\n\nexport {\n  fromTypesFilter as fromTypes,\n  toTypesFilter as toTypes,\n  tosFilter as tos,\n  fromsFilter as froms,\n};\n", "/**\n * This module will export the necessary pug templates, so that we don't rely\n * on loading them from disk anymore.\n * This should avoid the troubles we were having trying to compile our ts into ESM and CJS modules.\n *\n * In ESM, __dirname does not work, and in CJS, import.meta.url does not work.\n *\n * So if we can avoid having to load pug templates from disk entirely\n * (so we don't need to know the absolute path of the sri4node module file)\n * we don't neede to suffer.\n */\n\nimport * as pug from \"pug\";\n/*\n// Compile a function\nvar fn = pug.compile('string of pug', options);\n\n// Render the function\nvar html = fn(locals);\n*/\n\nconst index = pug.compile(\n  `\ndoctype html\nhtml(lang='en')\n    head\n        title API Documentation\n        link(href='../docs/static/bootstrap.min.css', rel='stylesheet')\n        link(href='../docs/static/custom.css', rel='stylesheet')\n    body\n        .container\n            .header.clearfix\n                h3.text-primary API Documentation\n            .row.well!= config.description\n            .row\n                .panel.panel-primary\n                    .panel-heading\n                        h3.panel-title Resources\n                    .panel-body\n                        each resource in config.resources\n                            .panel.panel-default\n                                .panel-heading\n                                    h3.panel-title\n                                        a(href='#{resource.type }/docs') #{resource.type }\n                                    .pull-right(style='margin-top: -20px')\n                                        if resource.methods\n                                            each method in resource.methods\n                                                span.label.label-success(style='margin-left: 5px') #{ method }\n                                        else\n                                            span.label.label-success(style='margin-left: 5px') GET\n                                            span.label.label-success(style='margin-left: 5px') PUT\n                                            span.label.label-success(style='margin-left: 5px') DELETE\n                                if resource.schema\n                                    if resource.schema.title\n                                        .panel-body!= resource.schema.title\n            .row\n                .panel.panel-primary\n                    .panel-heading\n                        h3.panel-title Endpoints\n                    .panel-body\n                        .panel.panel-default\n                            .panel-heading\n                                h3.panel-title\n                                    a(href='/me') /me\n                                span.label.label-success.pull-right(style='margin-top: -15px') GET\n                            .panel-body\n                                | Get information about the current user.\n                        .panel.panel-default\n                            .panel-heading\n                                h3.panel-title /batch\n                                span.label.label-success.pull-right(style='margin-top: -15px') PUT\n                            .panel-body\n                                | Send a batch request to the server. You can find more documentation&nbsp;\n                                a(href='https://github.com/dimitrydhondt/sri#batch-operations', target='_blank') here\n                                | .\n                        .panel.panel-default\n                            .panel-heading\n                                h3.panel-title /log\n                                span.label.label-success.pull-right(style='margin-top: -15px') PUT\n                            .panel-body\n                                | Send logs to the server.\n                        .panel.panel-default\n                            .panel-heading\n                                h3.panel-title\n                                    a(href='/resources') /resources\n                                span.label.label-success.pull-right(style='margin-top: -15px') GET\n                            .panel-body\n                                | See all available resources in json format.\n                        .panel.panel-default\n                            .panel-heading\n                                h3.panel-title\n                                    a(href='/docs') /docs\n                                span.label.label-success.pull-right(style='margin-top: -15px') GET\n                            .panel-body\n                                | This documentation about the API, generated from the configuration.\n            footer.footer\n                p\n                    | Powered by&nbsp;\n                    a(href='https://github.com/dimitrydhondt/sri4node', target='_blank') sir4node\n                    |  based on the&nbsp;\n                    a(href='https://github.com/dimitrydhondt/sri', target='_blank') sri specification\n`,\n  {},\n);\n\nconst resource = pug.compile(\n  `\n- var $q = queryUtils;\n\nmixin property(key, property, required)\n        - if(typeof  required == 'undefined'){ required = []; }\n        .panel.panel-default\n            .panel-heading\n                h3.panel-title\n                    if isNaN(key)\n                         span #{ key }\n                    else\n                        span\n                    if property.format\n                        span.label.label-default.pull-right  #{property.format} (#{property.type})\n                    else\n                        span.label.label-default.pull-right #{property.type}\n                    if required.indexOf(key) != - 1 || key == 'key'\n                        span.text-primary *\n                    | &nbsp;\n                    span.text-muted(style='background-color: transparent;')\n                        small #{property.description}\n            table.table.table-bordered.table-condensed\n                if property.pattern\n                    tr\n                        td.text-muted(align='right', style='width: 150px')\n                            small Pattern\n                        td\n                            small\n                                code.text-muted #{property.pattern}\n                if property.minLength || property.maxLength\n                    tr\n                        td.text-muted(align='right', style='width: 150px')\n                            small Length between\n                        td\n                            small\n                                if property.minLength\n                                    code.text-muted !{property.minLength}\n                                else\n                                    code.text-muted 0\n                                | &nbsp;-&nbsp;\n                                if property.maxLength\n                                    code.text-muted !{property.maxLength}\n                                else\n                                    code.text-muted &mldr;\n                if resource.map[key]\n                    if resource.map[key].references\n                        tr\n                            td.text-muted(align='right', style='width: 150px')\n                                small Reference\n                            td\n                                a(href='#{resource.map[key].references}/docs')\n                                    small\n                                        code.text-muted #{resource.map[key].references}\n                if property.enum\n                    tr\n                        td.text-muted(align='right', style='width: 150px')\n                            small Allowed values\n                        td\n                            small\n                                code.text-muted= JSON.stringify(property.enum, null, 1)\n                if property.type == 'array' && property.items\n                    tr\n                        td(style='padding: 15px 15px 0px 15px')\n                            +property('', property.items)\n                if property.type == 'object' && property.properties\n                    tr\n                        td.text-muted(align='right', style='width: 150px')\n                            small Properties\n                        td(style='padding: 15px 15px 0px 15px')\n                            each objectProperty, key in property.properties\n                                +property(key, objectProperty, property.required)\n\ndoctype html\nhtml(lang='en')\n    head\n        title API Documentation\n        link(href='docs/static/bootstrap.min.css', rel='stylesheet')\n        link(href='docs/static/custom.css', rel='stylesheet')\n    body\n        .container\n            .header.clearfix\n                nav\n                    ul.nav.nav-pills.pull-right\n                        li(role='presentation')\n                            a(href='#{ resource.type }') View resource\n                        li(role='presentation')\n                            a(href='../docs') Docs home\n                h3.text-primary #{ resource.type }\n            if resource.schema\n                if resource.schema.title\n                    .row.well!= resource.schema.title\n            .row\n                .panel.panel-primary\n                    .panel-heading\n                        h3.panel-title Properties\n                    .panel-body\n                        if resource.schema\n                            each property, key in resource.schema.properties\n                                +property(key, property, resource.schema.required)\n            .row\n                .panel.panel-primary\n                    .panel-heading\n                        h3.panel-title Methods\n                    .panel-body\n                        if resource.methods\n                            each method in resource.methods\n                                span.label.label-success(style='margin-left: 5px') #{ method }\n                        else\n                            span.label.label-success(style='margin-left: 5px') GET\n                            span.label.label-success(style='margin-left: 5px') PUT\n                            span.label.label-success(style='margin-left: 5px') DELETE\n            .row\n                .panel.panel-primary\n                    .panel-heading\n                        h3.panel-title URL Parameters\n                    .panel-body\n                        if resource.query\n                            each query, key in resource.query\n                                .panel.panel-default\n                                    .panel-heading\n                                        h3.panel-title #{ key }\n                                    if key == 'defaultFilter' && query == $q.defaultFilter\n                                        .panel-body\n                                            | The default filter gives you the possibility to use filters described in the sri-query specification.\n                                            br\n                                            | More information about the default filter you can find&nbsp;\n                                            a(href='https://github.com/dimitrydhondt/sri-query', target='_blank') here.\n                                    else\n                                        if resource.queryDocs\n                                            if resource.queryDocs[key]\n                                                .panel-body!= resource.queryDocs[key]\n            .row\n                .panel.panel-primary\n                    .panel-heading\n                        h3.panel-title Validation\n                    .panel-body\n                        if resource.validateDocs\n                            each validate, key in resource.validateDocs\n                                .panel.panel-default\n                                    .panel-heading\n                                        h3.panel-title #{ key }\n                                    .panel-body!= validate.description\n                                    if validate.errors\n                                        table.table.table-bordered\n                                            each errors, key in validate.errors\n                                                tr\n                                                    td.text-muted(align='right')\n                                                        small #{errors.code}\n                                                    td\n                                                        small!= errors.description\n            .row\n                .panel.panel-primary\n                    .panel-heading\n                        h3.panel-title Endpoints\n                    .panel-body\n                        if resource.customroutes\n                            each route, key in resource.customroutes\n                                .panel.panel-default\n                                    .panel-heading\n                                        h3.panel-title\n                                            a #{ route.route }\n                                        span.label.label-success.pull-right(style='margin-left: 5px; margin-top: -15px') #{ route.method }\n                                    if route.description\n                                        .panel-body\n                                            | #{ route.description }\n                            .panel.panel-default\n                                .panel-heading\n                                    h3.panel-title\n                                        a(href='#{resource.type}/schema') #{ resource.type }/schema\n                                    span.label.label-success.pull-right(style='margin-top: -15px') GET\n                                .panel-body\n                                    | JSON Schema for #{ resource.type }\n                            .panel.panel-default\n                                .panel-heading\n                                    h3.panel-title #{ resource.type }/docs\n                                    span.label.label-success.pull-right(style='margin-top: -15px') GET\n                                .panel-body\n                                    | This generated documentation about #{ resource.type }.\n            footer.footer\n                p\n                    | Powered by&nbsp;\n                    a(href='https://github.com/dimitrydhondt/sri4node', target='_blank') sir4node\n                    |  based on the&nbsp;\n                    a(href='https://github.com/dimitrydhondt/sri', target='_blank') sri specification\n`,\n  {},\n);\n\nconst staticFiles = {\n  \"bootstrap.min.css\": `\n    /*!\n    * Bootstrap v3.3.5 (http://getbootstrap.com)\n    * Copyright 2011-2015 Twitter, Inc.\n    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n    */\n\n    /*!\n    * Generated using the Bootstrap Customizer (http://getbootstrap.com/customize/?id=b711f9d20ff56da1436c)\n    * Config saved to config.json and https://gist.github.com/b711f9d20ff56da1436c\n    *//*!\n    * Bootstrap v3.3.5 (http://getbootstrap.com)\n    * Copyright 2011-2015 Twitter, Inc.\n    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n    *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=\"button\"],input[type=\"reset\"],input[type=\"submit\"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=\"checkbox\"],input[type=\"radio\"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=\"number\"]::-webkit-inner-spin-button,input[type=\"number\"]::-webkit-outer-spin-button{height:auto}input[type=\"search\"]{-webkit-appearance:textfield;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}input[type=\"search\"]::-webkit-search-cancel-button,input[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:bold}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}*:before,*:after{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}input,button,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#337ab7;text-decoration:none}a:hover,a:focus{color:#23527c;text-decoration:underline}a:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}figure{margin:0}img{vertical-align:middle}.img-responsive{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{padding:4px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out;display:inline-block;max-width:100%;height:auto}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=\"button\"]{cursor:pointer}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small,.h1 small,.h2 small,.h3 small,.h4 small,.h5 small,.h6 small,h1 .small,h2 .small,h3 .small,h4 .small,h5 .small,h6 .small,.h1 .small,.h2 .small,.h3 .small,.h4 .small,.h5 .small,.h6 .small{font-weight:normal;line-height:1;color:#777}h1,.h1,h2,.h2,h3,.h3{margin-top:20px;margin-bottom:10px}h1 small,.h1 small,h2 small,.h2 small,h3 small,.h3 small,h1 .small,.h1 .small,h2 .small,.h2 .small,h3 .small,.h3 .small{font-size:65%}h4,.h4,h5,.h5,h6,.h6{margin-top:10px;margin-bottom:10px}h4 small,.h4 small,h5 small,.h5 small,h6 small,.h6 small,h4 .small,.h4 .small,h5 .small,.h5 .small,h6 .small,.h6 .small{font-size:75%}h1,.h1{font-size:36px}h2,.h2{font-size:30px}h3,.h3{font-size:24px}h4,.h4{font-size:18px}h5,.h5{font-size:14px}h6,.h6{font-size:12px}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:16px;font-weight:300;line-height:1.4}@media (min-width:768px){.lead{font-size:21px}}small,.small{font-size:85%}mark,.mark{background-color:#fcf8e3;padding:.2em}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-nowrap{white-space:nowrap}.text-lowercase{text-transform:lowercase}.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777}.text-primary{color:#337ab7}a.text-primary:hover,a.text-primary:focus{color:#286090}.text-success{color:#3c763d}a.text-success:hover,a.text-success:focus{color:#2b542c}.text-info{color:#31708f}a.text-info:hover,a.text-info:focus{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:hover,a.text-warning:focus{color:#66512c}.text-danger{color:#a94442}a.text-danger:hover,a.text-danger:focus{color:#843534}.bg-primary{color:#fff;background-color:#337ab7}a.bg-primary:hover,a.bg-primary:focus{background-color:#286090}.bg-success{background-color:#dff0d8}a.bg-success:hover,a.bg-success:focus{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:hover,a.bg-info:focus{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:hover,a.bg-warning:focus{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:hover,a.bg-danger:focus{background-color:#e4b9b9}.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}ul,ol{margin-top:0;margin-bottom:10px}ul ul,ol ul,ul ol,ol ol{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none;margin-left:-5px}.list-inline>li{display:inline-block;padding-left:5px;padding-right:5px}dl{margin-top:0;margin-bottom:20px}dt,dd{line-height:1.42857143}dt{font-weight:bold}dd{margin-left:0}@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;clear:left;text-align:right;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}}abbr[title],abbr[data-original-title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:10px 20px;margin:0 0 20px;font-size:17.5px;border-left:5px solid #eee}blockquote p:last-child,blockquote ul:last-child,blockquote ol:last-child{margin-bottom:0}blockquote footer,blockquote small,blockquote .small{display:block;font-size:80%;line-height:1.42857143;color:#777}blockquote footer:before,blockquote small:before,blockquote .small:before{content:'\\\\2014 \\\\00A0'}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0;text-align:right}.blockquote-reverse footer:before,blockquote.pull-right footer:before,.blockquote-reverse small:before,blockquote.pull-right small:before,.blockquote-reverse .small:before,blockquote.pull-right .small:before{content:''}.blockquote-reverse footer:after,blockquote.pull-right footer:after,.blockquote-reverse small:after,blockquote.pull-right small:after,.blockquote-reverse .small:after,blockquote.pull-right .small:after{content:'\\\\00A0 \\\\2014'}address{margin-bottom:20px;font-style:normal;line-height:1.42857143}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,\"Courier New\",monospace}code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px}kbd{padding:2px 4px;font-size:90%;color:#fff;background-color:#333;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.25);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.25)}kbd kbd{padding:0;font-size:100%;font-weight:bold;-webkit-box-shadow:none;box-shadow:none}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.42857143;word-break:break-all;word-wrap:break-word;color:#333;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}table{background-color:transparent}caption{padding-top:8px;padding-bottom:8px;color:#777;text-align:left}th{text-align:left}.table{width:100%;max-width:100%;margin-bottom:20px}.table>thead>tr>th,.table>tbody>tr>th,.table>tfoot>tr>th,.table>thead>tr>td,.table>tbody>tr>td,.table>tfoot>tr>td{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>th,.table>caption+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>td,.table>thead:first-child>tr:first-child>td{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed>thead>tr>th,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>tbody>tr>td,.table-condensed>tfoot>tr>td{padding:5px}.table-bordered{border:1px solid #ddd}.table-bordered>thead>tr>th,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>tbody>tr>td,.table-bordered>tfoot>tr>td{border:1px solid #ddd}.table-bordered>thead>tr>th,.table-bordered>thead>tr>td{border-bottom-width:2px}.table-striped>tbody>tr:nth-of-type(odd){background-color:#f9f9f9}.table-hover>tbody>tr:hover{background-color:#f5f5f5}table col[class*=\"col-\"]{position:static;float:none;display:table-column}table td[class*=\"col-\"],table th[class*=\"col-\"]{position:static;float:none;display:table-cell}.table>thead>tr>td.active,.table>tbody>tr>td.active,.table>tfoot>tr>td.active,.table>thead>tr>th.active,.table>tbody>tr>th.active,.table>tfoot>tr>th.active,.table>thead>tr.active>td,.table>tbody>tr.active>td,.table>tfoot>tr.active>td,.table>thead>tr.active>th,.table>tbody>tr.active>th,.table>tfoot>tr.active>th{background-color:#f5f5f5}.table-hover>tbody>tr>td.active:hover,.table-hover>tbody>tr>th.active:hover,.table-hover>tbody>tr.active:hover>td,.table-hover>tbody>tr:hover>.active,.table-hover>tbody>tr.active:hover>th{background-color:#e8e8e8}.table>thead>tr>td.success,.table>tbody>tr>td.success,.table>tfoot>tr>td.success,.table>thead>tr>th.success,.table>tbody>tr>th.success,.table>tfoot>tr>th.success,.table>thead>tr.success>td,.table>tbody>tr.success>td,.table>tfoot>tr.success>td,.table>thead>tr.success>th,.table>tbody>tr.success>th,.table>tfoot>tr.success>th{background-color:#dff0d8}.table-hover>tbody>tr>td.success:hover,.table-hover>tbody>tr>th.success:hover,.table-hover>tbody>tr.success:hover>td,.table-hover>tbody>tr:hover>.success,.table-hover>tbody>tr.success:hover>th{background-color:#d0e9c6}.table>thead>tr>td.info,.table>tbody>tr>td.info,.table>tfoot>tr>td.info,.table>thead>tr>th.info,.table>tbody>tr>th.info,.table>tfoot>tr>th.info,.table>thead>tr.info>td,.table>tbody>tr.info>td,.table>tfoot>tr.info>td,.table>thead>tr.info>th,.table>tbody>tr.info>th,.table>tfoot>tr.info>th{background-color:#d9edf7}.table-hover>tbody>tr>td.info:hover,.table-hover>tbody>tr>th.info:hover,.table-hover>tbody>tr.info:hover>td,.table-hover>tbody>tr:hover>.info,.table-hover>tbody>tr.info:hover>th{background-color:#c4e3f3}.table>thead>tr>td.warning,.table>tbody>tr>td.warning,.table>tfoot>tr>td.warning,.table>thead>tr>th.warning,.table>tbody>tr>th.warning,.table>tfoot>tr>th.warning,.table>thead>tr.warning>td,.table>tbody>tr.warning>td,.table>tfoot>tr.warning>td,.table>thead>tr.warning>th,.table>tbody>tr.warning>th,.table>tfoot>tr.warning>th{background-color:#fcf8e3}.table-hover>tbody>tr>td.warning:hover,.table-hover>tbody>tr>th.warning:hover,.table-hover>tbody>tr.warning:hover>td,.table-hover>tbody>tr:hover>.warning,.table-hover>tbody>tr.warning:hover>th{background-color:#faf2cc}.table>thead>tr>td.danger,.table>tbody>tr>td.danger,.table>tfoot>tr>td.danger,.table>thead>tr>th.danger,.table>tbody>tr>th.danger,.table>tfoot>tr>th.danger,.table>thead>tr.danger>td,.table>tbody>tr.danger>td,.table>tfoot>tr.danger>td,.table>thead>tr.danger>th,.table>tbody>tr.danger>th,.table>tfoot>tr.danger>th{background-color:#f2dede}.table-hover>tbody>tr>td.danger:hover,.table-hover>tbody>tr>th.danger:hover,.table-hover>tbody>tr.danger:hover>td,.table-hover>tbody>tr:hover>.danger,.table-hover>tbody>tr.danger:hover>th{background-color:#ebcccc}.table-responsive{overflow-x:auto;min-height:0.01%}@media screen and (max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-y:hidden;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>thead>tr>th,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tfoot>tr>td{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>thead>tr>th:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child{border-left:0}.table-responsive>.table-bordered>thead>tr>th:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>th,.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>td{border-bottom:0}}fieldset{padding:0;margin:0;border:0;min-width:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:inherit;color:#333;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:bold}input[type=\"search\"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type=\"radio\"],input[type=\"checkbox\"]{margin:4px 0 0;margin-top:1px \\\\9;line-height:normal}input[type=\"file\"]{display:block}input[type=\"range\"]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=\"file\"]:focus,input[type=\"radio\"]:focus,input[type=\"checkbox\"]:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}output{display:block;padding-top:7px;font-size:14px;line-height:1.42857143;color:#555}.form-control{display:block;width:100%;height:34px;padding:6px 12px;font-size:14px;line-height:1.42857143;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-webkit-transition:border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;-o-transition:border-color ease-in-out .15s, box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s, box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, 0.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, 0.6)}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}input[type=\"search\"]{-webkit-appearance:none}@media screen and (-webkit-min-device-pixel-ratio:0){input[type=\"date\"].form-control,input[type=\"time\"].form-control,input[type=\"datetime-local\"].form-control,input[type=\"month\"].form-control{line-height:34px}input[type=\"date\"].input-sm,input[type=\"time\"].input-sm,input[type=\"datetime-local\"].input-sm,input[type=\"month\"].input-sm,.input-group-sm input[type=\"date\"],.input-group-sm input[type=\"time\"],.input-group-sm input[type=\"datetime-local\"],.input-group-sm input[type=\"month\"]{line-height:30px}input[type=\"date\"].input-lg,input[type=\"time\"].input-lg,input[type=\"datetime-local\"].input-lg,input[type=\"month\"].input-lg,.input-group-lg input[type=\"date\"],.input-group-lg input[type=\"time\"],.input-group-lg input[type=\"datetime-local\"],.input-group-lg input[type=\"month\"]{line-height:46px}}.form-group{margin-bottom:15px}.radio,.checkbox{position:relative;display:block;margin-top:10px;margin-bottom:10px}.radio label,.checkbox label{min-height:20px;padding-left:20px;margin-bottom:0;font-weight:normal;cursor:pointer}.radio input[type=\"radio\"],.radio-inline input[type=\"radio\"],.checkbox input[type=\"checkbox\"],.checkbox-inline input[type=\"checkbox\"]{position:absolute;margin-left:-20px;margin-top:4px \\\\9}.radio+.radio,.checkbox+.checkbox{margin-top:-5px}.radio-inline,.checkbox-inline{position:relative;display:inline-block;padding-left:20px;margin-bottom:0;vertical-align:middle;font-weight:normal;cursor:pointer}.radio-inline+.radio-inline,.checkbox-inline+.checkbox-inline{margin-top:0;margin-left:10px}input[type=\"radio\"][disabled],input[type=\"checkbox\"][disabled],input[type=\"radio\"].disabled,input[type=\"checkbox\"].disabled,fieldset[disabled] input[type=\"radio\"],fieldset[disabled] input[type=\"checkbox\"]{cursor:not-allowed}.radio-inline.disabled,.checkbox-inline.disabled,fieldset[disabled] .radio-inline,fieldset[disabled] .checkbox-inline{cursor:not-allowed}.radio.disabled label,.checkbox.disabled label,fieldset[disabled] .radio label,fieldset[disabled] .checkbox label{cursor:not-allowed}.form-control-static{padding-top:7px;padding-bottom:7px;margin-bottom:0;min-height:34px}.form-control-static.input-lg,.form-control-static.input-sm{padding-left:0;padding-right:0}.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-sm{height:30px;line-height:30px}textarea.input-sm,select[multiple].input-sm{height:auto}.form-group-sm .form-control{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.form-group-sm select.form-control{height:30px;line-height:30px}.form-group-sm textarea.form-control,.form-group-sm select[multiple].form-control{height:auto}.form-group-sm .form-control-static{height:30px;min-height:32px;padding:6px 10px;font-size:12px;line-height:1.5}.input-lg{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-lg{height:46px;line-height:46px}textarea.input-lg,select[multiple].input-lg{height:auto}.form-group-lg .form-control{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.form-group-lg select.form-control{height:46px;line-height:46px}.form-group-lg textarea.form-control,.form-group-lg select[multiple].form-control{height:auto}.form-group-lg .form-control-static{height:46px;min-height:38px;padding:11px 16px;font-size:18px;line-height:1.3333333}.has-feedback{position:relative}.has-feedback .form-control{padding-right:42.5px}.form-control-feedback{position:absolute;top:0;right:0;z-index:2;display:block;width:34px;height:34px;line-height:34px;text-align:center;pointer-events:none}.input-lg+.form-control-feedback,.input-group-lg+.form-control-feedback,.form-group-lg .form-control+.form-control-feedback{width:46px;height:46px;line-height:46px}.input-sm+.form-control-feedback,.input-group-sm+.form-control-feedback,.form-group-sm .form-control+.form-control-feedback{width:30px;height:30px;line-height:30px}.has-success .help-block,.has-success .control-label,.has-success .radio,.has-success .checkbox,.has-success .radio-inline,.has-success .checkbox-inline,.has-success.radio label,.has-success.checkbox label,.has-success.radio-inline label,.has-success.checkbox-inline label{color:#3c763d}.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #67b168}.has-success .input-group-addon{color:#3c763d;border-color:#3c763d;background-color:#dff0d8}.has-success .form-control-feedback{color:#3c763d}.has-warning .help-block,.has-warning .control-label,.has-warning .radio,.has-warning .checkbox,.has-warning .radio-inline,.has-warning .checkbox-inline,.has-warning.radio label,.has-warning.checkbox label,.has-warning.radio-inline label,.has-warning.checkbox-inline label{color:#8a6d3b}.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #c0a16b}.has-warning .input-group-addon{color:#8a6d3b;border-color:#8a6d3b;background-color:#fcf8e3}.has-warning .form-control-feedback{color:#8a6d3b}.has-error .help-block,.has-error .control-label,.has-error .radio,.has-error .checkbox,.has-error .radio-inline,.has-error .checkbox-inline,.has-error.radio label,.has-error.checkbox label,.has-error.radio-inline label,.has-error.checkbox-inline label{color:#a94442}.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #ce8483}.has-error .input-group-addon{color:#a94442;border-color:#a94442;background-color:#f2dede}.has-error .form-control-feedback{color:#a94442}.has-feedback label~.form-control-feedback{top:25px}.has-feedback label.sr-only~.form-control-feedback{top:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#737373}@media (min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-static{display:inline-block}.form-inline .input-group{display:inline-table;vertical-align:middle}.form-inline .input-group .input-group-addon,.form-inline .input-group .input-group-btn,.form-inline .input-group .form-control{width:auto}.form-inline .input-group>.form-control{width:100%}.form-inline .control-label{margin-bottom:0;vertical-align:middle}.form-inline .radio,.form-inline .checkbox{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.form-inline .radio label,.form-inline .checkbox label{padding-left:0}.form-inline .radio input[type=\"radio\"],.form-inline .checkbox input[type=\"checkbox\"]{position:relative;margin-left:0}.form-inline .has-feedback .form-control-feedback{top:0}}.form-horizontal .radio,.form-horizontal .checkbox,.form-horizontal .radio-inline,.form-horizontal .checkbox-inline{margin-top:0;margin-bottom:0;padding-top:7px}.form-horizontal .radio,.form-horizontal .checkbox{min-height:27px}.form-horizontal .form-group{margin-left:-15px;margin-right:-15px}@media (min-width:768px){.form-horizontal .control-label{text-align:right;margin-bottom:0;padding-top:7px}}.form-horizontal .has-feedback .form-control-feedback{right:15px}@media (min-width:768px){.form-horizontal .form-group-lg .control-label{padding-top:14.333333px;font-size:18px}}@media (min-width:768px){.form-horizontal .form-group-sm .control-label{padding-top:6px;font-size:12px}}.btn{display:inline-block;margin-bottom:0;font-weight:normal;text-align:center;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.42857143;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.btn:focus,.btn:active:focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn.active.focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn:hover,.btn:focus,.btn.focus{color:#333;text-decoration:none}.btn:active,.btn.active{outline:0;background-image:none;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default:focus,.btn-default.focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}.btn-default:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default:active,.btn-default.active,.open>.dropdown-toggle.btn-default{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default:active:hover,.btn-default.active:hover,.open>.dropdown-toggle.btn-default:hover,.btn-default:active:focus,.btn-default.active:focus,.open>.dropdown-toggle.btn-default:focus,.btn-default:active.focus,.btn-default.active.focus,.open>.dropdown-toggle.btn-default.focus{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default:active,.btn-default.active,.open>.dropdown-toggle.btn-default{background-image:none}.btn-default.disabled,.btn-default[disabled],fieldset[disabled] .btn-default,.btn-default.disabled:hover,.btn-default[disabled]:hover,fieldset[disabled] .btn-default:hover,.btn-default.disabled:focus,.btn-default[disabled]:focus,fieldset[disabled] .btn-default:focus,.btn-default.disabled.focus,.btn-default[disabled].focus,fieldset[disabled] .btn-default.focus,.btn-default.disabled:active,.btn-default[disabled]:active,fieldset[disabled] .btn-default:active,.btn-default.disabled.active,.btn-default[disabled].active,fieldset[disabled] .btn-default.active{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#333}.btn-primary{color:#fff;background-color:#337ab7;border-color:#2e6da4}.btn-primary:focus,.btn-primary.focus{color:#fff;background-color:#286090;border-color:#122b40}.btn-primary:hover{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary:active,.btn-primary.active,.open>.dropdown-toggle.btn-primary{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary:active:hover,.btn-primary.active:hover,.open>.dropdown-toggle.btn-primary:hover,.btn-primary:active:focus,.btn-primary.active:focus,.open>.dropdown-toggle.btn-primary:focus,.btn-primary:active.focus,.btn-primary.active.focus,.open>.dropdown-toggle.btn-primary.focus{color:#fff;background-color:#204d74;border-color:#122b40}.btn-primary:active,.btn-primary.active,.open>.dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled,.btn-primary[disabled],fieldset[disabled] .btn-primary,.btn-primary.disabled:hover,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary:hover,.btn-primary.disabled:focus,.btn-primary[disabled]:focus,fieldset[disabled] .btn-primary:focus,.btn-primary.disabled.focus,.btn-primary[disabled].focus,fieldset[disabled] .btn-primary.focus,.btn-primary.disabled:active,.btn-primary[disabled]:active,fieldset[disabled] .btn-primary:active,.btn-primary.disabled.active,.btn-primary[disabled].active,fieldset[disabled] .btn-primary.active{background-color:#337ab7;border-color:#2e6da4}.btn-primary .badge{color:#337ab7;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success:focus,.btn-success.focus{color:#fff;background-color:#449d44;border-color:#255625}.btn-success:hover{color:#fff;background-color:#449d44;border-color:#398439}.btn-success:active,.btn-success.active,.open>.dropdown-toggle.btn-success{color:#fff;background-color:#449d44;border-color:#398439}.btn-success:active:hover,.btn-success.active:hover,.open>.dropdown-toggle.btn-success:hover,.btn-success:active:focus,.btn-success.active:focus,.open>.dropdown-toggle.btn-success:focus,.btn-success:active.focus,.btn-success.active.focus,.open>.dropdown-toggle.btn-success.focus{color:#fff;background-color:#398439;border-color:#255625}.btn-success:active,.btn-success.active,.open>.dropdown-toggle.btn-success{background-image:none}.btn-success.disabled,.btn-success[disabled],fieldset[disabled] .btn-success,.btn-success.disabled:hover,.btn-success[disabled]:hover,fieldset[disabled] .btn-success:hover,.btn-success.disabled:focus,.btn-success[disabled]:focus,fieldset[disabled] .btn-success:focus,.btn-success.disabled.focus,.btn-success[disabled].focus,fieldset[disabled] .btn-success.focus,.btn-success.disabled:active,.btn-success[disabled]:active,fieldset[disabled] .btn-success:active,.btn-success.disabled.active,.btn-success[disabled].active,fieldset[disabled] .btn-success.active{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#5bc0de;border-color:#46b8da}.btn-info:focus,.btn-info.focus{color:#fff;background-color:#31b0d5;border-color:#1b6d85}.btn-info:hover{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info:active,.btn-info.active,.open>.dropdown-toggle.btn-info{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info:active:hover,.btn-info.active:hover,.open>.dropdown-toggle.btn-info:hover,.btn-info:active:focus,.btn-info.active:focus,.open>.dropdown-toggle.btn-info:focus,.btn-info:active.focus,.btn-info.active.focus,.open>.dropdown-toggle.btn-info.focus{color:#fff;background-color:#269abc;border-color:#1b6d85}.btn-info:active,.btn-info.active,.open>.dropdown-toggle.btn-info{background-image:none}.btn-info.disabled,.btn-info[disabled],fieldset[disabled] .btn-info,.btn-info.disabled:hover,.btn-info[disabled]:hover,fieldset[disabled] .btn-info:hover,.btn-info.disabled:focus,.btn-info[disabled]:focus,fieldset[disabled] .btn-info:focus,.btn-info.disabled.focus,.btn-info[disabled].focus,fieldset[disabled] .btn-info.focus,.btn-info.disabled:active,.btn-info[disabled]:active,fieldset[disabled] .btn-info:active,.btn-info.disabled.active,.btn-info[disabled].active,fieldset[disabled] .btn-info.active{background-color:#5bc0de;border-color:#46b8da}.btn-info .badge{color:#5bc0de;background-color:#fff}.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#eea236}.btn-warning:focus,.btn-warning.focus{color:#fff;background-color:#ec971f;border-color:#985f0d}.btn-warning:hover{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning:active,.btn-warning.active,.open>.dropdown-toggle.btn-warning{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning:active:hover,.btn-warning.active:hover,.open>.dropdown-toggle.btn-warning:hover,.btn-warning:active:focus,.btn-warning.active:focus,.open>.dropdown-toggle.btn-warning:focus,.btn-warning:active.focus,.btn-warning.active.focus,.open>.dropdown-toggle.btn-warning.focus{color:#fff;background-color:#d58512;border-color:#985f0d}.btn-warning:active,.btn-warning.active,.open>.dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled,.btn-warning[disabled],fieldset[disabled] .btn-warning,.btn-warning.disabled:hover,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning:hover,.btn-warning.disabled:focus,.btn-warning[disabled]:focus,fieldset[disabled] .btn-warning:focus,.btn-warning.disabled.focus,.btn-warning[disabled].focus,fieldset[disabled] .btn-warning.focus,.btn-warning.disabled:active,.btn-warning[disabled]:active,fieldset[disabled] .btn-warning:active,.btn-warning.disabled.active,.btn-warning[disabled].active,fieldset[disabled] .btn-warning.active{background-color:#f0ad4e;border-color:#eea236}.btn-warning .badge{color:#f0ad4e;background-color:#fff}.btn-danger{color:#fff;background-color:#d9534f;border-color:#d43f3a}.btn-danger:focus,.btn-danger.focus{color:#fff;background-color:#c9302c;border-color:#761c19}.btn-danger:hover{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger:active,.btn-danger.active,.open>.dropdown-toggle.btn-danger{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger:active:hover,.btn-danger.active:hover,.open>.dropdown-toggle.btn-danger:hover,.btn-danger:active:focus,.btn-danger.active:focus,.open>.dropdown-toggle.btn-danger:focus,.btn-danger:active.focus,.btn-danger.active.focus,.open>.dropdown-toggle.btn-danger.focus{color:#fff;background-color:#ac2925;border-color:#761c19}.btn-danger:active,.btn-danger.active,.open>.dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled,.btn-danger[disabled],fieldset[disabled] .btn-danger,.btn-danger.disabled:hover,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger:hover,.btn-danger.disabled:focus,.btn-danger[disabled]:focus,fieldset[disabled] .btn-danger:focus,.btn-danger.disabled.focus,.btn-danger[disabled].focus,fieldset[disabled] .btn-danger.focus,.btn-danger.disabled:active,.btn-danger[disabled]:active,fieldset[disabled] .btn-danger:active,.btn-danger.disabled.active,.btn-danger[disabled].active,fieldset[disabled] .btn-danger.active{background-color:#d9534f;border-color:#d43f3a}.btn-danger .badge{color:#d9534f;background-color:#fff}.btn-link{color:#337ab7;font-weight:normal;border-radius:0}.btn-link,.btn-link:active,.btn-link.active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:hover,.btn-link:focus,.btn-link:active{border-color:transparent}.btn-link:hover,.btn-link:focus{color:#23527c;text-decoration:underline;background-color:transparent}.btn-link[disabled]:hover,fieldset[disabled] .btn-link:hover,.btn-link[disabled]:focus,fieldset[disabled] .btn-link:focus{color:#777;text-decoration:none}.btn-lg{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=\"submit\"].btn-block,input[type=\"reset\"].btn-block,input[type=\"button\"].btn-block{width:100%}.nav{margin-bottom:0;padding-left:0;list-style:none}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:hover,.nav>li>a:focus{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:hover,.nav>li.disabled>a:focus{color:#777;text-decoration:none;background-color:transparent;cursor:not-allowed}.nav .open>a,.nav .open>a:hover,.nav .open>a:focus{background-color:#eee;border-color:#337ab7}.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.42857143;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:hover,.nav-tabs>li.active>a:focus{color:#555;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent;cursor:default}.nav-tabs.nav-justified{width:100%;border-bottom:0}.nav-tabs.nav-justified>li{float:none}.nav-tabs.nav-justified>li>a{text-align:center;margin-bottom:5px}.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a:focus{border:1px solid #ddd}@media (min-width:768px){.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a:focus{border-bottom-color:#fff}}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:hover,.nav-pills>li.active>a:focus{color:#fff;background-color:#337ab7}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified{width:100%}.nav-justified>li{float:none}.nav-justified>li>a{text-align:center;margin-bottom:5px}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified{border-bottom:0}.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:hover,.nav-tabs-justified>.active>a:focus{border:1px solid #ddd}@media (min-width:768px){.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:hover,.nav-tabs-justified>.active>a:focus{border-bottom-color:#fff}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-right-radius:0;border-top-left-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}@media (min-width:768px){.navbar{border-radius:4px}}@media (min-width:768px){.navbar-header{float:left}}.navbar-collapse{overflow-x:visible;padding-right:15px;padding-left:15px;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1);-webkit-overflow-scrolling:touch}.navbar-collapse.in{overflow-y:auto}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block !important;height:auto !important;padding-bottom:0;overflow:visible !important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse{padding-left:0;padding-right:0}}.navbar-fixed-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse{max-height:340px}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse{max-height:200px}}.container>.navbar-header,.container-fluid>.navbar-header,.container>.navbar-collapse,.container-fluid>.navbar-collapse{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.container>.navbar-header,.container-fluid>.navbar-header,.container>.navbar-collapse,.container-fluid>.navbar-collapse{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media (min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-top,.navbar-fixed-bottom{position:fixed;right:0;left:0;z-index:1030}@media (min-width:768px){.navbar-fixed-top,.navbar-fixed-bottom{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;padding:15px 15px;font-size:18px;line-height:20px;height:50px}.navbar-brand:hover,.navbar-brand:focus{text-decoration:none}.navbar-brand>img{display:block}@media (min-width:768px){.navbar>.container .navbar-brand,.navbar>.container-fluid .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;margin-right:15px;padding:9px 10px;margin-top:8px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7.5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu>li>a,.navbar-nav .open .dropdown-menu .dropdown-header{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:20px}.navbar-nav .open .dropdown-menu>li>a:hover,.navbar-nav .open .dropdown-menu>li>a:focus{background-image:none}}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}}.navbar-form{margin-left:-15px;margin-right:-15px;padding:10px 15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);margin-top:8px;margin-bottom:8px}@media (min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn,.navbar-form .input-group .form-control{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .radio,.navbar-form .checkbox{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .radio label,.navbar-form .checkbox label{padding-left:0}.navbar-form .radio input[type=\"radio\"],.navbar-form .checkbox input[type=\"checkbox\"]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}}@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}}@media (min-width:768px){.navbar-form{width:auto;border:0;margin-left:0;margin-right:0;padding-top:0;padding-bottom:0;-webkit-box-shadow:none;box-shadow:none}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-right-radius:0;border-top-left-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-top-right-radius:4px;border-top-left-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-btn{margin-top:8px;margin-bottom:8px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:15px;margin-bottom:15px}@media (min-width:768px){.navbar-text{float:left;margin-left:15px;margin-right:15px}}@media (min-width:768px){.navbar-left{float:left !important}.navbar-right{float:right !important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:hover,.navbar-default .navbar-brand:focus{color:#5e5e5e;background-color:transparent}.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a{color:#777}.navbar-default .navbar-nav>li>a:hover,.navbar-default .navbar-nav>li>a:focus{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:hover,.navbar-default .navbar-nav>.active>a:focus{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:hover,.navbar-default .navbar-nav>.disabled>a:focus{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:hover,.navbar-default .navbar-toggle:focus{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:hover,.navbar-default .navbar-nav>.open>a:focus{background-color:#e7e7e7;color:#555}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus{color:#ccc;background-color:transparent}}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:hover,.navbar-default .btn-link:focus{color:#333}.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:hover,.navbar-default .btn-link[disabled]:focus,fieldset[disabled] .navbar-default .btn-link:focus{color:#ccc}.navbar-inverse{background-color:#222;border-color:#080808}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:hover,.navbar-inverse .navbar-brand:focus{color:#fff;background-color:transparent}.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:hover,.navbar-inverse .navbar-nav>li>a:focus{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:hover,.navbar-inverse .navbar-nav>.active>a:focus{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:hover,.navbar-inverse .navbar-nav>.disabled>a:focus{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:hover,.navbar-inverse .navbar-toggle:focus{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:hover,.navbar-inverse .navbar-nav>.open>a:focus{background-color:#080808;color:#fff}@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus{color:#444;background-color:transparent}}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:hover,.navbar-inverse .btn-link:focus{color:#fff}.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:hover,.navbar-inverse .btn-link[disabled]:focus,fieldset[disabled] .navbar-inverse .btn-link:focus{color:#444}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}a.label:hover,a.label:focus{color:#fff;text-decoration:none;cursor:pointer}.label:empty{display:none}.btn .label{position:relative;top:-1px}.label-default{background-color:#777}.label-default[href]:hover,.label-default[href]:focus{background-color:#5e5e5e}.label-primary{background-color:#337ab7}.label-primary[href]:hover,.label-primary[href]:focus{background-color:#286090}.label-success{background-color:#5cb85c}.label-success[href]:hover,.label-success[href]:focus{background-color:#449d44}.label-info{background-color:#5bc0de}.label-info[href]:hover,.label-info[href]:focus{background-color:#31b0d5}.label-warning{background-color:#f0ad4e}.label-warning[href]:hover,.label-warning[href]:focus{background-color:#ec971f}.label-danger{background-color:#d9534f}.label-danger[href]:hover,.label-danger[href]:focus{background-color:#c9302c}.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,0.05);box-shadow:0 1px 1px rgba(0,0,0,0.05)}.panel-body{padding:15px}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-right-radius:3px;border-top-left-radius:3px}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>a,.panel-title>small,.panel-title>.small,.panel-title>small>a,.panel-title>.small>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.list-group,.panel>.panel-collapse>.list-group{margin-bottom:0}.panel>.list-group .list-group-item,.panel>.panel-collapse>.list-group .list-group-item{border-width:1px 0;border-radius:0}.panel>.list-group:first-child .list-group-item:first-child,.panel>.panel-collapse>.list-group:first-child .list-group-item:first-child{border-top:0;border-top-right-radius:3px;border-top-left-radius:3px}.panel>.list-group:last-child .list-group-item:last-child,.panel>.panel-collapse>.list-group:last-child .list-group-item:last-child{border-bottom:0;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.panel-heading+.panel-collapse>.list-group .list-group-item:first-child{border-top-right-radius:0;border-top-left-radius:0}.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.list-group+.panel-footer{border-top-width:0}.panel>.table,.panel>.table-responsive>.table,.panel>.panel-collapse>.table{margin-bottom:0}.panel>.table caption,.panel>.table-responsive>.table caption,.panel>.panel-collapse>.table caption{padding-left:15px;padding-right:15px}.panel>.table:first-child,.panel>.table-responsive:first-child>.table:first-child{border-top-right-radius:3px;border-top-left-radius:3px}.panel>.table:first-child>thead:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:first-child{border-top-left-radius:3px}.panel>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:last-child{border-top-right-radius:3px}.panel>.table:last-child,.panel>.table-responsive:last-child>.table:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table:last-child>tbody:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child{border-bottom-left-radius:3px;border-bottom-right-radius:3px}.panel>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:first-child{border-bottom-left-radius:3px}.panel>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:last-child{border-bottom-right-radius:3px}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive,.panel>.table+.panel-body,.panel>.table-responsive+.panel-body{border-top:1px solid #ddd}.panel>.table>tbody:first-child>tr:first-child th,.panel>.table>tbody:first-child>tr:first-child td{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child{border-left:0}.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child{border-right:0}.panel>.table-bordered>thead>tr:first-child>td,.panel>.table-responsive>.table-bordered>thead>tr:first-child>td,.panel>.table-bordered>tbody>tr:first-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>td,.panel>.table-bordered>thead>tr:first-child>th,.panel>.table-responsive>.table-bordered>thead>tr:first-child>th,.panel>.table-bordered>tbody>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>th{border-bottom:0}.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}.panel>.table-responsive{border:0;margin-bottom:0}.panel-group{margin-bottom:20px}.panel-group .panel{margin-bottom:0;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse>.panel-body,.panel-group .panel-heading+.panel-collapse>.list-group{border-top:1px solid #ddd}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}.panel-default{border-color:#ddd}.panel-default>.panel-heading{color:#333;background-color:#f5f5f5;border-color:#ddd}.panel-default>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ddd}.panel-default>.panel-heading .badge{color:#f5f5f5;background-color:#333}.panel-default>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ddd}.panel-primary{border-color:#337ab7}.panel-primary>.panel-heading{color:#fff;background-color:#337ab7;border-color:#337ab7}.panel-primary>.panel-heading+.panel-collapse>.panel-body{border-top-color:#337ab7}.panel-primary>.panel-heading .badge{color:#337ab7;background-color:#fff}.panel-primary>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#337ab7}.panel-success{border-color:#d6e9c6}.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.panel-success>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d6e9c6}.panel-success>.panel-heading .badge{color:#dff0d8;background-color:#3c763d}.panel-success>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d6e9c6}.panel-info{border-color:#bce8f1}.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.panel-info>.panel-heading+.panel-collapse>.panel-body{border-top-color:#bce8f1}.panel-info>.panel-heading .badge{color:#d9edf7;background-color:#31708f}.panel-info>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#bce8f1}.panel-warning{border-color:#faebcc}.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.panel-warning>.panel-heading+.panel-collapse>.panel-body{border-top-color:#faebcc}.panel-warning>.panel-heading .badge{color:#fcf8e3;background-color:#8a6d3b}.panel-warning>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#faebcc}.panel-danger{border-color:#ebccd1}.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.panel-danger>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ebccd1}.panel-danger>.panel-heading .badge{color:#f2dede;background-color:#a94442}.panel-danger>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ebccd1}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.05);box-shadow:inset 0 1px 1px rgba(0,0,0,0.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,0.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.clearfix:before,.clearfix:after,.dl-horizontal dd:before,.dl-horizontal dd:after,.form-horizontal .form-group:before,.form-horizontal .form-group:after,.nav:before,.nav:after,.navbar:before,.navbar:after,.navbar-header:before,.navbar-header:after,.navbar-collapse:before,.navbar-collapse:after,.panel-body:before,.panel-body:after{content:\" \";display:table}.clearfix:after,.dl-horizontal dd:after,.form-horizontal .form-group:after,.nav:after,.navbar:after,.navbar-header:after,.navbar-collapse:after,.panel-body:after{clear:both}.center-block{display:block;margin-left:auto;margin-right:auto}.pull-right{float:right !important}.pull-left{float:left !important}.hide{display:none !important}.show{display:block !important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none !important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-xs,.visible-sm,.visible-md,.visible-lg{display:none !important}.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block{display:none !important}@media (max-width:767px){.visible-xs{display:block !important}table.visible-xs{display:table !important}tr.visible-xs{display:table-row !important}th.visible-xs,td.visible-xs{display:table-cell !important}}@media (max-width:767px){.visible-xs-block{display:block !important}}@media (max-width:767px){.visible-xs-inline{display:inline !important}}@media (max-width:767px){.visible-xs-inline-block{display:inline-block !important}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block !important}table.visible-sm{display:table !important}tr.visible-sm{display:table-row !important}th.visible-sm,td.visible-sm{display:table-cell !important}}@media (min-width:768px) and (max-width:991px){.visible-sm-block{display:block !important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline{display:inline !important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline-block{display:inline-block !important}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block !important}table.visible-md{display:table !important}tr.visible-md{display:table-row !important}th.visible-md,td.visible-md{display:table-cell !important}}@media (min-width:992px) and (max-width:1199px){.visible-md-block{display:block !important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline{display:inline !important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline-block{display:inline-block !important}}@media (min-width:1200px){.visible-lg{display:block !important}table.visible-lg{display:table !important}tr.visible-lg{display:table-row !important}th.visible-lg,td.visible-lg{display:table-cell !important}}@media (min-width:1200px){.visible-lg-block{display:block !important}}@media (min-width:1200px){.visible-lg-inline{display:inline !important}}@media (min-width:1200px){.visible-lg-inline-block{display:inline-block !important}}@media (max-width:767px){.hidden-xs{display:none !important}}@media (min-width:768px) and (max-width:991px){.hidden-sm{display:none !important}}@media (min-width:992px) and (max-width:1199px){.hidden-md{display:none !important}}@media (min-width:1200px){.hidden-lg{display:none !important}}.visible-print{display:none !important}@media print{.visible-print{display:block !important}table.visible-print{display:table !important}tr.visible-print{display:table-row !important}th.visible-print,td.visible-print{display:table-cell !important}}.visible-print-block{display:none !important}@media print{.visible-print-block{display:block !important}}.visible-print-inline{display:none !important}@media print{.visible-print-inline{display:inline !important}}.visible-print-inline-block{display:none !important}@media print{.visible-print-inline-block{display:inline-block !important}}@media print{.hidden-print{display:none !important}}\n    `,\n  \"custom.css\": `\n    /* Space out content a bit */\n    body {\n        padding-top: 20px;\n        padding-bottom: 20px;\n    }\n\n    /* Everything but the jumbotron gets side spacing for mobile first views */\n    .header,\n    .marketing,\n    .footer {\n        padding-right: 15px;\n        padding-left: 15px;\n    }\n\n    /* Custom page header */\n    .header {\n        padding-bottom: 20px;\n        border-bottom: 1px solid #e5e5e5;\n    }\n    /* Make the masthead heading the same height as the navigation */\n    .header h3 {\n        margin-top: 0;\n        margin-bottom: 0;\n        line-height: 40px;\n    }\n\n    /* Custom page footer */\n    .footer {\n        padding-top: 19px;\n        color: #777;\n        border-top: 1px solid #e5e5e5;\n    }\n\n    /* Customize container */\n    @media (min-width: 768px) {\n        .container {\n            max-width: 730px;\n        }\n    }\n    .container-narrow > hr {\n        margin: 30px 0;\n    }\n\n    /* Main marketing message and sign up button */\n    .jumbotron {\n        text-align: center;\n        border-bottom: 1px solid #e5e5e5;\n    }\n    .jumbotron .btn {\n        padding: 14px 24px;\n        font-size: 21px;\n    }\n\n    /* Supporting marketing content */\n    .marketing {\n        margin: 40px 0;\n    }\n    .marketing p + h4 {\n        margin-top: 28px;\n    }\n\n    .container{\n        margin: auto;\n    }\n\n    /* Responsive: Portrait tablets and up */\n    @media screen and (min-width: 768px) {\n        /* Remove the padding we set earlier */\n        .header,\n        .marketing,\n        .footer {\n            padding-right: 0;\n            padding-left: 0;\n        }\n        /* Space out the masthead */\n        .header {\n            margin-bottom: 30px;\n        }\n        /* Remove the bottom border on the jumbotron for visual effect */\n        .jumbotron {\n            border-bottom: 0;\n        }\n    }\n    `,\n};\n\nexport { index, resource, staticFiles };\n"],
  "mappings": "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",
  "names": ["_", "Ajv", "addFormats", "pMap", "EventEmitter", "pEvent", "httpContext", "url", "peggy", "name", "now", "report", "value", "report", "url", "informationSchema", "permalink", "tx", "emitter", "t", "_", "pMap", "url", "EventEmitter", "pEvent", "httpContext", "pEvent", "pMap", "uuidv4", "uuidv4", "pEvent", "index", "_a", "_b", "pMap", "id", "url", "path", "handler", "_", "batchOperation", "pMap", "internalUtils", "httpContext", "EventEmitter", "pEvent", "sqlColumnNames", "index", "path", "value", "informationSchema", "permalink", "value", "value", "_", "_", "_", "pMap", "url", "_", "pMap", "_", "typeToMapping", "pMap", "path", "pMap", "url", "value", "_", "error", "_", "pMap", "pMap", "_", "permalink", "pgp", "pMap", "typeToMapping", "permalink", "pMap", "value", "ajv", "Ajv", "addFormats", "resource", "value", "_", "httpContext", "index", "pgp", "pMap", "_a", "stream", "EventEmitter", "pEvent"]
}
