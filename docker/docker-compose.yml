version: "3.9"
services:
  sri4nodepostgresdbfortests:
    image: postgres:${SRI4NODE_TESTS_POSTGRES_VERSION:-15-alpine}
    # put buth node version and postgres version in the container name to avoid conflicts
    container_name: sri4node${SRI4NODE_TESTS_NODE_VERSION:-16}pg${SRI4NODE_TESTS_POSTGRES_VERSION:-15-alpine}_testdb
    # expose:
    #   - 5432
    ports:
      - 15432:5432
    volumes:
      - ../docker/postgres_initdb:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 1s
      timeout: 30s
      retries: 10
      start_period: 3s

  # generic version that uses env variable SRI4NODE_TESTS_NODE_VERSION
  sri4nodetests:
    depends_on:
      sri4nodepostgresdbfortests:
        condition: service_healthy
    image: node:${SRI4NODE_TESTS_NODE_VERSION:-16}
    # Put only node version (not postgres version) in the container name
    # to reuse the npm cache when testing with different postgres versions
    # This choice makes it impossible to run tests with the same node version
    # but different postgres versions at the same time, but tests for different node verions
    # could still run in parallel
    container_name: sri4node${SRI4NODE_TESTS_NODE_VERSION:-16}tests
    user: "root"
    working_dir: /home/node/sri4node
    volumes:
      - ../:/home/node/source_app
    tty: true
    # by using the host network for the container that runs the tests,
    # we can always use the same db connection details both locally and from inside docker
    network_mode: host
    command: > # > denotes a long string separated over multiple lines, escape $ with $$ !!!
      bash -c '
        echo "Current user: $$(whoami)" && pwd &&
        INSTALLED_BEFORE=$(ls ./node_modules | wc -l) &&
        cp -r ../source_app/* . &&
        chown -R node:node . &&
        # ls &&
        # | tr "\r" "\n"
        su node -c '\''
          npmi() {
            [ "$${SRI4NODE_TESTS_SKIP_NPM_INSTALL}" = "true" ] || {
              rm -rf node_modules docs dist* package-lock.json &&
                echo "==== start npm install (using node $$( node --version ) and npm $$( npm --version ))" &&
                (
                  # export NODE_OPTIONS="--max-old-space-size=4096 --dns-result-order=ipv4first"
                  npm config set registry http://registry.yarnpkg.com
                  npm config set loglevel notice
                  npm config set node-options="--max-old-space-size=2048 --dns-result-order=ipv4first"
                  npm config set fetch-retries 10
                  npm config set fetch-retry-factor 2
                  npm config set fetch-retry-mintimeout 100
                  npm config set fetch-retry-maxtimeout 10000
                  npm config set fetch-timeout 5000
                  # npmp --force --unsafe-perm --strict-ssl=false ???
                  npm install --foreground-scripts=true --no-progress
                )
            }
          }
          echo "Current user: $$(whoami)" &&
            ( npmi || npmi || npmi || npmi ) &&
            npm run test:inside_docker $${SRI4NODE_TESTS_TEST_COMMAND_ARGS}
        '\''
      '
  ### OBSOLETE, use sri4nodetests instead
  # sri4node16tests:
  #   depends_on:
  #     sri4nodepostgresdbfortests:
  #       condition: service_healthy
  #   image: node:16
  #   container_name: sri4node16pg${SRI4NODE_TESTS_POSTGRES_VERSION:-15-alpine}tests
  #   user: "root"
  #   working_dir: /home/node/sri4node
  #   volumes:
  #     - ../:/home/node/source_app
  #   tty: true
  #   command: > # > denotes a long string separated over multiple lines, escape $ with $$ !!!
  #     bash -c '
  #       echo "Current user: $$(whoami)" && pwd &&
  #       cp -r ../source_app/* . &&
  #       chown -R node:node . &&
  #       # ls &&
  #       # | tr "\r" "\n"
  #       su node -c '\''
  #         npmi() {
  #           [ "${SRI4NODE_TESTS_SKIP_NPM_INSTALL}" = "true" ] || {
  #             rm -rf node_modules docs dist* package-lock.json &&
  #             echo "==== start npm install (using node $$( node --version ) and npm $$( npm --version ))" &&
  #             npm install --foreground-scripts=true --log-level info
  #           }
  #         }
  #         echo "Current user: $$(whoami)" &&
  #         ( npmi || npmi || npmi || npmi ) &&
  #         npm run test:inside_docker
  #       '\''
  #     '

  # sri4node18tests:
  #   image: node:18
  #   container_name: sri4node18tests
  #   user: "root"
  #   working_dir: /home/node/sri4node
  #   volumes:
  #     - ../:/home/node/source_app
  #   tty: true
  #   command: > # > denotes a long string separated over multiple lines, escape $ with $$ !!!
  #     bash -c '
  #       echo "Current user: $$(whoami)" && pwd &&
  #       cp -r ../source_app/* . &&
  #       chown -R node:node . &&
  #       # ls &&
  #       su node -c '\''
  #         npmi() {
  #           [ "${SRI4NODE_TESTS_SKIP_NPM_INSTALL}" = "true" ] || {
  #             rm -rf node_modules docs dist* package-lock.json &&
  #             echo "==== start npm install (using node $$( node --version ) and npm $$( npm --version ))" &&
  #             npm install --foreground-scripts=true --log-level info
  #           }
  #         }
  #         echo "Current user: $$(whoami)" &&
  #         rm -rf node_modules docs dist* package-lock.json &&
  #         ( npmi || npmi || npmi || npmi ) &&
  #         npm run test:inside_docker
  #       '\''
  #     '

  # sri4node20tests:
  #   image: node:20
  #   container_name: sri4node20tests
  #   user: "root"
  #   working_dir: /home/node/sri4node
  #   volumes:
  #     - ../:/home/node/source_app
  #   tty: true
  #   command: > # > denotes a long string separated over multiple lines, escape $ with $$ !!!
  #     bash -c '
  #       echo "Current user: $$(whoami)" && pwd &&
  #       cp -r ../source_app/* . &&
  #       chown -R node:node . &&
  #       # ls &&
  #       su node -c '\''
  #         npmi() {
  #           [ "${SRI4NODE_TESTS_SKIP_NPM_INSTALL}" = "true" ] || {
  #             rm -rf node_modules docs dist* package-lock.json &&
  #             echo "==== start npm install (using node $$( node --version ) and npm $$( npm --version ))" &&
  #             npm install --foreground-scripts=true --log-level info
  #           }
  #         }
  #         echo "Current user: $$(whoami)" &&
  #         rm -rf node_modules docs dist* package-lock.json &&
  #         ( npmi || npmi || npmi || npmi ) &&
  #         npm run test:inside_docker
  #       '\''
  #     '
